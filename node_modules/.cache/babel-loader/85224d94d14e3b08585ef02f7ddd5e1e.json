{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getPartList } from './service';\nconst partSlice = createSlice({\n  name: 'partSlice',\n  initialState: {\n    parts: [],\n    bulkOrderItem: []\n  },\n  reducers: {\n    addParts: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.parts = payload;\n    }\n  }\n});\nexport const {\n  addParts\n} = partSlice.actions;\nexport const getParts = payload => dispatcher => {\n  return getPartList(payload).then(response => {\n    return Promise.resolve(response);\n  }, error => {\n    return Promise.reject(error);\n  });\n};\nexport const selectPart = state => state.partListReducer;\nexport default partSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/Parts/slice.js"],"names":["createSlice","getPartList","partSlice","name","initialState","parts","bulkOrderItem","reducers","addParts","state","payload","actions","getParts","dispatcher","then","response","Promise","resolve","error","reject","selectPart","partListReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAAUC,WAAV,QAA6B,WAA7B;AAGA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAE,WADoB;AAE1BC,EAAAA,YAAY,EAAE;AACXC,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,aAAa,EAAE;AAFJ,GAFY;AAM1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AAC5BD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,OAAd;AACH;AAHK;AANgB,CAAD,CAA7B;AAcA,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAeN,SAAS,CAACS,OAA/B;AAEP,OAAO,MAAMC,QAAQ,GAAIF,OAAD,IAAaG,UAAU,IAAI;AAC/C,SAAOZ,WAAW,CAACS,OAAD,CAAX,CAAqBI,IAArB,CACHC,QAAQ,IAAI;AACR,WAAOC,OAAO,CAACC,OAAR,CAAgBF,QAAhB,CAAP;AACH,GAHE,EAKHG,KAAK,IAAI;AACL,WAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH,GAPE,CAAP;AAUH,CAXM;AAkBP,OAAO,MAAME,UAAU,GAAGX,KAAK,IAAIA,KAAK,CAACY,eAAlC;AAIP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport {  getPartList } from './service';\r\n\r\n\r\nconst partSlice = createSlice({\r\n    name: 'partSlice',\r\n    initialState: {\r\n       parts: [],\r\n       bulkOrderItem: []\r\n    }, \r\n    reducers: {\r\n        addParts: (state, {payload}) => {\r\n            state.parts = payload;\r\n        },\r\n\r\n    }\r\n});\r\n\r\nexport const { addParts } = partSlice.actions;\r\n\r\nexport const getParts = (payload) => dispatcher => {\r\n    return getPartList(payload).then(\r\n        response => {\r\n            return Promise.resolve(response);\r\n        },\r\n\r\n        error => {\r\n            return Promise.reject(error);\r\n        }\r\n\r\n    )\r\n}   \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const selectPart = state => state.partListReducer;\r\n\r\n\r\n\r\nexport default partSlice.reducer;"]},"metadata":{},"sourceType":"module"}