{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Util } from '../Util.js';\nimport { getNumberValidator } from '../Validators.js';\n\nvar ToPolar = function (src, dst, opt) {\n  var srcPixels = src.data,\n      dstPixels = dst.data,\n      xSize = src.width,\n      ySize = src.height,\n      xMid = opt.polarCenterX || xSize / 2,\n      yMid = opt.polarCenterY || ySize / 2,\n      i,\n      x,\n      y,\n      r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n  var rad,\n      rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n  x = xSize - xMid;\n  y = ySize - yMid;\n  rad = Math.sqrt(x * x + y * y);\n  rMax = rad > rMax ? rad : rMax;\n  var rSize = ySize,\n      tSize = xSize,\n      radius,\n      theta;\n  var conversion = 360 / tSize * Math.PI / 180,\n      sin,\n      cos;\n\n  for (theta = 0; theta < tSize; theta += 1) {\n    sin = Math.sin(theta * conversion);\n    cos = Math.cos(theta * conversion);\n\n    for (radius = 0; radius < rSize; radius += 1) {\n      x = Math.floor(xMid + rMax * radius / rSize * cos);\n      y = Math.floor(yMid + rMax * radius / rSize * sin);\n      i = (y * xSize + x) * 4;\n      r = srcPixels[i + 0];\n      g = srcPixels[i + 1];\n      b = srcPixels[i + 2];\n      a = srcPixels[i + 3];\n      i = (theta + radius * xSize) * 4;\n      dstPixels[i + 0] = r;\n      dstPixels[i + 1] = g;\n      dstPixels[i + 2] = b;\n      dstPixels[i + 3] = a;\n    }\n  }\n};\n\nvar FromPolar = function (src, dst, opt) {\n  var srcPixels = src.data,\n      dstPixels = dst.data,\n      xSize = src.width,\n      ySize = src.height,\n      xMid = opt.polarCenterX || xSize / 2,\n      yMid = opt.polarCenterY || ySize / 2,\n      i,\n      x,\n      y,\n      dx,\n      dy,\n      r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n  var rad,\n      rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n  x = xSize - xMid;\n  y = ySize - yMid;\n  rad = Math.sqrt(x * x + y * y);\n  rMax = rad > rMax ? rad : rMax;\n  var rSize = ySize,\n      tSize = xSize,\n      radius,\n      theta,\n      phaseShift = opt.polarRotation || 0;\n  var x1, y1;\n\n  for (x = 0; x < xSize; x += 1) {\n    for (y = 0; y < ySize; y += 1) {\n      dx = x - xMid;\n      dy = y - yMid;\n      radius = Math.sqrt(dx * dx + dy * dy) * rSize / rMax;\n      theta = (Math.atan2(dy, dx) * 180 / Math.PI + 360 + phaseShift) % 360;\n      theta = theta * tSize / 360;\n      x1 = Math.floor(theta);\n      y1 = Math.floor(radius);\n      i = (y1 * xSize + x1) * 4;\n      r = srcPixels[i + 0];\n      g = srcPixels[i + 1];\n      b = srcPixels[i + 2];\n      a = srcPixels[i + 3];\n      i = (y * xSize + x) * 4;\n      dstPixels[i + 0] = r;\n      dstPixels[i + 1] = g;\n      dstPixels[i + 2] = b;\n      dstPixels[i + 3] = a;\n    }\n  }\n};\n\nexport const Kaleidoscope = function (imageData) {\n  var xSize = imageData.width,\n      ySize = imageData.height;\n  var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n  var power = Math.round(this.kaleidoscopePower());\n  var angle = Math.round(this.kaleidoscopeAngle());\n  var offset = Math.floor(xSize * (angle % 360) / 360);\n\n  if (power < 1) {\n    return;\n  }\n\n  var tempCanvas = Util.createCanvasElement();\n  tempCanvas.width = xSize;\n  tempCanvas.height = ySize;\n  var scratchData = tempCanvas.getContext('2d').getImageData(0, 0, xSize, ySize);\n  ToPolar(imageData, scratchData, {\n    polarCenterX: xSize / 2,\n    polarCenterY: ySize / 2\n  });\n  var minSectionSize = xSize / Math.pow(2, power);\n\n  while (minSectionSize <= 8) {\n    minSectionSize = minSectionSize * 2;\n    power -= 1;\n  }\n\n  minSectionSize = Math.ceil(minSectionSize);\n  var sectionSize = minSectionSize;\n  var xStart = 0,\n      xEnd = sectionSize,\n      xDelta = 1;\n\n  if (offset + minSectionSize > xSize) {\n    xStart = sectionSize;\n    xEnd = 0;\n    xDelta = -1;\n  }\n\n  for (y = 0; y < ySize; y += 1) {\n    for (x = xStart; x !== xEnd; x += xDelta) {\n      xoff = Math.round(x + offset) % xSize;\n      srcPos = (xSize * y + xoff) * 4;\n      r = scratchData.data[srcPos + 0];\n      g = scratchData.data[srcPos + 1];\n      b = scratchData.data[srcPos + 2];\n      a = scratchData.data[srcPos + 3];\n      dstPos = (xSize * y + x) * 4;\n      scratchData.data[dstPos + 0] = r;\n      scratchData.data[dstPos + 1] = g;\n      scratchData.data[dstPos + 2] = b;\n      scratchData.data[dstPos + 3] = a;\n    }\n  }\n\n  for (y = 0; y < ySize; y += 1) {\n    sectionSize = Math.floor(minSectionSize);\n\n    for (i = 0; i < power; i += 1) {\n      for (x = 0; x < sectionSize + 1; x += 1) {\n        srcPos = (xSize * y + x) * 4;\n        r = scratchData.data[srcPos + 0];\n        g = scratchData.data[srcPos + 1];\n        b = scratchData.data[srcPos + 2];\n        a = scratchData.data[srcPos + 3];\n        dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n        scratchData.data[dstPos + 0] = r;\n        scratchData.data[dstPos + 1] = g;\n        scratchData.data[dstPos + 2] = b;\n        scratchData.data[dstPos + 3] = a;\n      }\n\n      sectionSize *= 2;\n    }\n  }\n\n  FromPolar(scratchData, imageData, {\n    polarRotation: 0\n  });\n};\nFactory.addGetterSetter(Node, 'kaleidoscopePower', 2, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'kaleidoscopeAngle', 0, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"sources":["../../src/filters/Kaleidoscope.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Util } from '../Util.js';\nimport { getNumberValidator } from '../Validators.js';\nvar ToPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta;\n    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;\n    for (theta = 0; theta < tSize; theta += 1) {\n        sin = Math.sin(theta * conversion);\n        cos = Math.cos(theta * conversion);\n        for (radius = 0; radius < rSize; radius += 1) {\n            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);\n            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);\n            i = (y * xSize + x) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (theta + radius * xSize) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nvar FromPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;\n    var x1, y1;\n    for (x = 0; x < xSize; x += 1) {\n        for (y = 0; y < ySize; y += 1) {\n            dx = x - xMid;\n            dy = y - yMid;\n            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;\n            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;\n            theta = (theta * tSize) / 360;\n            x1 = Math.floor(theta);\n            y1 = Math.floor(radius);\n            i = (y1 * xSize + x1) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (y * xSize + x) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nexport const Kaleidoscope = function (imageData) {\n    var xSize = imageData.width, ySize = imageData.height;\n    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n    var power = Math.round(this.kaleidoscopePower());\n    var angle = Math.round(this.kaleidoscopeAngle());\n    var offset = Math.floor((xSize * (angle % 360)) / 360);\n    if (power < 1) {\n        return;\n    }\n    var tempCanvas = Util.createCanvasElement();\n    tempCanvas.width = xSize;\n    tempCanvas.height = ySize;\n    var scratchData = tempCanvas\n        .getContext('2d')\n        .getImageData(0, 0, xSize, ySize);\n    ToPolar(imageData, scratchData, {\n        polarCenterX: xSize / 2,\n        polarCenterY: ySize / 2,\n    });\n    var minSectionSize = xSize / Math.pow(2, power);\n    while (minSectionSize <= 8) {\n        minSectionSize = minSectionSize * 2;\n        power -= 1;\n    }\n    minSectionSize = Math.ceil(minSectionSize);\n    var sectionSize = minSectionSize;\n    var xStart = 0, xEnd = sectionSize, xDelta = 1;\n    if (offset + minSectionSize > xSize) {\n        xStart = sectionSize;\n        xEnd = 0;\n        xDelta = -1;\n    }\n    for (y = 0; y < ySize; y += 1) {\n        for (x = xStart; x !== xEnd; x += xDelta) {\n            xoff = Math.round(x + offset) % xSize;\n            srcPos = (xSize * y + xoff) * 4;\n            r = scratchData.data[srcPos + 0];\n            g = scratchData.data[srcPos + 1];\n            b = scratchData.data[srcPos + 2];\n            a = scratchData.data[srcPos + 3];\n            dstPos = (xSize * y + x) * 4;\n            scratchData.data[dstPos + 0] = r;\n            scratchData.data[dstPos + 1] = g;\n            scratchData.data[dstPos + 2] = b;\n            scratchData.data[dstPos + 3] = a;\n        }\n    }\n    for (y = 0; y < ySize; y += 1) {\n        sectionSize = Math.floor(minSectionSize);\n        for (i = 0; i < power; i += 1) {\n            for (x = 0; x < sectionSize + 1; x += 1) {\n                srcPos = (xSize * y + x) * 4;\n                r = scratchData.data[srcPos + 0];\n                g = scratchData.data[srcPos + 1];\n                b = scratchData.data[srcPos + 2];\n                a = scratchData.data[srcPos + 3];\n                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n                scratchData.data[dstPos + 0] = r;\n                scratchData.data[dstPos + 1] = g;\n                scratchData.data[dstPos + 2] = b;\n                scratchData.data[dstPos + 3] = a;\n            }\n            sectionSize *= 2;\n        }\n    }\n    FromPolar(scratchData, imageData, { polarRotation: 0 });\n};\nFactory.addGetterSetter(Node, 'kaleidoscopePower', 2, getNumberValidator(), Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'kaleidoscopeAngle', 0, getNumberValidator(), Factory.afterSetFilter);\n//# sourceMappingURL=Kaleidoscope.js.map"]},"metadata":{},"sourceType":"module"}