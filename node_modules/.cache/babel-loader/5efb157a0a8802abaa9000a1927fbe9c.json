{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TapActivation = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nconst TouchEnvironmentActivation_1 = require(\"./TouchEnvironmentActivation\");\n\nclass TapActivation extends TouchEnvironmentActivation_1.TouchEnvironmentActivation {\n  constructor(options) {\n    super({\n      onIsActiveChanged: options.onIsActiveChanged\n    });\n    this.hasTapGestureEnded = false;\n    this.tapDurationInMs = options.tapDurationInMs;\n    this.tapMoveThreshold = options.tapMoveThreshold;\n  }\n\n  touchStarted(event) {\n    this.hasTapGestureEnded = false;\n    this.initMoveThreshold(event.position);\n    this.setTapEventTimer();\n  }\n\n  touchMoved(event) {\n    if (this.isActive) {\n      return;\n    }\n\n    this.setMoveThresholdCriteria(event.position);\n  }\n\n  touchEnded() {\n    this.hasTapGestureEnded = true;\n  }\n\n  get hasPassedMoveThreshold() {\n    return Math.abs(this.currentElTop - this.initialElTop) > this.tapMoveThreshold;\n  }\n\n  get isTapGestureActive() {\n    return !this.hasPassedMoveThreshold && this.hasTapGestureEnded;\n  }\n\n  setTapEventTimer() {\n    this.timers.push({\n      name: constants_1.TAP_GESTURE_TIMER_NAME,\n      id: setTimeout(() => {\n        if (this.isTapGestureActive) {\n          this.toggleActivation();\n        }\n      }, this.tapDurationInMs)\n    });\n  }\n\n  setMoveThresholdCriteria(position) {\n    this.currentElTop = position.y;\n  }\n\n  initMoveThreshold(position) {\n    const top = position.y;\n    this.initialElTop = top;\n    this.currentElTop = top;\n  }\n\n}\n\nexports.TapActivation = TapActivation;","map":{"version":3,"sources":["../../../src/lib/TapActivation.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAQA,MAAa,aAAb,SAAmC,4BAAA,CAAA,0BAAnC,CAA6D;AAOzD,EAAA,WAAA,CAAY,OAAZ,EAAyC;AACrC,UAAM;AAAE,MAAA,iBAAiB,EAAE,OAAO,CAAC;AAA7B,KAAN;AAEA,SAAK,kBAAL,GAA0B,KAA1B;AACA,SAAK,eAAL,GAAuB,OAAO,CAAC,eAA/B;AACA,SAAK,gBAAL,GAAwB,OAAO,CAAC,gBAAhC;AACH;;AAED,EAAA,YAAY,CAAC,KAAD,EAAkB;AAC1B,SAAK,kBAAL,GAA0B,KAA1B;AACA,SAAK,iBAAL,CAAuB,KAAK,CAAC,QAA7B;AACA,SAAK,gBAAL;AACH;;AAED,EAAA,UAAU,CAAC,KAAD,EAAkB;AACxB,QAAI,KAAK,QAAT,EAAmB;AACf;AACH;;AAED,SAAK,wBAAL,CAA8B,KAAK,CAAC,QAApC;AACH;;AAED,EAAA,UAAU,GAAA;AACN,SAAK,kBAAL,GAA0B,IAA1B;AACH;;AAEyB,MAAtB,sBAAsB,GAAA;AACtB,WAAO,IAAI,CAAC,GAAL,CAAS,KAAK,YAAL,GAAoB,KAAK,YAAlC,IAAkD,KAAK,gBAA9D;AACH;;AAEqB,MAAlB,kBAAkB,GAAA;AAClB,WAAO,CAAC,KAAK,sBAAN,IAAgC,KAAK,kBAA5C;AACH;;AAED,EAAA,gBAAgB,GAAA;AACZ,SAAK,MAAL,CAAY,IAAZ,CAAiB;AACb,MAAA,IAAI,EAAE,WAAA,CAAA,sBADO;AAEb,MAAA,EAAE,EAAE,UAAU,CAAC,MAAK;AAChB,YAAI,KAAK,kBAAT,EAA6B;AACzB,eAAK,gBAAL;AACH;AACJ,OAJa,EAIX,KAAK,eAJM;AAFD,KAAjB;AAQH;;AAED,EAAA,wBAAwB,CAAC,QAAD,EAAgB;AACpC,SAAK,YAAL,GAAoB,QAAQ,CAAC,CAA7B;AACH;;AAED,EAAA,iBAAiB,CAAC,QAAD,EAAgB;AAC7B,UAAM,GAAG,GAAG,QAAQ,CAAC,CAArB;AAEA,SAAK,YAAL,GAAoB,GAApB;AACA,SAAK,YAAL,GAAoB,GAApB;AACH;;AA7DwD;;AAA7D,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { TAP_GESTURE_TIMER_NAME } from 'src/constants';\nimport { TouchEnvironmentActivation, TouchEnvironmentActivationOptions } from 'src/lib/TouchEnvironmentActivation';\nimport type { Point, TouchEvent } from 'src/types';\n\nexport type TapActivationOptions = TouchEnvironmentActivationOptions & {\n    tapDurationInMs: number;\n    tapMoveThreshold: number;\n};\n\nexport class TapActivation extends TouchEnvironmentActivation {\n    hasTapGestureEnded: boolean;\n\n    tapDurationInMs: number;\n\n    tapMoveThreshold: number;\n\n    constructor(options: TapActivationOptions) {\n        super({ onIsActiveChanged: options.onIsActiveChanged });\n\n        this.hasTapGestureEnded = false;\n        this.tapDurationInMs = options.tapDurationInMs;\n        this.tapMoveThreshold = options.tapMoveThreshold;\n    }\n\n    touchStarted(event: TouchEvent): void {\n        this.hasTapGestureEnded = false;\n        this.initMoveThreshold(event.position);\n        this.setTapEventTimer();\n    }\n\n    touchMoved(event: TouchEvent): void {\n        if (this.isActive) {\n            return;\n        }\n\n        this.setMoveThresholdCriteria(event.position);\n    }\n\n    touchEnded(): void {\n        this.hasTapGestureEnded = true;\n    }\n\n    get hasPassedMoveThreshold(): boolean {\n        return Math.abs(this.currentElTop - this.initialElTop) > this.tapMoveThreshold;\n    }\n\n    get isTapGestureActive(): boolean {\n        return !this.hasPassedMoveThreshold && this.hasTapGestureEnded;\n    }\n\n    setTapEventTimer(): void {\n        this.timers.push({\n            name: TAP_GESTURE_TIMER_NAME,\n            id: setTimeout(() => {\n                if (this.isTapGestureActive) {\n                    this.toggleActivation();\n                }\n            }, this.tapDurationInMs),\n        });\n    }\n\n    setMoveThresholdCriteria(position: Point): void {\n        this.currentElTop = position.y;\n    }\n\n    initMoveThreshold(position: Point): void {\n        const top = position.y;\n\n        this.initialElTop = top;\n        this.currentElTop = top;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}