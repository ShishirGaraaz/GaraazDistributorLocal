{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\BankingDetailsForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Input, Button } from '@chakra-ui/react';\nimport { useHistory } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { isEmpty, toUpper } from 'lodash';\nimport messages from './messages';\nimport { publicAxios as axios } from '../../axios';\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\nimport CustomInput from '../../utils/Input';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport { Box } from '@chakra-ui/react';\nimport InputScaffold from '../../utils/InputScaffold';\nimport { UseOnboardContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BankingDetailsForm = _ref => {\n  _s();\n\n  let {\n    distributor,\n    setActiveStep,\n    distributorData,\n    distributorId\n  } = _ref;\n  const history = useHistory();\n  const [bankingDetails, setBankingDetails] = useState({});\n  const dispatch = useDispatch(); //const [distributorId, setDistributorId] = useState('');\n\n  const auth = useSelector(state => state.auth);\n  const intl = useIntl();\n  const [loading, setLoading] = useState(false);\n  const {\n    updateOnboard\n  } = UseOnboardContext();\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onSubmit'\n  });\n\n  const getDistributorData = async () => {\n    const data = await distributorData(); //setDistributorId(data._id);\n\n    if (!isEmpty(data.banking)) {\n      setBankingDetails(data.banking[0]);\n      dispatch(setDistributorInfo({ ...distributor,\n        banking: true\n      }));\n    }\n  };\n\n  useEffect(() => {\n    getDistributorData();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(bankingDetails)) {\n      setValue('bankingName', get(bankingDetails, 'bankingName', ''));\n      setValue('legalEntityName', get(bankingDetails, 'legalEntityName', ''));\n      setValue('bankName', get(bankingDetails, 'bankName', ''));\n      setValue('ifsc', get(bankingDetails, 'ifsc', ''));\n      setValue('accountNumber', get(bankingDetails, 'accountNumber', ''));\n      setValue('bankBranchName', get(bankingDetails, 'bankBranchName', ''));\n      setValue('upi', get(bankingDetails, 'upi', ''));\n      setValue('bankBranchAddress', get(bankingDetails, 'bankBranchAddress', ''));\n    }\n  }, [bankingDetails]);\n\n  const handleFormSubmit = async data => {\n    data.ifsc = toUpper(data.ifsc);\n\n    try {\n      setLoading(true);\n      const api = `/distributors/${distributorId}/bankings`;\n\n      if (!isEmpty(bankingDetails)) {\n        await axios.patch(api, { ...data\n        }, {\n          headers: {\n            Authorization: auth.authToken\n          }\n        });\n      } else {\n        const res = await axios.post(api, { ...data\n        }, {\n          headers: {\n            Authorization: auth.authToken\n          }\n        });\n        dispatch(setDistributorInfo({ ...distributor,\n          banking: res.data.banking\n        }));\n      }\n\n      toast(intl.formatMessage(messages.bankingDetailsSaveSuccess));\n\n      if (distributor.location && distributor.individual && distributor.business) {\n        if (localStorage.onboard) {\n          history.push('/branch/add');\n          localStorage.onboard = 2;\n          updateOnboard(2);\n        }\n      } else {\n        if (!distributor.business) {\n          setActiveStep(1);\n        } else if (!distributor.location) {\n          setActiveStep(3);\n        } else {\n          setActiveStep(2);\n        }\n      }\n\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  const onReset = () => {\n    reset({}, {\n      keepDirty: false,\n      keepErrors: false,\n      keepValues: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.bankingDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.accountNumber,\n            inputName: \"accountNumber\",\n            inputType: \"number\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.accountNumberRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.bankName,\n            inputName: \"bankName\",\n            inputType: \"text\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.bankNameRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          my: {\n            base: 0,\n            lg: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.bankBranchAddress,\n            inputName: \"bankBranchAddress\",\n            inputType: \"textarea\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.branchAddressRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: {\n              base: '100%',\n              lg: '48%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.upiId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              placeholder: intl.formatMessage(messages.upiId),\n              ...register('upi', {\n                pattern: /^[\\w\\.\\-_]{3,}@[a-zA-Z]{3,}/\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), errors && errors.upi && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: errors.upi.type === 'required' ? intl.formatMessage(messages.upiIdRequired) : intl.formatMessage(messages.invalidupiId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.bankBranchName,\n            inputName: \"bankBranchName\",\n            inputType: \"text\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.branchNameRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.ifsc,\n            inputName: \"ifsc\",\n            inputType: \"text\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.ifscCodeRequired,\n            register: register,\n            maxVal: 11,\n            length: {\n              max: 11\n            },\n            errMsg: messages.ifscErrMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: {\n            base: 0,\n            lg: 6\n          },\n          mb: 6,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormactionButtons, {\n          isLoading: loading,\n          saveLabel: messages.submitButton,\n          onReset: onReset,\n          cancleLabel: messages.cancelButtonLabe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BankingDetailsForm, \"QgvulHpXNI8v/ivRhGw4kTY3700=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useIntl, useForm];\n});\n\n_c = BankingDetailsForm;\nBankingDetailsForm.propTypes = {\n  distributor: PropTypes.object,\n  setActiveStep: PropTypes.func,\n  distributorData: PropTypes.func\n};\nexport default BankingDetailsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BankingDetailsForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/BankingDetailsForm/index.js"],"names":["React","useEffect","useState","PropTypes","useForm","Input","Button","useHistory","useIntl","toast","useDispatch","useSelector","get","isEmpty","toUpper","messages","publicAxios","axios","setDistributorInfo","CustomInput","FormactionButtons","Box","InputScaffold","UseOnboardContext","BankingDetailsForm","distributor","setActiveStep","distributorData","distributorId","history","bankingDetails","setBankingDetails","dispatch","auth","state","intl","loading","setLoading","updateOnboard","register","formState","errors","handleSubmit","reset","setValue","mode","getDistributorData","data","banking","handleFormSubmit","ifsc","api","patch","headers","Authorization","authToken","res","post","formatMessage","bankingDetailsSaveSuccess","location","individual","business","localStorage","onboard","push","err","somethingWentWrong","onReset","keepDirty","keepErrors","keepValues","accountNumber","accountNumberRequired","bankName","bankNameRequired","base","lg","bankBranchAddress","branchAddressRequired","upiId","pattern","upi","type","upiIdRequired","invalidupiId","bankBranchName","branchNameRequired","ifscCodeRequired","max","ifscErrMsg","submitButton","cancelButtonLabe","propTypes","object","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Input, Button } from '@chakra-ui/react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\nimport toast from 'react-hot-toast';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport {isEmpty, toUpper} from 'lodash';\r\nimport messages from './messages';\r\nimport { publicAxios as axios } from '../../axios';\r\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\r\nimport CustomInput from '../../utils/Input';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport { Box } from '@chakra-ui/react';\r\nimport InputScaffold from '../../utils/InputScaffold';\r\nimport { UseOnboardContext } from '../../App'\r\n\r\nconst BankingDetailsForm = ({\r\n  distributor,\r\n  setActiveStep,\r\n  distributorData,\r\n  distributorId\r\n}) => {\r\n  const history = useHistory();\r\n  const [bankingDetails, setBankingDetails] = useState({});\r\n  const dispatch = useDispatch();\r\n  //const [distributorId, setDistributorId] = useState('');\r\n  const auth = useSelector((state) => state.auth);\r\n  const intl = useIntl();\r\n  const [loading, setLoading] = useState(false);\r\n  const { updateOnboard }  = UseOnboardContext();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm({ mode: 'onSubmit' });\r\n  const getDistributorData = async () => {\r\n    const data = await distributorData();\r\n    //setDistributorId(data._id);\r\n    if (!isEmpty(data.banking)) {\r\n      setBankingDetails(data.banking[0]);\r\n      dispatch(setDistributorInfo({ ...distributor, banking: true }));\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getDistributorData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(bankingDetails)) {\r\n      setValue('bankingName', get(bankingDetails, 'bankingName', ''));\r\n      setValue('legalEntityName', get(bankingDetails, 'legalEntityName', ''));\r\n      setValue('bankName', get(bankingDetails, 'bankName', ''));\r\n      setValue('ifsc', get(bankingDetails, 'ifsc', ''));\r\n      setValue('accountNumber', get(bankingDetails, 'accountNumber', ''));\r\n      setValue('bankBranchName', get(bankingDetails, 'bankBranchName', ''));\r\n      setValue('upi', get(bankingDetails, 'upi', ''));\r\n      setValue(\r\n        'bankBranchAddress',\r\n        get(bankingDetails, 'bankBranchAddress', ''),\r\n      );\r\n    }\r\n  }, [bankingDetails]);\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    data.ifsc = toUpper(data.ifsc);\r\n    try {\r\n      setLoading(true)\r\n      const api = `/distributors/${distributorId}/bankings`;\r\n      if (!isEmpty(bankingDetails)) {\r\n        await axios.patch(\r\n          api,\r\n          {\r\n            ...data,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: auth.authToken,\r\n            },\r\n          },\r\n        );\r\n      } else {\r\n        const res = await axios.post(\r\n          api,\r\n          {\r\n            ...data,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: auth.authToken,\r\n            },\r\n          },\r\n        );\r\n        dispatch(\r\n          setDistributorInfo({ ...distributor, banking: res.data.banking }),\r\n        );\r\n      }\r\n      toast(intl.formatMessage(messages.bankingDetailsSaveSuccess));\r\n      if (\r\n        distributor.location &&\r\n        distributor.individual &&\r\n        distributor.business\r\n      ) {\r\n        if(localStorage.onboard){\r\n          history.push('/branch/add');\r\n          localStorage.onboard=2;\r\n          updateOnboard(2);\r\n        }\r\n        \r\n      } else {\r\n        if (!distributor.business) {\r\n          setActiveStep(1);\r\n        } else if (!distributor.location) {\r\n          setActiveStep(3);\r\n        } else {\r\n          setActiveStep(2);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n  const onReset = () => {\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.bankingDetails)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap'>\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.accountNumber}\r\n              inputName='accountNumber'\r\n              inputType='number'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.accountNumberRequired}\r\n              register={register}\r\n            />\r\n           {/*  <InputScaffold\r\n              width='48%'\r\n              label={messages.bankingName}\r\n              inputName='bankingName'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.bankingNameRequired}\r\n              register={register}\r\n            /> */}\r\n\r\n<InputScaffold\r\n              width='48%'\r\n              label={messages.bankName}\r\n              inputName='bankName'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.bankNameRequired}\r\n              register={register}\r\n            />\r\n          </Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap' my={{base: 0, lg: 6}}>\r\n           {/*  <InputScaffold\r\n              width='48%'\r\n              label={messages.legalEntityName}\r\n              inputName='legalEntityName'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.legalEntityNameRequired}\r\n              register={register}\r\n            /> */}\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.bankBranchAddress}\r\n              inputName='bankBranchAddress'\r\n              inputType='textarea'\r\n              isRequired={false}\r\n              errors={errors}\r\n              requiredLabel={messages.branchAddressRequired}\r\n              register={register}\r\n            />\r\n            <Box width={{ base: '100%', lg: '48%' }}>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.upiId)}\r\n              </label>\r\n              <Input\r\n                type='text'\r\n                placeholder={intl.formatMessage(messages.upiId)}\r\n                {...register('upi', {\r\n                  pattern: /^[\\w\\.\\-_]{3,}@[a-zA-Z]{3,}/,\r\n                })}\r\n              />\r\n              {errors && errors.upi && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {errors.upi.type === 'required'\r\n                    ? intl.formatMessage(messages.upiIdRequired)\r\n                    : intl.formatMessage(messages.invalidupiId)}\r\n                </span>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap'>\r\n          <InputScaffold\r\n              width='48%'\r\n              label={messages.bankBranchName}\r\n              inputName='bankBranchName'\r\n              inputType='text'\r\n              isRequired={false}\r\n              errors={errors}\r\n              requiredLabel={messages.branchNameRequired}\r\n              register={register}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.ifsc}\r\n              inputName='ifsc'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.ifscCodeRequired}\r\n              register={register}\r\n              maxVal={11}\r\n              length={{max:11}}\r\n              errMsg={messages.ifscErrMsg}\r\n            />\r\n          </Box>\r\n          <Box mt={{base: 0, lg: 6}} mb={6} display='flex' justifyContent='space-between' flexWrap='wrap'>\r\n           \r\n            \r\n          </Box>\r\n          <FormactionButtons\r\n            isLoading={loading}\r\n            saveLabel={messages.submitButton}\r\n            onReset={onReset}\r\n            cancleLabel={messages.cancelButtonLabe}\r\n          />\r\n        </Box>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nBankingDetailsForm.propTypes = {\r\n  distributor: PropTypes.object,\r\n  setActiveStep: PropTypes.func,\r\n  distributorData: PropTypes.func,\r\n};\r\n\r\nexport default BankingDetailsForm;\r\n"]},"metadata":{},"sourceType":"module"}