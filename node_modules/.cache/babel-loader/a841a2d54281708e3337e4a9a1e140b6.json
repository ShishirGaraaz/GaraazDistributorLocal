{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\utils\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport { Input } from \"@chakra-ui/input\";\nimport { useIntl } from 'react-intl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CustomInput = _ref => {\n  _s();\n\n  let {\n    width,\n    label,\n    inputName,\n    maxVal = null,\n    defaultVal = undefined,\n    inputType,\n    isRequired,\n    errors,\n    requiredLabel,\n    register,\n    value = undefined,\n    isReadOnly,\n    length = {},\n    errMsg = {}\n  } = _ref;\n  const intl = useIntl();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `w-full lg:w-${width}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n        children: intl.formatMessage(label)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        max: inputType === 'number' ? maxVal : null,\n        type: inputType,\n        step: inputType === 'number' ? \".001\" : \"\",\n        placeholder: intl.formatMessage(label) // value={defaultVal}\n        ,\n        defaultValue: value,\n        ...register(inputName, {\n          required: isRequired || false,\n          maxLength: length.max || null,\n          minLength: length.min || null,\n          pattern: inputName === 'mobileNumber' ? /^\\d{10}$/ : inputName === 'email' ? /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ : ''\n        }),\n        isReadOnly: isReadOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), errors && inputName in errors && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-youtube-regular text-sm\",\n        children: errors[inputName].type === 'required' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: intl.formatMessage(requiredLabel)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: intl.formatMessage(errMsg)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomInput, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c = CustomInput;\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/utils/Input.js"],"names":["Input","useIntl","CustomInput","width","label","inputName","maxVal","defaultVal","undefined","inputType","isRequired","errors","requiredLabel","register","value","isReadOnly","length","errMsg","intl","formatMessage","required","maxLength","max","minLength","min","pattern","type"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;;;;AAEA,MAAMC,WAAW,GAAG,QAIA;AAAA;;AAAA,MAJC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,SAAhB;AACnBC,IAAAA,MAAM,GAAG,IADU;AACJC,IAAAA,UAAU,GAAGC,SADT;AACoBC,IAAAA,SADpB;AAEnBC,IAAAA,UAFmB;AAEPC,IAAAA,MAFO;AAECC,IAAAA,aAFD;AAEgBC,IAAAA,QAFhB;AAGnBC,IAAAA,KAAK,GAAGN,SAHW;AAGAO,IAAAA,UAHA;AAGYC,IAAAA,MAAM,GAAG,EAHrB;AAInBC,IAAAA,MAAM,GAAG;AAJU,GAID;AAClB,QAAMC,IAAI,GAAGjB,OAAO,EAApB;AACA,sBACE;AAAK,IAAA,SAAS,EAAG,eAAcE,KAAM,EAArC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE;AACE,QAAA,SAAS,EAAC,+DADZ;AAAA,kBAIGe,IAAI,CAACC,aAAL,CAAmBf,KAAnB;AAJH;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,KAAD;AACE,QAAA,GAAG,EAAEK,SAAS,KAAK,QAAd,GAAyBH,MAAzB,GAAkC,IADzC;AAEE,QAAA,IAAI,EAAEG,SAFR;AAGE,QAAA,IAAI,EAAEA,SAAS,KAAK,QAAd,GAAyB,MAAzB,GAAkC,EAH1C;AAIE,QAAA,WAAW,EAAES,IAAI,CAACC,aAAL,CAAmBf,KAAnB,CAJf,CAKE;AALF;AAME,QAAA,YAAY,EAAEU,KANhB;AAAA,WAOMD,QAAQ,CAACR,SAAD,EAAY;AACtBe,UAAAA,QAAQ,EAAEV,UAAU,IAAI,KADF;AAEtBW,UAAAA,SAAS,EAAEL,MAAM,CAACM,GAAP,IAAc,IAFH;AAGtBC,UAAAA,SAAS,EAAEP,MAAM,CAACQ,GAAP,IAAc,IAHH;AAItBC,UAAAA,OAAO,EAAEpB,SAAS,KAAK,cAAd,GAA+B,UAA/B,GAA4CA,SAAS,KAAK,OAAd,GAAwB,uJAAxB,GAAkL;AAJjN,SAAZ,CAPd;AAaE,QAAA,UAAU,EAAEU;AAbd;AAAA;AAAA;AAAA;AAAA,cAPF,EAsBGJ,MAAM,IAAIN,SAAS,IAAIM,MAAvB,iBACC;AAAM,QAAA,SAAS,EAAC,8BAAhB;AAAA,kBACGA,MAAM,CAACN,SAAD,CAAN,CAAkBqB,IAAlB,KAA2B,UAA3B,gBACC;AAAA,oBAAGR,IAAI,CAACC,aAAL,CAAmBP,aAAnB;AAAH,yBADD,gBAGC;AAAA,oBAAGM,IAAI,CAACC,aAAL,CAAmBF,MAAnB;AAAH;AAJJ;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CA1CD;;GAAMf,W;UAKSD,O;;;KALTC,W;AA2CN,eAAeA,WAAf","sourcesContent":["import { Input } from \"@chakra-ui/input\";\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst CustomInput = ({ width, label, inputName,\r\n  maxVal = null, defaultVal = undefined, inputType,\r\n  isRequired, errors, requiredLabel, register,\r\n  value = undefined, isReadOnly, length = {},\r\n  errMsg = {} }) => {\r\n  const intl = useIntl();\r\n  return (\r\n    <div className={`w-full lg:w-${width}`}>\r\n      <div className=\"relative w-full mb-3\">\r\n        <label\r\n          className=\"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\"\r\n\r\n        >\r\n          {intl.formatMessage(label)}\r\n        </label>\r\n        <Input\r\n          max={inputType === 'number' ? maxVal : null}\r\n          type={inputType}\r\n          step={inputType === 'number' ? \".001\" : \"\"}\r\n          placeholder={intl.formatMessage(label)}\r\n          // value={defaultVal}\r\n          defaultValue={value}\r\n          {...register(inputName, {\r\n            required: isRequired || false,\r\n            maxLength: length.max || null,\r\n            minLength: length.min || null,\r\n            pattern: inputName === 'mobileNumber' ? /^\\d{10}$/ : inputName === 'email' ? /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ : ''\r\n          })}\r\n          isReadOnly={isReadOnly}\r\n        />\r\n        {errors && inputName in errors && (\r\n          <span className=\"text-youtube-regular text-sm\">\r\n            {errors[inputName].type === 'required' ? (\r\n              <>{intl.formatMessage(requiredLabel)}</>\r\n            ) : (\r\n              <>{intl.formatMessage(errMsg)}</>\r\n            )}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CustomInput;"]},"metadata":{},"sourceType":"module"}