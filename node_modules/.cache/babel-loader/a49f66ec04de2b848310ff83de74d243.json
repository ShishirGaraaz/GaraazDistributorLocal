{"ast":null,"code":"import _ from 'lodash';\nimport excelDateToJs from '../../utils/excelDateToJs';\nimport moment from 'moment';\nexport const requiredFields = ['Branch Code', 'Part Number', 'Days', 'Workshop Code', 'Retail Qty', 'Return Qty', 'Retail Sell', 'Return Sell', 'Month'];\n\nfunction formatDate(date) {\n  let [month, year] = date.split(' ');\n\n  switch (month) {\n    case 'January':\n      month = '01';\n      break;\n\n    case 'February':\n      month = '02';\n      break;\n\n    case 'March':\n      month = '03';\n      break;\n\n    case 'April':\n      month = '04';\n      break;\n\n    case 'May':\n      month = '05';\n      break;\n\n    case 'June':\n      month = '06';\n      break;\n\n    case 'July':\n      month = '07';\n      break;\n\n    case 'August':\n      month = '08';\n      break;\n\n    case 'Sept':\n      month = '09';\n      break;\n\n    case 'October':\n      month = '10';\n      break;\n\n    case 'November':\n      month = '11';\n      break;\n\n    case 'December':\n      month = '12';\n      break;\n\n    default:\n      month = '00';\n  }\n\n  if (month === '00') return 'invalid date';\n  if (`${year}`.length < 4) return 'invalid date';\n  return `${month}-${year}`;\n}\n\nexport const xlTimeToJSTime = xlTime => {\n  if (xlTime) {\n    let basenumber = xlTime * 24;\n    let hour = Math.floor(basenumber).toString();\n\n    if (hour.length < 2) {\n      hour = '0' + hour;\n    }\n\n    var minute = Math.round(basenumber % 1 * 60).toString();\n\n    if (minute.length < 2) {\n      minute = '0' + minute;\n    }\n\n    let Timestring = hour + ':' + minute + ':00';\n    return Timestring;\n  }\n\n  return '';\n};\nexport const sheetValidation = (sheetData, auth, data, acceptedSalesOnboardHeaders) => {\n  try {\n    const missingFields = [];\n    const inValidData = [];\n    const validData = [];\n    sheetData.forEach(row => {\n      const mappedRow = {};\n      let isInvalid = false;\n      acceptedSalesOnboardHeaders.forEach(header => {\n        try {\n          if (requiredFields.includes(header) && row[data[header]] === '') {\n            mappedRow[_.camelCase(header)] = '_blank';\n            isInvalid = true;\n            missingFields.push(data[header]);\n          } else if (header === 'Days') {\n            if (typeof parseInt(row[data[header]]) === 'number') {\n              mappedRow[_.camelCase(header)] = parseInt(row[data[header]]);\n            } else {\n              isInvalid = true;\n              missingFields.push(data[header]);\n              mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\n            }\n          } else if (header === 'Month') {\n            const rawDate = row[data[header]];\n\n            if (rawDate.split(' ').length === 2 && typeof rawDate.split(' ')[0] === 'string' && typeof parseInt(rawDate.split(' ')[1]) === 'number') {\n              const refinedDate = formatDate(rawDate);\n\n              if (refinedDate === 'invalid date') {\n                isInvalid = true;\n                missingFields.push(data[header]);\n                mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\n              } else {\n                mappedRow[_.camelCase(header)] = refinedDate;\n              }\n            } else {\n              const date = moment(excelDateToJs(rawDate)).format('MM-YYYY');\n              mappedRow[_.camelCase(header)] = date;\n            }\n          } else {\n            mappedRow[_.camelCase(header)] = row[data[header]];\n          }\n        } catch (error) {\n          if (requiredFields.includes(header)) {\n            mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\n            isInvalid = true;\n            missingFields.push(header);\n          }\n        }\n      });\n\n      if (isInvalid) {\n        inValidData.push({\n          data: mappedRow,\n          missingFields\n        });\n      } else {\n        validData.push({\n          data: mappedRow,\n          missingFields\n        });\n      }\n      /*  return { data: mappedRow, missingFields }; */\n\n    });\n    return {\n      inValidData,\n      validData\n    };\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/SalesBulk/helper.js"],"names":["_","excelDateToJs","moment","requiredFields","formatDate","date","month","year","split","length","xlTimeToJSTime","xlTime","basenumber","hour","Math","floor","toString","minute","round","Timestring","sheetValidation","sheetData","auth","data","acceptedSalesOnboardHeaders","missingFields","inValidData","validData","forEach","row","mappedRow","isInvalid","header","includes","camelCase","push","parseInt","rawDate","refinedDate","format","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport excelDateToJs from '../../utils/excelDateToJs';\r\nimport moment from 'moment';\r\n\r\nexport const requiredFields = [\r\n  'Branch Code',\r\n  'Part Number',\r\n  'Days',\r\n  'Workshop Code',\r\n  'Retail Qty',\r\n  'Return Qty',\r\n  'Retail Sell',\r\n  'Return Sell',\r\n  'Month',\r\n];\r\n\r\nfunction formatDate(date) {\r\n  let [month, year] = date.split(' ');\r\n\r\n  switch (month) {\r\n    case 'January':\r\n      month = '01';\r\n      break;\r\n    case 'February':\r\n      month = '02';\r\n      break;\r\n    case 'March':\r\n      month = '03';\r\n      break;\r\n    case 'April':\r\n      month = '04';\r\n      break;\r\n    case 'May':\r\n      month = '05';\r\n      break;\r\n    case 'June':\r\n      month = '06';\r\n      break;\r\n    case 'July':\r\n      month = '07';\r\n      break;\r\n    case 'August':\r\n      month = '08';\r\n      break;\r\n    case 'Sept':\r\n      month = '09';\r\n      break;\r\n    case 'October':\r\n      month = '10';\r\n      break;\r\n    case 'November':\r\n      month = '11';\r\n      break;\r\n    case 'December':\r\n      month = '12';\r\n      break;\r\n    default:\r\n      month = '00';\r\n  }\r\n\r\n  if (month === '00') return 'invalid date';\r\n  if (`${year}`.length < 4) return 'invalid date';\r\n\r\n  return `${month}-${year}`;\r\n}\r\n\r\nexport const xlTimeToJSTime = (xlTime) => {\r\n  if (xlTime) {\r\n    let basenumber = xlTime * 24;\r\n    let hour = Math.floor(basenumber).toString();\r\n    if (hour.length < 2) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    var minute = Math.round((basenumber % 1) * 60).toString();\r\n    if (minute.length < 2) {\r\n      minute = '0' + minute;\r\n    }\r\n    let Timestring = hour + ':' + minute + ':00';\r\n    return Timestring;\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nexport const sheetValidation = (\r\n  sheetData,\r\n  auth,\r\n  data,\r\n  acceptedSalesOnboardHeaders,\r\n) => {\r\n  try {\r\n    const missingFields = [];\r\n    const inValidData = [];\r\n    const validData = [];\r\n    sheetData.forEach((row) => {\r\n      const mappedRow = {};\r\n      let isInvalid = false;\r\n\r\n      acceptedSalesOnboardHeaders.forEach((header) => {\r\n        try {\r\n          if (requiredFields.includes(header) && row[data[header]] === '') {\r\n            mappedRow[_.camelCase(header)] = '_blank';\r\n            isInvalid = true;\r\n            missingFields.push(data[header]);\r\n          } else if (header === 'Days') {\r\n            if (typeof parseInt(row[data[header]]) === 'number') {\r\n              mappedRow[_.camelCase(header)] = parseInt(row[data[header]]);\r\n            } else {\r\n              isInvalid = true;\r\n              missingFields.push(data[header]);\r\n              mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\r\n            }\r\n          } else if (header === 'Month') {\r\n\r\n            const rawDate = row[data[header]];\r\n\r\n            if (\r\n              rawDate.split(' ').length === 2 &&\r\n              typeof rawDate.split(' ')[0] === 'string' &&\r\n              typeof parseInt(rawDate.split(' ')[1]) === 'number'\r\n            ) {\r\n              const refinedDate = formatDate(rawDate);\r\n\r\n              if (refinedDate === 'invalid date') {\r\n                isInvalid = true;\r\n                missingFields.push(data[header]);\r\n                mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\r\n              }else{\r\n                mappedRow[_.camelCase(header)] = refinedDate;\r\n              }\r\n            } else {\r\n              const date = moment(excelDateToJs(rawDate)).format('MM-YYYY');\r\n              mappedRow[_.camelCase(header)] = date;\r\n            }\r\n          } else {\r\n            mappedRow[_.camelCase(header)] = row[data[header]];\r\n          }\r\n        } catch (error) {\r\n          if (requiredFields.includes(header)) {\r\n            mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\r\n            isInvalid = true;\r\n            missingFields.push(header);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (isInvalid) {\r\n        inValidData.push({ data: mappedRow, missingFields });\r\n      } else {\r\n        validData.push({ data: mappedRow, missingFields });\r\n      }\r\n      /*  return { data: mappedRow, missingFields }; */\r\n    });\r\n    return { inValidData, validData };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}