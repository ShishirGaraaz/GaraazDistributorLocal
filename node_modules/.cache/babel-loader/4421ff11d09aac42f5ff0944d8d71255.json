{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInPlaceMagnifiedImageCoordinates = exports.getLensModeMagnifiedImageCoordinates = void 0;\n\nconst clamp_1 = require(\"./clamp\");\n\nconst imageRatio_1 = require(\"./imageRatio\");\n\nfunction getMinCoordinates(container, largeImage) {\n  return {\n    x: (largeImage.width - container.width) * -1,\n    y: (largeImage.height - container.height) * -1\n  };\n}\n\nfunction getMaxCoordinates() {\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nfunction clampImageCoordinates(imageCoordinates, minCoordinates, maxCoordinates) {\n  return {\n    x: (0, clamp_1.clamp)(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n    y: (0, clamp_1.clamp)(imageCoordinates.y, minCoordinates.y, maxCoordinates.y)\n  };\n}\n\nfunction getCursorPositionAdjustedForLens(position, lensCursorOffset) {\n  return {\n    x: position.x - lensCursorOffset.x,\n    y: position.y - lensCursorOffset.y\n  };\n}\n\nfunction getLensModeMagnifiedImageCoordinates(containerDimensions, cursorOffset, magnifiedImage, position, image) {\n  const adjustedPosition = getCursorPositionAdjustedForLens(position, cursorOffset);\n  const ratio = (0, imageRatio_1.getSmallToLargeImageRatio)(image, magnifiedImage);\n  const coordinates = {\n    x: Math.round(adjustedPosition.x * ratio.x) * -1,\n    y: Math.round(adjustedPosition.y * ratio.y) * -1\n  };\n  const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n  const maxCoordinates = getMaxCoordinates();\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nexports.getLensModeMagnifiedImageCoordinates = getLensModeMagnifiedImageCoordinates;\n\nfunction getInPlaceMagnifiedImageCoordinates(containerDimensions, magnifiedImage, position) {\n  const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n  const maxCoordinates = getMaxCoordinates();\n  const ratio = (0, imageRatio_1.getContainerToImageRatio)(containerDimensions, magnifiedImage);\n  const coordinates = {\n    x: Math.round(position.x * ratio.x) * -1,\n    y: Math.round(position.y * ratio.y) * -1\n  };\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nexports.getInPlaceMagnifiedImageCoordinates = getInPlaceMagnifiedImageCoordinates;","map":{"version":3,"sources":["../../../src/lib/imageCoordinates.ts"],"names":[],"mappings":"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","sourcesContent":["import { clamp } from 'src/lib/clamp';\nimport {\n    getContainerToImageRatio,\n    getSmallToLargeImageRatio,\n} from 'src/lib/imageRatio';\nimport type {\n    ContainerDimensions, Point,\n} from 'src/types';\n\nfunction getMinCoordinates(\n    container: ContainerDimensions,\n    largeImage: ContainerDimensions,\n): Point {\n    return {\n        x: ((largeImage.width - container.width) * -1),\n        y: ((largeImage.height - container.height) * -1),\n    };\n}\n\nfunction getMaxCoordinates(): Point {\n    return {\n        x: 0,\n        y: 0,\n    };\n}\n\nfunction clampImageCoordinates(\n    imageCoordinates: Point,\n    minCoordinates: Point,\n    maxCoordinates: Point,\n): Point {\n    return {\n        x: clamp(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n        y: clamp(imageCoordinates.y, minCoordinates.y, maxCoordinates.y),\n    };\n}\n\nfunction getCursorPositionAdjustedForLens(\n    position: Point,\n    lensCursorOffset: Point,\n): Point {\n    return {\n        x: position.x - lensCursorOffset.x,\n        y: position.y - lensCursorOffset.y,\n    };\n}\n\nexport function getLensModeMagnifiedImageCoordinates(\n    containerDimensions: ContainerDimensions,\n    cursorOffset: Point,\n    magnifiedImage: ContainerDimensions,\n    position: Point,\n    image: ContainerDimensions,\n): Point {\n    const adjustedPosition = getCursorPositionAdjustedForLens(position, cursorOffset);\n    const ratio = getSmallToLargeImageRatio(image, magnifiedImage);\n    const coordinates = {\n        x: (Math.round(adjustedPosition.x * ratio.x) * -1),\n        y: (Math.round(adjustedPosition.y * ratio.y) * -1),\n    };\n    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n    const maxCoordinates = getMaxCoordinates();\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nexport function getInPlaceMagnifiedImageCoordinates(\n    containerDimensions: ContainerDimensions,\n    magnifiedImage: ContainerDimensions,\n    position: Point,\n): Point {\n    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n    const maxCoordinates = getMaxCoordinates();\n    const ratio = getContainerToImageRatio(containerDimensions, magnifiedImage);\n    const coordinates = {\n        x: (Math.round(position.x * ratio.x) * -1),\n        y: (Math.round(position.y * ratio.y) * -1),\n    };\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}