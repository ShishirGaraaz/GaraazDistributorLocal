{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\OrderDetails\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport Layout from '../Layout';\nimport { Button, Box, NumberInput, NumberInputField } from '@chakra-ui/react';\nimport DynamicTable from '../../components/DynamicTable';\nimport { OrderSummary } from './OrderSummary';\nimport { useRouteMatch, Route, useHistory, Switch, useParams } from 'react-router-dom';\nimport { OrderDetailInfo } from '../../components/OrderComponents/OrderDetailInfo';\nimport { OrderOptions } from '../../components/OrderComponents/OrderOptions';\nimport { PartsUnavailable } from './PartsUnavailable';\nimport messages from './messages';\nimport { getOrderDetails, setOrderDetails, getQuantityAvailable, updateOrders } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BackButton } from '../../components/BackButton';\nimport getPartIds from '../../utils/getPartIds';\nimport withToast from '../../HOCs/withToast';\nimport totalItemFromArray from '../../utils/getTotalFromArray';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrderDetails = _ref => {\n  _s();\n\n  let {\n    notification\n  } = _ref;\n  const intl = useIntl();\n  const auth = useSelector(state => state.auth);\n  const {\n    orderDetails\n  } = useSelector(state => state.orderDetails);\n  const dispatcher = useDispatch();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\n  const [totals, setTotals] = useState({\n    totalOrderedQuantity: 0,\n    totalQuantityToGive: 0,\n    totalAmount: 0\n  });\n  const [isLoading, setLoading] = useState(false);\n  const [deliveryValue, setDeliveryValue] = useState(intl.formatMessage(messages.selfPickup));\n  const [paymentValue, setPaymentValue] = useState(intl.formatMessage(messages.cash));\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    var _row$price, _row;\n\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    let row = [...orderDetails.items].find((data, indx) => indx === rowIndex);\n\n    if (parseInt(value) > parseInt(row.quantity)) {\n      notification({\n        title: intl.formatMessage(messages.outOfRange),\n        description: intl.formatMessage(messages.outOfRangeDescription),\n        status: 'error'\n      });\n      return;\n    }\n\n    let totalAmount = parseInt(value) * parseInt((_row$price = (_row = row) === null || _row === void 0 ? void 0 : _row.price) !== null && _row$price !== void 0 ? _row$price : 0);\n    totalAmount = isNaN(totalAmount) ? 0 : totalAmount;\n    row = { ...row,\n      totalAmount,\n      [columnId]: value\n    };\n    const prevTableData = [...orderDetails.items];\n    prevTableData.splice(rowIndex, 1, row);\n    let newOrderDetails = { ...orderDetails\n    };\n    newOrderDetails.items = prevTableData;\n    dispatcher(setOrderDetails(newOrderDetails));\n  };\n\n  const getStockQuantity = async (parts, branchId, orderDetails) => {\n    try {\n      const response = await getQuantityAvailable({\n        auth,\n        params: {\n          parts,\n          branchId\n        }\n      });\n      const data = [...orderDetails.items].map(item => {\n        var _response$data$item$p, _response$data$item$p2;\n\n        return { ...item,\n          availableQuantity: (_response$data$item$p = response.data[item.partId].quantity) !== null && _response$data$item$p !== void 0 ? _response$data$item$p : 0,\n          price: (_response$data$item$p2 = response.data[item.partId].price) !== null && _response$data$item$p2 !== void 0 ? _response$data$item$p2 : item.price\n        };\n      });\n      dispatcher(setOrderDetails({ ...orderDetails,\n        items: data\n      }));\n    } catch (error) {\n      notification({\n        description: intl.formatMessage(messages.errorOccurred),\n        status: 'error'\n      });\n    }\n  };\n\n  const fetchOrderDetails = async () => {\n    try {\n      const data = await getOrderDetails(auth, id);\n\n      if (data.items.length > 0) {\n        getStockQuantity(getPartIds([...data.items]), data.branchId, data);\n      } else {\n        dispatcher(setOrderDetails(data));\n      }\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: error.response ? error.response.data.message : intl.formatMessage(messages.errorOccurred)\n      });\n    }\n  };\n\n  useEffect(() => {\n    setSkipPageReset(false);\n    const totalOrderedQuantity = totalItemFromArray(orderDetails.items, 'quantity');\n    const totalQuantityToGive = totalItemFromArray(orderDetails.items, 'quantityToGive');\n    const totalAmount = totalItemFromArray(orderDetails.items, 'totalAmount');\n    setTotals({\n      totalOrderedQuantity,\n      totalQuantityToGive,\n      totalAmount\n    });\n  }, [orderDetails]);\n  useEffect(() => {\n    fetchOrderDetails();\n  }, []);\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.SNo),\n    accessor: 'SNo',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.partNumber),\n    accessor: row => row.part.partNumber\n  }, {\n    Header: intl.formatMessage(messages.partDescription),\n    accessor: row => row.part.description\n  }, {\n    Header: intl.formatMessage(messages.quantityOrdered),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.availableQuantity),\n    accessor: 'availableQuantity'\n  }, {\n    Header: intl.formatMessage(messages.quantityToGive),\n    accessor: 'quantityToGive',\n    Cell: EditableCell\n  }, {\n    Header: intl.formatMessage(messages.pricePerPiece),\n    accessor: 'price',\n    Cell: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.totalAmount),\n    accessor: 'totalAmount',\n    Cell: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return getMoneyFormat(value);\n    }\n  }], []);\n  const deliverOptions = {\n    title: intl.formatMessage(messages.deliveryOptions),\n    options: [intl.formatMessage(messages.selfPickup), intl.formatMessage(messages.arrangeDelivery)]\n  };\n  const paymentOptions = {\n    title: intl.formatMessage(messages.paymentOptions),\n    options: [intl.formatMessage(messages.cash), intl.formatMessage(messages.onlinePayment), intl.formatMessage(messages.collectLater)]\n  };\n\n  const handleSaveAndContinue = async () => {\n    try {\n      //setLoading(true);\n      const newItems = [...orderDetails.items].map(item => {\n        var _item$quantityToGive;\n\n        return {\n          partId: item.partId,\n          quantity: parseInt((_item$quantityToGive = item.quantityToGive) !== null && _item$quantityToGive !== void 0 ? _item$quantityToGive : 0),\n          price: item.price\n        };\n      });\n      const updatedParts = {\n        paymentOption: paymentValue,\n        deliveryOption: deliveryValue,\n        items: newItems,\n        status: orderDetails.status,\n        comment: ''\n      };\n      const unavailablePartsList = [...orderDetails.items].map(item => {\n        var _item$quantityToGive2;\n\n        return { ...item,\n          pendingQuantity: item.quantity - ((_item$quantityToGive2 = item.quantityToGive) !== null && _item$quantityToGive2 !== void 0 ? _item$quantityToGive2 : 0)\n        };\n      }).filter(item => item.pendingQuantity !== 0);\n      localStorage.partsUnavailable = JSON.stringify(unavailablePartsList);\n\n      if (newItems.length > 0) {\n        await updateOrders({\n          auth,\n          orderId: id,\n          data: updatedParts\n        });\n      }\n\n      localStorage.orderSummary = JSON.stringify(totals);\n      const partList = [...orderDetails.items].filter(item => item.quantityToGive);\n      localStorage.partList = JSON.stringify(partList);\n      setLoading(false);\n      notification({\n        title: intl.formatMessage(messages.orderUpdated),\n        description: intl.formatMessage(messages.orderUpdatedDescription),\n        status: 'success'\n      });\n      history.push(`${url}/order-summary`);\n    } catch (error) {\n      notification({\n        description: intl.formatMessage(messages.errorOccurred),\n        status: 'error'\n      });\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: [/*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(OrderDetailInfo, {\n        orderDetails: orderDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(OrderOptions, {\n        onDeliveryOptionChange: setDeliveryValue,\n        onPaymentOptionChange: setPaymentValue,\n        deliveryValue: deliveryValue,\n        paymentValue: paymentValue,\n        deliverOptions: deliverOptions,\n        paymentOptions: paymentOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n        columns: columns,\n        data: orderDetails.items,\n        fetchData: data => 'fetch order details here',\n        hidePagination: true,\n        updateMyData: updateMyData,\n        skipPageReset: skipPageReset,\n        totals: totals\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSaveAndContinue,\n        variant: \"normal\",\n        my: 4,\n        marginLeft: \"auto\",\n        isLoading: isLoading,\n        children: intl.formatMessage(messages.saveContinue)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/order-summary`,\n      children: /*#__PURE__*/_jsxDEV(OrderSummary, {\n        goToUnavilable: () => history.push(`${url}/parts-unavailable`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/parts-unavailable`,\n      children: /*#__PURE__*/_jsxDEV(PartsUnavailable, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrderDetails, \"szDUB/AnMV9hv7t9urYK/LQXPRQ=\", false, function () {\n  return [useIntl, useSelector, useSelector, useDispatch, useParams, useHistory, useRouteMatch];\n});\n\n_c = OrderDetails;\nconst EditableCell = withToast(_c2 = _s2(_ref4 => {\n  _s2();\n\n  let {\n    value: initialValue,\n    row: {\n      index,\n      original\n    },\n    column: {\n      id\n    },\n    updateMyData,\n    notification // This is a custom function that we supplied to our table instance\n\n  } = _ref4;\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n  const intl = useIntl();\n\n  const onChange = value => {\n    if (parseInt(value) > parseInt(original.quantity)) {\n      notification({\n        title: intl.formatMessage(messages.outOfRange),\n        description: intl.formatMessage(messages.outOfRangeDescription),\n        status: 'error'\n      });\n      setValue('');\n      updateMyData(index, id, '');\n      return;\n    } else {\n      setValue(value);\n      updateMyData(index, id, value);\n    }\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(NumberInput, {\n    value: value,\n    onChange: onChange,\n    width: \"10vw\",\n    margin: \"0 auto\",\n    children: /*#__PURE__*/_jsxDEV(NumberInputField, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 7\n  }, this);\n}, \"BupE2gOTCgF4ESoxAzG4bRp2hCY=\", false, function () {\n  return [useIntl];\n}));\n_c3 = EditableCell;\nexport default _c4 = withToast(OrderDetails);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"OrderDetails\");\n$RefreshReg$(_c2, \"EditableCell$withToast\");\n$RefreshReg$(_c3, \"EditableCell\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/OrderDetails/index.js"],"names":["React","useState","useMemo","useEffect","useIntl","Layout","Button","Box","NumberInput","NumberInputField","DynamicTable","OrderSummary","useRouteMatch","Route","useHistory","Switch","useParams","OrderDetailInfo","OrderOptions","PartsUnavailable","messages","getOrderDetails","setOrderDetails","getQuantityAvailable","updateOrders","useSelector","useDispatch","BackButton","getPartIds","withToast","totalItemFromArray","getMoneyFormat","OrderDetails","notification","intl","auth","state","orderDetails","dispatcher","id","history","url","path","skipPageReset","setSkipPageReset","totals","setTotals","totalOrderedQuantity","totalQuantityToGive","totalAmount","isLoading","setLoading","deliveryValue","setDeliveryValue","formatMessage","selfPickup","paymentValue","setPaymentValue","cash","updateMyData","rowIndex","columnId","value","row","items","find","data","indx","parseInt","quantity","title","outOfRange","description","outOfRangeDescription","status","price","isNaN","prevTableData","splice","newOrderDetails","getStockQuantity","parts","branchId","response","params","map","item","availableQuantity","partId","error","errorOccurred","fetchOrderDetails","length","message","columns","Header","SNo","accessor","Cell","allData","index","partNumber","part","partDescription","quantityOrdered","quantityToGive","EditableCell","pricePerPiece","deliverOptions","deliveryOptions","options","arrangeDelivery","paymentOptions","onlinePayment","collectLater","handleSaveAndContinue","newItems","updatedParts","paymentOption","deliveryOption","comment","unavailablePartsList","pendingQuantity","filter","localStorage","partsUnavailable","JSON","stringify","orderId","orderSummary","partList","orderUpdated","orderUpdatedDescription","push","saveContinue","initialValue","original","column","setValue","onChange"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,WAAtB,EAAmCC,gBAAnC,QACQ,kBADR;AAGA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACEC,aADF,EAEEC,KAFF,EAGEC,UAHF,EAIEC,MAJF,EAKEC,SALF,QAMO,kBANP;AAOA,SAASC,eAAT,QAAgC,kDAAhC;AACA,SAASC,YAAT,QAA6B,+CAA7B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,oBAHF,EAIEC,YAJF,QAKO,WALP;AAMA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;;AAEA,MAAMC,YAAY,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AACzC,QAAMC,IAAI,GAAG9B,OAAO,EAApB;AACA,QAAM+B,IAAI,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAmBZ,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAApC;AACA,QAAMC,UAAU,GAAGZ,WAAW,EAA9B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAASvB,SAAS,EAAxB;AACA,QAAMwB,OAAO,GAAG1B,UAAU,EAA1B;AACA,QAAM;AAAE2B,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgB9B,aAAa,EAAnC;AACA,QAAM,CAAC+B,aAAD,EAAgBC,gBAAhB,IAAoC5C,KAAK,CAACC,QAAN,CAAe,KAAf,CAA1C;AACA,QAAM,CAAC4C,MAAD,EAASC,SAAT,IAAsB7C,QAAQ,CAAC;AACnC8C,IAAAA,oBAAoB,EAAE,CADa;AAEnCC,IAAAA,mBAAmB,EAAE,CAFc;AAGnCC,IAAAA,WAAW,EAAE;AAHsB,GAAD,CAApC;AAKA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BlD,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACmD,aAAD,EAAgBC,gBAAhB,IAAoCpD,QAAQ,CAChDiC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmC,UAA5B,CADgD,CAAlD;AAGA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCxD,QAAQ,CAC9CiC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACsC,IAA5B,CAD8C,CAAhD;;AAIA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAAA;;AAClD;AACAlB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,QAAImB,GAAG,GAAG,CAAC,GAAG1B,YAAY,CAAC2B,KAAjB,EAAwBC,IAAxB,CAA6B,CAACC,IAAD,EAAOC,IAAP,KAAgBA,IAAI,KAAKP,QAAtD,CAAV;;AACA,QAAIQ,QAAQ,CAACN,KAAD,CAAR,GAAkBM,QAAQ,CAACL,GAAG,CAACM,QAAL,CAA9B,EAA8C;AAC5CpC,MAAAA,YAAY,CAAC;AACXqC,QAAAA,KAAK,EAAEpC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmD,UAA5B,CADI;AAEXC,QAAAA,WAAW,EAAEtC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACqD,qBAA5B,CAFF;AAGXC,QAAAA,MAAM,EAAE;AAHG,OAAD,CAAZ;AAKA;AACD;;AACD,QAAIzB,WAAW,GAAGmB,QAAQ,CAACN,KAAD,CAAR,GAAkBM,QAAQ,uBAACL,GAAD,yCAAC,KAAKY,KAAN,mDAAe,CAAf,CAA5C;AACA1B,IAAAA,WAAW,GAAG2B,KAAK,CAAC3B,WAAD,CAAL,GAAqB,CAArB,GAAyBA,WAAvC;AACAc,IAAAA,GAAG,GAAG,EACJ,GAAGA,GADC;AAEJd,MAAAA,WAFI;AAGJ,OAACY,QAAD,GAAYC;AAHR,KAAN;AAKA,UAAMe,aAAa,GAAG,CAAC,GAAGxC,YAAY,CAAC2B,KAAjB,CAAtB;AACAa,IAAAA,aAAa,CAACC,MAAd,CAAqBlB,QAArB,EAA+B,CAA/B,EAAkCG,GAAlC;AACA,QAAIgB,eAAe,GAAG,EAAE,GAAG1C;AAAL,KAAtB;AACA0C,IAAAA,eAAe,CAACf,KAAhB,GAAwBa,aAAxB;AACAvC,IAAAA,UAAU,CAAChB,eAAe,CAACyD,eAAD,CAAhB,CAAV;AACD,GAxBD;;AA0BA,QAAMC,gBAAgB,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwB7C,YAAxB,KAAyC;AAChE,QAAI;AACF,YAAM8C,QAAQ,GAAG,MAAM5D,oBAAoB,CAAC;AAC1CY,QAAAA,IAD0C;AAE1CiD,QAAAA,MAAM,EAAE;AAAEH,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAFkC,OAAD,CAA3C;AAKA,YAAMhB,IAAI,GAAG,CAAC,GAAG7B,YAAY,CAAC2B,KAAjB,EAAwBqB,GAAxB,CAA6BC,IAAD;AAAA;;AAAA,eAAW,EAClD,GAAGA,IAD+C;AAElDC,UAAAA,iBAAiB,2BAAEJ,QAAQ,CAACjB,IAAT,CAAcoB,IAAI,CAACE,MAAnB,EAA2BnB,QAA7B,yEAAyC,CAFR;AAGlDM,UAAAA,KAAK,4BAAEQ,QAAQ,CAACjB,IAAT,CAAcoB,IAAI,CAACE,MAAnB,EAA2Bb,KAA7B,2EAAsCW,IAAI,CAACX;AAHE,SAAX;AAAA,OAA5B,CAAb;AAMArC,MAAAA,UAAU,CAAChB,eAAe,CAAC,EAAE,GAAGe,YAAL;AAAmB2B,QAAAA,KAAK,EAAEE;AAA1B,OAAD,CAAhB,CAAV;AACD,KAbD,CAaE,OAAOuB,KAAP,EAAc;AACdxD,MAAAA,YAAY,CAAC;AACXuC,QAAAA,WAAW,EAAEtC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACsE,aAA5B,CADF;AAEXhB,QAAAA,MAAM,EAAE;AAFG,OAAD,CAAZ;AAID;AACF,GApBD;;AAsBA,QAAMiB,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMzB,IAAI,GAAG,MAAM7C,eAAe,CAACc,IAAD,EAAOI,EAAP,CAAlC;;AACA,UAAG2B,IAAI,CAACF,KAAL,CAAW4B,MAAX,GAAoB,CAAvB,EAAyB;AACvBZ,QAAAA,gBAAgB,CAACpD,UAAU,CAAC,CAAC,GAAGsC,IAAI,CAACF,KAAT,CAAD,CAAX,EAA8BE,IAAI,CAACgB,QAAnC,EAA6ChB,IAA7C,CAAhB;AACD,OAFD,MAEM;AACJ5B,QAAAA,UAAU,CAAChB,eAAe,CAAC4C,IAAD,CAAhB,CAAV;AACD;AACF,KAPD,CAOE,OAAOuB,KAAP,EAAc;AACdxD,MAAAA,YAAY,CAAC;AACXyC,QAAAA,MAAM,EAAE,OADG;AAEXF,QAAAA,WAAW,EAAEiB,KAAK,CAACN,QAAN,GACTM,KAAK,CAACN,QAAN,CAAejB,IAAf,CAAoB2B,OADX,GAET3D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACsE,aAA5B;AAJO,OAAD,CAAZ;AAMD;AACF,GAhBD;;AAkBAvF,EAAAA,SAAS,CAAC,MAAM;AACdyC,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAEA,UAAMG,oBAAoB,GAAGjB,kBAAkB,CAC7CO,YAAY,CAAC2B,KADgC,EAE7C,UAF6C,CAA/C;AAIA,UAAMhB,mBAAmB,GAAGlB,kBAAkB,CAC5CO,YAAY,CAAC2B,KAD+B,EAE5C,gBAF4C,CAA9C;AAIA,UAAMf,WAAW,GAAGnB,kBAAkB,CAACO,YAAY,CAAC2B,KAAd,EAAqB,aAArB,CAAtC;AAEAlB,IAAAA,SAAS,CAAC;AAAEC,MAAAA,oBAAF;AAAwBC,MAAAA,mBAAxB;AAA6CC,MAAAA;AAA7C,KAAD,CAAT;AACD,GAdQ,EAcN,CAACZ,YAAD,CAdM,CAAT;AAgBAlC,EAAAA,SAAS,CAAC,MAAM;AACdwF,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMG,OAAO,GAAG5F,OAAO,CACrB,MAAM,CACJ;AACE6F,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC4E,GAA5B,CADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,IAAI,EAAGC,OAAD,IAAa;AAAA;;AACjB,0BAAO,QAAC,GAAD;AAAA,kBAAM,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,4BAAAA,OAAO,CAAEpC,GAAT,8DAAcqC,KAAd,IAAsB;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AALH,GADI,EAQJ;AACEL,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACiF,UAA5B,CADV;AAEEJ,IAAAA,QAAQ,EAAGlC,GAAD,IAASA,GAAG,CAACuC,IAAJ,CAASD;AAF9B,GARI,EAYJ;AACEN,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmF,eAA5B,CADV;AAEEN,IAAAA,QAAQ,EAAGlC,GAAD,IAASA,GAAG,CAACuC,IAAJ,CAAS9B;AAF9B,GAZI,EAgBJ;AACEuB,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACoF,eAA5B,CADV;AAEEP,IAAAA,QAAQ,EAAE;AAFZ,GAhBI,EAoBJ;AACEF,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmE,iBAA5B,CADV;AAEEU,IAAAA,QAAQ,EAAE;AAFZ,GApBI,EAwBJ;AACEF,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACqF,cAA5B,CADV;AAEER,IAAAA,QAAQ,EAAE,gBAFZ;AAGEC,IAAAA,IAAI,EAAEQ;AAHR,GAxBI,EA6BJ;AACEX,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACuF,aAA5B,CADV;AAEEV,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAACpC,QAAAA;AAAD,OAAD;AAAA,aAAa/B,cAAc,CAAC+B,KAAD,CAA3B;AAAA;AAHR,GA7BI,EAkCJ;AACEiC,IAAAA,MAAM,EAAE7D,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC6B,WAA5B,CADV;AAEEgD,IAAAA,QAAQ,EAAE,aAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAACpC,QAAAA;AAAD,OAAD;AAAA,aAAa/B,cAAc,CAAC+B,KAAD,CAA3B;AAAA;AAHR,GAlCI,CADe,EAyCrB,EAzCqB,CAAvB;AA6CA,QAAM8C,cAAc,GAAG;AACrBtC,IAAAA,KAAK,EAAEpC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACyF,eAA5B,CADc;AAErBC,IAAAA,OAAO,EAAE,CACP5E,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmC,UAA5B,CADO,EAEPrB,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC2F,eAA5B,CAFO;AAFY,GAAvB;AAQA,QAAMC,cAAc,GAAG;AACrB1C,IAAAA,KAAK,EAAEpC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC4F,cAA5B,CADc;AAErBF,IAAAA,OAAO,EAAE,CACP5E,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACsC,IAA5B,CADO,EAEPxB,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC6F,aAA5B,CAFO,EAGP/E,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC8F,YAA5B,CAHO;AAFY,GAAvB;;AASA,QAAMC,qBAAqB,GAAG,YAAY;AACxC,QAAI;AACF;AACA,YAAMC,QAAQ,GAAG,CAAC,GAAG/E,YAAY,CAAC2B,KAAjB,EAChBqB,GADgB,CACXC,IAAD,IAAU;AAAA;;AACb,eAAO;AACLE,UAAAA,MAAM,EAAEF,IAAI,CAACE,MADR;AAELnB,UAAAA,QAAQ,EAAED,QAAQ,yBAACkB,IAAI,CAACmB,cAAN,uEAAwB,CAAxB,CAFb;AAGL9B,UAAAA,KAAK,EAAEW,IAAI,CAACX;AAHP,SAAP;AAKD,OAPgB,CAAjB;AAUA,YAAM0C,YAAY,GAAG;AACnBC,QAAAA,aAAa,EAAE9D,YADI;AAEnB+D,QAAAA,cAAc,EAAEnE,aAFG;AAGnBY,QAAAA,KAAK,EAAEoD,QAHY;AAInB1C,QAAAA,MAAM,EAAErC,YAAY,CAACqC,MAJF;AAKnB8C,QAAAA,OAAO,EAAE;AALU,OAArB;AAUA,YAAMC,oBAAoB,GAAG,CAAC,GAAGpF,YAAY,CAAC2B,KAAjB,EAC1BqB,GAD0B,CACrBC,IAAD,IAAU;AAAA;;AACb,eAAO,EACL,GAAGA,IADE;AAELoC,UAAAA,eAAe,EAAEpC,IAAI,CAACjB,QAAL,6BAAiBiB,IAAI,CAACmB,cAAtB,yEAAwC,CAAxC;AAFZ,SAAP;AAID,OAN0B,EAO1BkB,MAP0B,CAOlBrC,IAAD,IAAUA,IAAI,CAACoC,eAAL,KAAyB,CAPhB,CAA7B;AASAE,MAAAA,YAAY,CAACC,gBAAb,GAAgCC,IAAI,CAACC,SAAL,CAAeN,oBAAf,CAAhC;;AAGA,UAAGL,QAAQ,CAACxB,MAAT,GAAkB,CAArB,EAAwB;AACtB,cAAMpE,YAAY,CAAC;AACjBW,UAAAA,IADiB;AAEjB6F,UAAAA,OAAO,EAAEzF,EAFQ;AAGjB2B,UAAAA,IAAI,EAAEmD;AAHW,SAAD,CAAlB;AAKD;;AAGDO,MAAAA,YAAY,CAACK,YAAb,GAA4BH,IAAI,CAACC,SAAL,CAAelF,MAAf,CAA5B;AAEA,YAAMqF,QAAQ,GAAG,CAAC,GAAG7F,YAAY,CAAC2B,KAAjB,EAAwB2D,MAAxB,CAA+BrC,IAAI,IAAIA,IAAI,CAACmB,cAA5C,CAAjB;AACAmB,MAAAA,YAAY,CAACM,QAAb,GAAwBJ,IAAI,CAACC,SAAL,CAAeG,QAAf,CAAxB;AACA/E,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEAlB,MAAAA,YAAY,CAAC;AACXqC,QAAAA,KAAK,EAAEpC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAAC+G,YAA5B,CADI;AAEX3D,QAAAA,WAAW,EAAEtC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACgH,uBAA5B,CAFF;AAGX1D,QAAAA,MAAM,EAAE;AAHG,OAAD,CAAZ;AAKAlC,MAAAA,OAAO,CAAC6F,IAAR,CAAc,GAAE5F,GAAI,gBAApB;AACD,KAvDD,CAuDE,OAAOgD,KAAP,EAAc;AACdxD,MAAAA,YAAY,CAAC;AACXuC,QAAAA,WAAW,EAAEtC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACsE,aAA5B,CADF;AAEXhB,QAAAA,MAAM,EAAE;AAFG,OAAD,CAAZ;AAIAvB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA/DD;;AAiEA,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAET,IAAnB;AAAA,8BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,eAAD;AAAiB,QAAA,YAAY,EAAEL;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,YAAD;AACE,QAAA,sBAAsB,EAAEgB,gBAD1B;AAEE,QAAA,qBAAqB,EAAEI,eAFzB;AAGE,QAAA,aAAa,EAAEL,aAHjB;AAIE,QAAA,YAAY,EAAEI,YAJhB;AAKE,QAAA,cAAc,EAAEoD,cALlB;AAME,QAAA,cAAc,EAAEI;AANlB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAWI,QAAC,YAAD;AACE,QAAA,OAAO,EAAElB,OADX;AAEE,QAAA,IAAI,EAAEzD,YAAY,CAAC2B,KAFrB;AAGE,QAAA,SAAS,EAAGE,IAAD,IAAU,0BAHvB;AAIE,QAAA,cAAc,EAAE,IAJlB;AAKE,QAAA,YAAY,EAAEP,YALhB;AAME,QAAA,aAAa,EAAEhB,aANjB;AAOE,QAAA,MAAM,EAAEE;AAPV;AAAA;AAAA;AAAA;AAAA,cAXJ,eAoBI,QAAC,MAAD;AACE,QAAA,OAAO,EAAEsE,qBADX;AAEE,QAAA,OAAO,EAAC,QAFV;AAGE,QAAA,EAAE,EAAE,CAHN;AAIE,QAAA,UAAU,EAAC,MAJb;AAKE,QAAA,SAAS,EAAEjE,SALb;AAAA,kBAOGhB,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACkH,YAA5B;AAPH;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA+BE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAE5F,IAAK,gBAArB;AAAA,6BACE,QAAC,YAAD;AACE,QAAA,cAAc,EAAE,MAAMF,OAAO,CAAC6F,IAAR,CAAc,GAAE5F,GAAI,oBAApB;AADxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA/BF,eAoCE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEC,IAAK,oBAArB;AAAA,6BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CArRD;;GAAMV,Y;UACS5B,O,EACAqB,W,EACYA,W,EACNC,W,EACJV,S,EACCF,U,EACMF,a;;;KAPlBoB,Y;AAuRN,MAAM0E,YAAY,GAAG7E,SAAS,WAC5B,SAMM;AAAA;;AAAA,MANL;AACCiC,IAAAA,KAAK,EAAEyE,YADR;AAECxE,IAAAA,GAAG,EAAE;AAAEqC,MAAAA,KAAF;AAASoC,MAAAA;AAAT,KAFN;AAGCC,IAAAA,MAAM,EAAE;AAAElG,MAAAA;AAAF,KAHT;AAICoB,IAAAA,YAJD;AAKC1B,IAAAA,YALD,CAKe;;AALf,GAMK;AACJ;AACA,QAAM,CAAC6B,KAAD,EAAQ4E,QAAR,IAAoB1I,KAAK,CAACC,QAAN,CAAesI,YAAf,CAA1B;AACA,QAAMrG,IAAI,GAAG9B,OAAO,EAApB;;AAEA,QAAMuI,QAAQ,GAAI7E,KAAD,IAAW;AAC1B,QAAIM,QAAQ,CAACN,KAAD,CAAR,GAAkBM,QAAQ,CAACoE,QAAQ,CAACnE,QAAV,CAA9B,EAAmD;AACjDpC,MAAAA,YAAY,CAAC;AACXqC,QAAAA,KAAK,EAAEpC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACmD,UAA5B,CADI;AAEXC,QAAAA,WAAW,EAAEtC,IAAI,CAACoB,aAAL,CAAmBlC,QAAQ,CAACqD,qBAA5B,CAFF;AAGXC,QAAAA,MAAM,EAAE;AAHG,OAAD,CAAZ;AAKAgE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACA/E,MAAAA,YAAY,CAACyC,KAAD,EAAQ7D,EAAR,EAAY,EAAZ,CAAZ;AACA;AACD,KATD,MASO;AACLmG,MAAAA,QAAQ,CAAC5E,KAAD,CAAR;AACAH,MAAAA,YAAY,CAACyC,KAAD,EAAQ7D,EAAR,EAAYuB,KAAZ,CAAZ;AACD;AACF,GAdD,CALI,CAqBJ;;;AACA9D,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpBuI,IAAAA,QAAQ,CAACH,YAAD,CAAR;AACD,GAFD,EAEG,CAACA,YAAD,CAFH;AAIA,sBACE,QAAC,WAAD;AACE,IAAA,KAAK,EAAEzE,KADT;AAEE,IAAA,QAAQ,EAAE6E,QAFZ;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,MAAM,EAAC,QAJT;AAAA,2BAME,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3C2B;AAAA,UAUbvI,OAVa;AAAA,GAA9B;MAAMsG,Y;AA8CN,qBAAe7E,SAAS,CAACG,YAAD,CAAxB","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport Layout from '../Layout';\r\nimport { Button, Box, NumberInput, NumberInputField,\r\n } from '@chakra-ui/react';\r\n\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport { OrderSummary } from './OrderSummary';\r\nimport {\r\n  useRouteMatch,\r\n  Route,\r\n  useHistory,\r\n  Switch,\r\n  useParams,\r\n} from 'react-router-dom';\r\nimport { OrderDetailInfo } from '../../components/OrderComponents/OrderDetailInfo';\r\nimport { OrderOptions } from '../../components/OrderComponents/OrderOptions';\r\nimport { PartsUnavailable } from './PartsUnavailable';\r\nimport messages from './messages';\r\nimport {\r\n  getOrderDetails,\r\n  setOrderDetails,\r\n  getQuantityAvailable,\r\n  updateOrders,\r\n} from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { BackButton } from '../../components/BackButton';\r\nimport getPartIds from '../../utils/getPartIds';\r\nimport withToast from '../../HOCs/withToast';\r\nimport totalItemFromArray from '../../utils/getTotalFromArray';\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\n\r\nconst OrderDetails = ({ notification }) => {\r\n  const intl = useIntl();\r\n  const auth = useSelector((state) => state.auth);\r\n  const { orderDetails } = useSelector((state) => state.orderDetails);\r\n  const dispatcher = useDispatch();\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const { url, path } = useRouteMatch();\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n  const [totals, setTotals] = useState({\r\n    totalOrderedQuantity: 0,\r\n    totalQuantityToGive: 0,\r\n    totalAmount: 0,\r\n  });\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [deliveryValue, setDeliveryValue] = useState(\r\n    intl.formatMessage(messages.selfPickup),\r\n  );\r\n  const [paymentValue, setPaymentValue] = useState(\r\n    intl.formatMessage(messages.cash),\r\n  );\r\n\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    let row = [...orderDetails.items].find((data, indx) => indx === rowIndex);\r\n    if (parseInt(value) > parseInt(row.quantity)) {\r\n      notification({\r\n        title: intl.formatMessage(messages.outOfRange),\r\n        description: intl.formatMessage(messages.outOfRangeDescription),\r\n        status: 'error',\r\n      });\r\n      return;\r\n    }\r\n    let totalAmount = parseInt(value) * parseInt(row?.price ?? 0);\r\n    totalAmount = isNaN(totalAmount) ? 0 : totalAmount;\r\n    row = {\r\n      ...row,\r\n      totalAmount,\r\n      [columnId]: value,\r\n    };\r\n    const prevTableData = [...orderDetails.items];\r\n    prevTableData.splice(rowIndex, 1, row);\r\n    let newOrderDetails = { ...orderDetails };\r\n    newOrderDetails.items = prevTableData;\r\n    dispatcher(setOrderDetails(newOrderDetails));\r\n  };\r\n\r\n  const getStockQuantity = async (parts, branchId, orderDetails) => {\r\n    try {\r\n      const response = await getQuantityAvailable({\r\n        auth,\r\n        params: { parts, branchId },\r\n      });\r\n\r\n      const data = [...orderDetails.items].map((item) => ({\r\n        ...item,\r\n        availableQuantity: response.data[item.partId].quantity ?? 0,\r\n        price: response.data[item.partId].price ?? item.price,\r\n      }));\r\n\r\n      dispatcher(setOrderDetails({ ...orderDetails, items: data }));\r\n    } catch (error) {\r\n      notification({\r\n        description: intl.formatMessage(messages.errorOccurred),\r\n        status: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchOrderDetails = async () => {\r\n    try {\r\n      const data = await getOrderDetails(auth, id);\r\n      if(data.items.length > 0){\r\n        getStockQuantity(getPartIds([...data.items]), data.branchId, data);\r\n      }else {\r\n        dispatcher(setOrderDetails(data));\r\n      }\r\n    } catch (error) {\r\n      notification({\r\n        status: 'error',\r\n        description: error.response\r\n          ? error.response.data.message\r\n          : intl.formatMessage(messages.errorOccurred),\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSkipPageReset(false);\r\n\r\n    const totalOrderedQuantity = totalItemFromArray(\r\n      orderDetails.items,\r\n      'quantity',\r\n    );\r\n    const totalQuantityToGive = totalItemFromArray(\r\n      orderDetails.items,\r\n      'quantityToGive',\r\n    );\r\n    const totalAmount = totalItemFromArray(orderDetails.items, 'totalAmount');\r\n\r\n    setTotals({ totalOrderedQuantity, totalQuantityToGive, totalAmount });\r\n  }, [orderDetails]);\r\n\r\n  useEffect(() => {\r\n    fetchOrderDetails();\r\n  }, []);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.SNo),\r\n        accessor: 'SNo',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partNumber),\r\n        accessor: (row) => row.part.partNumber,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partDescription),\r\n        accessor: (row) => row.part.description,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.quantityOrdered),\r\n        accessor: 'quantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.availableQuantity),\r\n        accessor: 'availableQuantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.quantityToGive),\r\n        accessor: 'quantityToGive',\r\n        Cell: EditableCell,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.pricePerPiece),\r\n        accessor: 'price',\r\n        Cell: ({value}) => getMoneyFormat(value)\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.totalAmount),\r\n        accessor: 'totalAmount',\r\n        Cell: ({value}) => getMoneyFormat(value)\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n \r\n\r\n  const deliverOptions = {\r\n    title: intl.formatMessage(messages.deliveryOptions),\r\n    options: [\r\n      intl.formatMessage(messages.selfPickup),\r\n      intl.formatMessage(messages.arrangeDelivery),\r\n    ],\r\n  };\r\n\r\n  const paymentOptions = {\r\n    title: intl.formatMessage(messages.paymentOptions),\r\n    options: [\r\n      intl.formatMessage(messages.cash),\r\n      intl.formatMessage(messages.onlinePayment),\r\n      intl.formatMessage(messages.collectLater),\r\n    ],\r\n  };\r\n\r\n  const handleSaveAndContinue = async () => {\r\n    try {\r\n      //setLoading(true);\r\n      const newItems = [...orderDetails.items]\r\n      .map((item) => {\r\n        return {\r\n          partId: item.partId,\r\n          quantity: parseInt(item.quantityToGive ?? 0),\r\n          price: item.price,\r\n        };\r\n      })\r\n\r\n      \r\n      const updatedParts = {\r\n        paymentOption: paymentValue,\r\n        deliveryOption: deliveryValue,\r\n        items: newItems,\r\n        status: orderDetails.status,\r\n        comment: '',\r\n      };\r\n\r\n  \r\n\r\n      const unavailablePartsList = [...orderDetails.items]\r\n        .map((item) => {\r\n          return {\r\n            ...item,\r\n            pendingQuantity: item.quantity - (item.quantityToGive ?? 0),\r\n          };\r\n        })\r\n        .filter((item) => item.pendingQuantity !== 0);\r\n\r\n      localStorage.partsUnavailable = JSON.stringify(unavailablePartsList);\r\n\r\n\r\n      if(newItems.length > 0) {\r\n        await updateOrders({\r\n          auth,\r\n          orderId: id,\r\n          data: updatedParts,\r\n        });\r\n      }\r\n\r\n\r\n      localStorage.orderSummary = JSON.stringify(totals);\r\n\r\n      const partList = [...orderDetails.items].filter(item => item.quantityToGive);\r\n      localStorage.partList = JSON.stringify(partList);\r\n      setLoading(false);\r\n\r\n      notification({\r\n        title: intl.formatMessage(messages.orderUpdated),\r\n        description: intl.formatMessage(messages.orderUpdatedDescription),\r\n        status: 'success',\r\n      });\r\n      history.push(`${url}/order-summary`);\r\n    } catch (error) {\r\n      notification({\r\n        description: intl.formatMessage(messages.errorOccurred),\r\n        status: 'error',\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path={path}>\r\n          <BackButton />\r\n          <OrderDetailInfo orderDetails={orderDetails} />\r\n          <OrderOptions\r\n            onDeliveryOptionChange={setDeliveryValue}\r\n            onPaymentOptionChange={setPaymentValue}\r\n            deliveryValue={deliveryValue}\r\n            paymentValue={paymentValue}\r\n            deliverOptions={deliverOptions}\r\n            paymentOptions={paymentOptions}\r\n          />\r\n          <DynamicTable\r\n            columns={columns}\r\n            data={orderDetails.items}\r\n            fetchData={(data) => 'fetch order details here'}\r\n            hidePagination={true}\r\n            updateMyData={updateMyData}\r\n            skipPageReset={skipPageReset}\r\n            totals={totals}\r\n          />\r\n          <Button\r\n            onClick={handleSaveAndContinue}\r\n            variant='normal'\r\n            my={4}\r\n            marginLeft='auto'\r\n            isLoading={isLoading}\r\n          >\r\n            {intl.formatMessage(messages.saveContinue)}\r\n          </Button>\r\n      </Route>\r\n      <Route path={`${path}/order-summary`}>\r\n        <OrderSummary\r\n          goToUnavilable={() => history.push(`${url}/parts-unavailable`)}\r\n        />\r\n      </Route>\r\n      <Route path={`${path}/parts-unavailable`}>\r\n        <PartsUnavailable />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst EditableCell = withToast(\r\n  ({\r\n    value: initialValue,\r\n    row: { index, original },\r\n    column: { id },\r\n    updateMyData,\r\n    notification, // This is a custom function that we supplied to our table instance\r\n  }) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue);\r\n    const intl = useIntl();\r\n\r\n    const onChange = (value) => {\r\n      if (parseInt(value) > parseInt(original.quantity)) {\r\n        notification({\r\n          title: intl.formatMessage(messages.outOfRange),\r\n          description: intl.formatMessage(messages.outOfRangeDescription),\r\n          status: 'error',\r\n        });\r\n        setValue('');\r\n        updateMyData(index, id, '');\r\n        return;\r\n      } else {\r\n        setValue(value);\r\n        updateMyData(index, id, value);\r\n      }\r\n    };\r\n\r\n    // If the initialValue is changed external, sync it up with our state\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return (\r\n      <NumberInput\r\n        value={value}\r\n        onChange={onChange}\r\n        width='10vw'\r\n        margin='0 auto'\r\n      >\r\n        <NumberInputField />\r\n      </NumberInput>\r\n    );\r\n  },\r\n);\r\n\r\nexport default withToast(OrderDetails);\r\n"]},"metadata":{},"sourceType":"module"}