{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport services from './services';\nconst stockTransferSlice = createSlice({\n  name: 'stockTransferSlice',\n  initialState: {\n    allStockTransfer: [],\n    singleStockTransfer: {\n      stock: [],\n      status: '',\n      id: ''\n    },\n    totalCount: 0\n  },\n  reducers: {\n    addAllStockTranfer: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.allStockTransfer = payload;\n    },\n    addSingleStockTransfer: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.singleStockTransfer = payload;\n    },\n    addTotalCount: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.totalCount = payload;\n    }\n  }\n});\nexport const {\n  addAllStockTranfer,\n  addSingleStockTransfer,\n  addTotalCount\n} = stockTransferSlice.actions;\nexport const getAllStockTranferRequest = payload => dispatcher => {\n  return services.getAllStockTransferRequest(payload).then(response => {\n    var _response$data$0$tota;\n\n    dispatcher(addAllStockTranfer(response.data[0].data));\n    dispatcher(addTotalCount((_response$data$0$tota = response.data[0].totalCount) === null || _response$data$0$tota === void 0 ? void 0 : _response$data$0$tota.count));\n    return Promise.resolve({\n      data: response.data[0].data,\n      totalCount: response.data[0].totalCount\n    });\n  }, error => {\n    if (error.response) {\n      var _error$response, _error$response$data;\n\n      return Promise.reject((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errMsg);\n    }\n  });\n};\nexport const getSingleStockTranferRequest = payload => dispatcher => {\n  return services.getSingleStockTransferRequest(payload).then(response => {\n    dispatcher(addSingleStockTransfer(response.data[0]));\n  }, error => {\n    if (error.response) {\n      var _error$response2, _error$response2$data;\n\n      return Promise.reject((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errMsg);\n    }\n  });\n};\nexport const updateStockTransferStatus = payload => dispatcher => {\n  return services.updateStockTransferStatus(payload).then(response => {\n    /*  dispatcher(addAllStockTranfer(response.data)); */\n  }, error => {\n    if (error.response) {\n      var _error$response3, _error$response3$data;\n\n      return Promise.reject((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.errMsg);\n    }\n  });\n};\nexport const selectStockTransfer = state => state.stockTransfer;\nexport default stockTransferSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/StockTransfer/slice.js"],"names":["createSlice","services","stockTransferSlice","name","initialState","allStockTransfer","singleStockTransfer","stock","status","id","totalCount","reducers","addAllStockTranfer","state","payload","addSingleStockTransfer","addTotalCount","actions","getAllStockTranferRequest","dispatcher","getAllStockTransferRequest","then","response","data","count","Promise","resolve","error","reject","errMsg","getSingleStockTranferRequest","getSingleStockTransferRequest","updateStockTransferStatus","selectStockTransfer","stockTransfer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport services from './services';\r\n\r\nconst stockTransferSlice = createSlice({\r\n  name: 'stockTransferSlice',\r\n  initialState: {\r\n    allStockTransfer: [],\r\n    singleStockTransfer: {stock: [], status:'', id:''},\r\n    totalCount: 0\r\n  },\r\n  reducers: {\r\n    addAllStockTranfer: (state, { payload }) => {\r\n      state.allStockTransfer = payload;\r\n    },\r\n    addSingleStockTransfer: (state, { payload }) => {\r\n      state.singleStockTransfer = payload;\r\n    },\r\n    addTotalCount: (state, { payload }) => {\r\n      state.totalCount = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addAllStockTranfer, addSingleStockTransfer, addTotalCount } =\r\n  stockTransferSlice.actions;\r\n\r\nexport const getAllStockTranferRequest = (payload) => (dispatcher) => {\r\n  return services.getAllStockTransferRequest(payload).then(\r\n    (response) => {\r\n      dispatcher(addAllStockTranfer(response.data[0].data));\r\n      dispatcher(addTotalCount(response.data[0].totalCount?.count));\r\n      return Promise.resolve({data:response.data[0].data, totalCount: response.data[0].totalCount });\r\n    },\r\n    (error) => {\r\n      if (error.response) {\r\n        return Promise.reject(error.response?.data?.errMsg);\r\n      }\r\n    },\r\n  );\r\n};\r\n\r\nexport const getSingleStockTranferRequest = (payload) => (dispatcher) => {\r\n  return services.getSingleStockTransferRequest(payload).then(\r\n    (response) => {\r\n      dispatcher(addSingleStockTransfer(response.data[0]));\r\n    },\r\n    (error) => {\r\n      if (error.response) {\r\n        return Promise.reject(error.response?.data?.errMsg);\r\n      }\r\n    },\r\n  );\r\n};\r\n\r\nexport const updateStockTransferStatus = (payload) => (dispatcher) => {\r\n  return services.updateStockTransferStatus(payload).then(\r\n    (response) => {\r\n      /*  dispatcher(addAllStockTranfer(response.data)); */\r\n    },\r\n    (error) => {\r\n      if (error.response) {\r\n        return Promise.reject(error.response?.data?.errMsg);\r\n      }\r\n    },\r\n  );\r\n};\r\n\r\nexport const selectStockTransfer = (state) => state.stockTransfer;\r\n\r\nexport default stockTransferSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}