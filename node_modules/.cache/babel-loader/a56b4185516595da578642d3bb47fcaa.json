{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\CategoryDetailsForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport messages from './messages';\nimport { isEmpty, isUndefined, get } from 'lodash';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport { getCategories, getPart, patchPart } from '../../containers/PartAddition/action';\nimport { Select as SearchSelect } from 'chakra-react-select';\nimport CustomInput from '../../utils/Input';\nimport { Box, Textarea } from '@chakra-ui/react';\nimport InputScaffold from '../../utils/InputScaffold';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CategoryDetailsForm = _ref => {\n  _s();\n\n  let {\n    setActiveStep,\n    setCurrentPart,\n    categoryDetails = {},\n    currentPart,\n    isEdit\n  } = _ref;\n  const intl = useIntl();\n  const auth = useSelector(state => state.auth);\n  const [categories, setCategories] = useState([]);\n  const [category, setCategory] = useState('');\n  const [defaultCategory, setDefaultCategory] = useState('');\n  const [description, setDescription] = useState('');\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onSubmit'\n  });\n\n  const fetchCategories = async () => {\n    setCategories(await getCategories());\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n  /*  useEffect(() => {\r\n    try {\r\n      const cat = categories.filter(\r\n        (category) => category.category === 'All Parts',\r\n      );\r\n      setDefaultCategory(cat);\r\n    } catch (error) {\r\n      toast(intl.formatMessage(messages.allCategoriesNotPresent));\r\n    }\r\n    \r\n    if (currentPart._id) {\r\n      setValue('category', get(currentPart.category[0], '_id', ''));\r\n      setCategory({\r\n        value: currentPart.category[0]._id,\r\n        label: currentPart.category[0].category,\r\n      });\r\n  \r\n      } else if (!isUndefined(currentPart.category)) {\r\n      setValue('category', get(currentPart, 'category', ''));\r\n      setCategory(currentPart.categorySelect);\r\n    }\r\n  }, [categories]); */\n\n  useEffect(() => {\n    if (!isEmpty(currentPart)) {\n      setValue('rootPartNumber', get(currentPart, 'rootPartNumber', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.rootPartNumber : currentPart === null || currentPart === void 0 ? void 0 : currentPart.rootPartNumber));\n      setValue('partNumber', get(currentPart, 'partNumber', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.partNumber : currentPart === null || currentPart === void 0 ? void 0 : currentPart.partNumber));\n      setValue('partName', get(currentPart, 'partName', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.partName : currentPart === null || currentPart === void 0 ? void 0 : currentPart.partName));\n      setValue('mrp', get(currentPart, 'mrp', ''));\n      setValue('description', get(currentPart, 'description', ''));\n      setValue('sellingPrice', get(currentPart, 'sellingPrice'));\n      setValue('hsnCode', get(currentPart, 'hsnCode', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.hsnCode : currentPart === null || currentPart === void 0 ? void 0 : currentPart.hsnCode));\n      setValue('taxSlab', get(currentPart, 'taxSlab', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.taxSlab : currentPart === null || currentPart === void 0 ? void 0 : currentPart.taxSlab));\n      setValue('category', get(currentPart, 'category', isEdit ? currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.category : currentPart === null || currentPart === void 0 ? void 0 : currentPart.category));\n    }\n  }, [currentPart]);\n\n  const handleFormSubmit = async data => {\n    /*  data.categoryId = data.category;\r\n    if (data.category === '') {\r\n      data.category = defaultCategory[0]._id;\r\n    } */\n    if (isUndefined(currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster) || isUndefined(currentPart._id)) {\n      setCurrentPart({ ...currentPart,\n        ...data,\n        description\n      });\n      setActiveStep(3);\n    } else {\n      try {\n        const {\n          partmaster,\n          partMasterId,\n          ...editableData\n        } = { ...currentPart,\n          ...data\n        };\n        delete editableData.partNumber;\n        delete editableData.partName;\n        delete editableData.rootPartNumber;\n        delete editableData.saleStatus;\n        delete editableData.description;\n        delete editableData.hsnCode;\n        delete editableData.taxSlab;\n        delete editableData.status;\n        delete editableData.updatedAt;\n        delete editableData.createdAt;\n        await patchPart(auth, { ...editableData\n        });\n        const response = await getPart(auth, currentPart._id);\n        setCurrentPart(response);\n        toast(intl.formatMessage(messages.partUpdateSuccess));\n      } catch (error) {\n        toast(intl.formatMessage(messages.somethingWentWrong));\n      }\n    }\n  };\n\n  const onReset = () => {\n    reset({}, {\n      keepDirty: false,\n      keepErrors: false,\n      keepValues: false\n    });\n  };\n\n  const handleDescription = value => {\n    setDescription(value.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.categoryDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.category,\n            inputName: \"category\",\n            inputType: \"text\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.categoryRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.rootPartNumber,\n            inputName: \"rootPartNumber\",\n            inputType: \"text\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.rootPartNumberRequired,\n            register: register,\n            isReadOnly: isEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flexWrap: \"wrap\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          mt: {\n            base: 0,\n            lg: 6\n          },\n          mb: 6,\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.partNumber,\n            inputName: \"partNumber\",\n            inputType: \"text\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.partNumberRequired,\n            register: register,\n            isReadOnly: isEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.partName,\n            inputName: \"partName\",\n            inputType: \"text\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.partNameRequired,\n            register: register,\n            isReadOnly: isEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flexWrap: \"wrap\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          mt: {\n            base: 0,\n            lg: 6\n          },\n          mb: 6,\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.mrp,\n            inputName: \"mrp\",\n            inputType: \"number\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.mrpRequiredMessage,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.sellingPrice,\n            inputName: \"sellingPrice\",\n            inputType: \"number\",\n            isRequired: false,\n            errors: errors,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          flexWrap: \"wrap\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          mt: {\n            base: 0,\n            lg: 6\n          },\n          mb: 6,\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.hsn,\n            inputName: \"hsnCode\",\n            inputType: \"number\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.hsnRequiredMessage,\n            register: register,\n            isReadOnly: isEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.taxSlab,\n            inputName: \"taxSlab\",\n            inputType: \"number\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.taxSlabRequiredMessage,\n            register: register,\n            isReadOnly: isEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormactionButtons, {\n        saveLabel: messages.saveButtonLabel,\n        onReset: onReset,\n        cancleLabel: messages.cancelButtonLabe\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CategoryDetailsForm, \"v9sBd3XVtadrlkUoSaD70sCWxu4=\", false, function () {\n  return [useIntl, useSelector, useForm];\n});\n\n_c = CategoryDetailsForm;\nCategoryDetailsForm.propTypes = {\n  setActiveStep: PropTypes.func,\n  setCurrentPart: PropTypes.func\n};\nexport default CategoryDetailsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryDetailsForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/CategoryDetailsForm/index.js"],"names":["React","useEffect","useRef","useState","PropTypes","useForm","useIntl","toast","useSelector","messages","isEmpty","isUndefined","get","FormactionButtons","getCategories","getPart","patchPart","Select","SearchSelect","CustomInput","Box","Textarea","InputScaffold","CategoryDetailsForm","setActiveStep","setCurrentPart","categoryDetails","currentPart","isEdit","intl","auth","state","categories","setCategories","category","setCategory","defaultCategory","setDefaultCategory","description","setDescription","register","formState","errors","handleSubmit","reset","setValue","mode","fetchCategories","partmaster","rootPartNumber","partNumber","partName","hsnCode","taxSlab","handleFormSubmit","data","_id","partMasterId","editableData","saleStatus","status","updatedAt","createdAt","response","formatMessage","partUpdateSuccess","error","somethingWentWrong","onReset","keepDirty","keepErrors","keepValues","handleDescription","value","target","categoryRequired","rootPartNumberRequired","base","lg","partNumberRequired","partNameRequired","mrp","mrpRequiredMessage","sellingPrice","hsn","hsnRequiredMessage","taxSlabRequiredMessage","saveButtonLabel","cancelButtonLabe","propTypes","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useIntl } from 'react-intl';\r\nimport toast from 'react-hot-toast';\r\nimport { useSelector } from 'react-redux';\r\nimport messages from './messages';\r\nimport { isEmpty, isUndefined, get } from 'lodash';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport {\r\n  getCategories,\r\n  getPart,\r\n  patchPart,\r\n} from '../../containers/PartAddition/action';\r\n\r\nimport { Select as SearchSelect } from 'chakra-react-select';\r\nimport CustomInput from '../../utils/Input';\r\nimport { Box, Textarea } from '@chakra-ui/react';\r\nimport InputScaffold from '../../utils/InputScaffold';\r\n\r\nconst CategoryDetailsForm = ({\r\n  setActiveStep,\r\n  setCurrentPart,\r\n  categoryDetails = {},\r\n  currentPart,\r\n  isEdit,\r\n}) => {\r\n  const intl = useIntl();\r\n  const auth = useSelector((state) => state.auth);\r\n  const [categories, setCategories] = useState([]);\r\n  const [category, setCategory] = useState('');\r\n  const [defaultCategory, setDefaultCategory] = useState('');\r\n  const [description, setDescription] = useState('');\r\n\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm({\r\n    mode: 'onSubmit',\r\n  });\r\n\r\n  const fetchCategories = async () => {\r\n    setCategories(await getCategories());\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  /*  useEffect(() => {\r\n    try {\r\n      const cat = categories.filter(\r\n        (category) => category.category === 'All Parts',\r\n      );\r\n      setDefaultCategory(cat);\r\n    } catch (error) {\r\n      toast(intl.formatMessage(messages.allCategoriesNotPresent));\r\n    }\r\n    \r\n    if (currentPart._id) {\r\n      setValue('category', get(currentPart.category[0], '_id', ''));\r\n      setCategory({\r\n        value: currentPart.category[0]._id,\r\n        label: currentPart.category[0].category,\r\n      });\r\n\r\n\r\n\r\n    } else if (!isUndefined(currentPart.category)) {\r\n      setValue('category', get(currentPart, 'category', ''));\r\n      setCategory(currentPart.categorySelect);\r\n    }\r\n  }, [categories]); */\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(currentPart)) {\r\n      setValue(\r\n        'rootPartNumber',\r\n        get(\r\n          currentPart,\r\n          'rootPartNumber',\r\n          isEdit ? currentPart?.partmaster.rootPartNumber : currentPart?.rootPartNumber,\r\n        ),\r\n      );\r\n      setValue(\r\n        'partNumber',\r\n        get(\r\n          currentPart,\r\n          'partNumber',\r\n          isEdit ? currentPart?.partmaster.partNumber : currentPart?.partNumber,\r\n        ),\r\n      );\r\n      setValue(\r\n        'partName',\r\n        get(\r\n          currentPart,\r\n          'partName',\r\n          isEdit ? currentPart?.partmaster.partName : currentPart?.partName,\r\n        ),\r\n      );\r\n      setValue('mrp', get(currentPart, 'mrp', ''));\r\n      setValue('description', get(currentPart, 'description', ''));\r\n      setValue(\r\n        'sellingPrice',\r\n        get(\r\n          currentPart,\r\n          'sellingPrice'\r\n        ),\r\n      );\r\n      setValue(\r\n        'hsnCode',\r\n        get(\r\n          currentPart,\r\n          'hsnCode',\r\n          isEdit ? currentPart?.partmaster.hsnCode : currentPart?.hsnCode,\r\n        ),\r\n      );\r\n      setValue(\r\n        'taxSlab',\r\n        get(\r\n          currentPart,\r\n          'taxSlab',\r\n          isEdit ? currentPart?.partmaster.taxSlab : currentPart?.taxSlab,\r\n        ),\r\n      );\r\n      setValue(\r\n        'category',\r\n        get(\r\n          currentPart,\r\n          'category',\r\n          isEdit ? currentPart?.partmaster.category : currentPart?.category,\r\n        ),\r\n      );\r\n    }\r\n  }, [currentPart]);\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    /*  data.categoryId = data.category;\r\n    if (data.category === '') {\r\n      data.category = defaultCategory[0]._id;\r\n    } */\r\n    if (\r\n      isUndefined(currentPart?.partmaster) ||\r\n      isUndefined(currentPart._id)\r\n    ) {\r\n      setCurrentPart({ ...currentPart, ...data, description });\r\n      setActiveStep(3);\r\n    } else {\r\n      try {\r\n        \r\n\r\n        const { partmaster, partMasterId, ...editableData } = {\r\n          ...currentPart,\r\n          ...data,\r\n        };\r\n\r\n        delete editableData.partNumber;\r\n        delete editableData.partName;\r\n        delete editableData.rootPartNumber;\r\n        delete editableData.saleStatus;\r\n        delete editableData.description;\r\n        delete editableData.hsnCode;\r\n        delete editableData.taxSlab;\r\n        delete editableData.status;\r\n        delete editableData.updatedAt;\r\n        delete editableData.createdAt;\r\n\r\n          await patchPart(auth, { ...editableData });\r\n        const response = await getPart(auth, currentPart._id);\r\n        setCurrentPart(response);\r\n        toast(intl.formatMessage(messages.partUpdateSuccess));\r\n      } catch (error) {\r\n        toast(intl.formatMessage(messages.somethingWentWrong));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onReset = () => {\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n  };\r\n\r\n  const handleDescription = (value) => {\r\n    setDescription(value.target.value);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.categoryDetails)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap'>\r\n            {/* <Box width={{ base: '100%', lg: '48%' }}>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.category)}\r\n              </label>\r\n              <SearchSelect\r\n                style={{\r\n                  width: 320,\r\n                }}\r\n                value={category}\r\n                onChange={(e) => {\r\n                  setCategory(e);\r\n                  setValue('category', e.value);\r\n                  setValue('categorySelect', e);\r\n                }}\r\n                options={categories.map((category) => {\r\n                  return { value: category._id, label: category.category };\r\n                })}\r\n                placeholder={intl.formatMessage(messages.selectCategory)}\r\n              ></SearchSelect>\r\n              {errors && errors.brand && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.categoryRequired)}\r\n                </span>\r\n              )}\r\n            </Box> */}\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.category}\r\n              inputName='category'\r\n              inputType='text'\r\n              isRequired={false}\r\n              errors={errors}\r\n              requiredLabel={messages.categoryRequired}\r\n              register={register}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.rootPartNumber}\r\n              inputName='rootPartNumber'\r\n              inputType='text'\r\n              isRequired={false}\r\n              errors={errors}\r\n              requiredLabel={messages.rootPartNumberRequired}\r\n              register={register}\r\n              isReadOnly={isEdit}\r\n            />\r\n          </Box>\r\n          <Box\r\n            flexWrap='wrap'\r\n            display='flex'\r\n            justifyContent='space-between'\r\n            mt={{ base: 0, lg: 6 }}\r\n            mb={6}\r\n          >\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.partNumber}\r\n              inputName='partNumber'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.partNumberRequired}\r\n              register={register}\r\n              isReadOnly={isEdit}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.partName}\r\n              inputName='partName'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.partNameRequired}\r\n              register={register}\r\n              isReadOnly={isEdit}\r\n            />\r\n          </Box>\r\n          <Box\r\n            flexWrap='wrap'\r\n            display='flex'\r\n            justifyContent='space-between'\r\n            mt={{ base: 0, lg: 6 }}\r\n            mb={6}\r\n          >\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.mrp}\r\n              inputName='mrp'\r\n              inputType='number'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.mrpRequiredMessage}\r\n              register={register}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.sellingPrice}\r\n              inputName='sellingPrice'\r\n              inputType='number'\r\n              isRequired={false}\r\n              errors={errors}\r\n              register={register}\r\n            />\r\n          </Box>\r\n          <Box\r\n            flexWrap='wrap'\r\n            display='flex'\r\n            justifyContent='space-between'\r\n            mt={{ base: 0, lg: 6 }}\r\n            mb={6}\r\n          >\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.hsn}\r\n              inputName='hsnCode'\r\n              inputType='number'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.hsnRequiredMessage}\r\n              register={register}\r\n              isReadOnly={isEdit}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.taxSlab}\r\n              inputName='taxSlab'\r\n              inputType='number'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.taxSlabRequiredMessage}\r\n              register={register}\r\n              isReadOnly={isEdit}\r\n            />\r\n          </Box>\r\n          {/* <Box mb={6}>\r\n            <label  className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n              Description\r\n            </label>\r\n            <Textarea {...register('description')} onChange={handleDescription} name='description' isRequired={false} />\r\n          </Box> */}\r\n        </Box>\r\n        <FormactionButtons\r\n          saveLabel={messages.saveButtonLabel}\r\n          onReset={onReset}\r\n          cancleLabel={messages.cancelButtonLabe}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nCategoryDetailsForm.propTypes = {\r\n  setActiveStep: PropTypes.func,\r\n  setCurrentPart: PropTypes.func,\r\n};\r\n\r\nexport default CategoryDetailsForm;\r\n"]},"metadata":{},"sourceType":"module"}