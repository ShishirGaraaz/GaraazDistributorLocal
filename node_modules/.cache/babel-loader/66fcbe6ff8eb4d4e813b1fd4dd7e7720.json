{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLazyRef = void 0;\n\nconst react_1 = require(\"react\");\n\nconst noValue = Symbol('lazyRef.noValue');\n\nconst useLazyRef = getInitialValue => {\n  const lazyRef = (0, react_1.useRef)(noValue);\n\n  if (lazyRef.current === noValue) {\n    lazyRef.current = getInitialValue();\n  }\n\n  return lazyRef;\n};\n\nexports.useLazyRef = useLazyRef;","map":{"version":3,"sources":["../../../src/hooks/useLazyRef.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAM,OAAO,GAAG,MAAM,CAAC,iBAAD,CAAtB;;AAEO,MAAM,UAAU,GAAW,eAAR,IAAiE;AACvF,QAAM,OAAO,GAAG,CAAA,GAAA,OAAA,CAAA,MAAA,EAA+B,OAA/B,CAAhB;;AAEA,MAAI,OAAO,CAAC,OAAR,KAAoB,OAAxB,EAAiC;AAC7B,IAAA,OAAO,CAAC,OAAR,GAAkB,eAAe,EAAjC;AACH;;AAED,SAAO,OAAP;AACH,CARM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV","sourcesContent":["import { MutableRefObject, useRef } from 'react';\n\nconst noValue = Symbol('lazyRef.noValue');\n\nexport const useLazyRef = <Value>(getInitialValue: () => Value): MutableRefObject<Value> => {\n    const lazyRef = useRef<typeof noValue | Value>(noValue);\n\n    if (lazyRef.current === noValue) {\n        lazyRef.current = getInitialValue();\n    }\n\n    return lazyRef as MutableRefObject<Value>;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}