{"ast":null,"code":"import { Util } from './Util.js';\nimport { Konva } from './Global.js';\n\nfunction simplifyArray(arr) {\n  var retArr = [],\n      len = arr.length,\n      util = Util,\n      n,\n      val;\n\n  for (n = 0; n < len; n++) {\n    val = arr[n];\n\n    if (util._isNumber(val)) {\n      val = Math.round(val * 1000) / 1000;\n    } else if (!util._isString(val)) {\n      val = val + '';\n    }\n\n    retArr.push(val);\n  }\n\n  return retArr;\n}\n\nvar COMMA = ',',\n    OPEN_PAREN = '(',\n    CLOSE_PAREN = ')',\n    OPEN_PAREN_BRACKET = '([',\n    CLOSE_BRACKET_PAREN = '])',\n    SEMICOLON = ';',\n    DOUBLE_PAREN = '()',\n    EQUALS = '=',\n    CONTEXT_METHODS = ['arc', 'arcTo', 'beginPath', 'bezierCurveTo', 'clearRect', 'clip', 'closePath', 'createLinearGradient', 'createPattern', 'createRadialGradient', 'drawImage', 'ellipse', 'fill', 'fillText', 'getImageData', 'createImageData', 'lineTo', 'moveTo', 'putImageData', 'quadraticCurveTo', 'rect', 'restore', 'rotate', 'save', 'scale', 'setLineDash', 'setTransform', 'stroke', 'strokeText', 'transform', 'translate'];\nvar CONTEXT_PROPERTIES = ['fillStyle', 'strokeStyle', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'lineCap', 'lineDashOffset', 'lineJoin', 'lineWidth', 'miterLimit', 'font', 'textAlign', 'textBaseline', 'globalAlpha', 'globalCompositeOperation', 'imageSmoothingEnabled'];\nconst traceArrMax = 100;\nexport class Context {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this._context = canvas._canvas.getContext('2d');\n\n    if (Konva.enableTrace) {\n      this.traceArr = [];\n\n      this._enableTrace();\n    }\n  }\n\n  fillShape(shape) {\n    if (shape.fillEnabled()) {\n      this._fill(shape);\n    }\n  }\n\n  _fill(shape) {}\n\n  strokeShape(shape) {\n    if (shape.hasStroke()) {\n      this._stroke(shape);\n    }\n  }\n\n  _stroke(shape) {}\n\n  fillStrokeShape(shape) {\n    if (shape.attrs.fillAfterStrokeEnabled) {\n      this.strokeShape(shape);\n      this.fillShape(shape);\n    } else {\n      this.fillShape(shape);\n      this.strokeShape(shape);\n    }\n  }\n\n  getTrace(relaxed, rounded) {\n    var traceArr = this.traceArr,\n        len = traceArr.length,\n        str = '',\n        n,\n        trace,\n        method,\n        args;\n\n    for (n = 0; n < len; n++) {\n      trace = traceArr[n];\n      method = trace.method;\n\n      if (method) {\n        args = trace.args;\n        str += method;\n\n        if (relaxed) {\n          str += DOUBLE_PAREN;\n        } else {\n          if (Util._isArray(args[0])) {\n            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n          } else {\n            if (rounded) {\n              args = args.map(a => typeof a === 'number' ? Math.floor(a) : a);\n            }\n\n            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n          }\n        }\n      } else {\n        str += trace.property;\n\n        if (!relaxed) {\n          str += EQUALS + trace.val;\n        }\n      }\n\n      str += SEMICOLON;\n    }\n\n    return str;\n  }\n\n  clearTrace() {\n    this.traceArr = [];\n  }\n\n  _trace(str) {\n    var traceArr = this.traceArr,\n        len;\n    traceArr.push(str);\n    len = traceArr.length;\n\n    if (len >= traceArrMax) {\n      traceArr.shift();\n    }\n  }\n\n  reset() {\n    var pixelRatio = this.getCanvas().getPixelRatio();\n    this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n  }\n\n  getCanvas() {\n    return this.canvas;\n  }\n\n  clear(bounds) {\n    var canvas = this.getCanvas();\n\n    if (bounds) {\n      this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n    } else {\n      this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n    }\n  }\n\n  _applyLineCap(shape) {\n    var lineCap = shape.getLineCap();\n\n    if (lineCap) {\n      this.setAttr('lineCap', lineCap);\n    }\n  }\n\n  _applyOpacity(shape) {\n    var absOpacity = shape.getAbsoluteOpacity();\n\n    if (absOpacity !== 1) {\n      this.setAttr('globalAlpha', absOpacity);\n    }\n  }\n\n  _applyLineJoin(shape) {\n    var lineJoin = shape.attrs.lineJoin;\n\n    if (lineJoin) {\n      this.setAttr('lineJoin', lineJoin);\n    }\n  }\n\n  setAttr(attr, val) {\n    this._context[attr] = val;\n  }\n\n  arc(a0, a1, a2, a3, a4, a5) {\n    this._context.arc(a0, a1, a2, a3, a4, a5);\n  }\n\n  arcTo(a0, a1, a2, a3, a4) {\n    this._context.arcTo(a0, a1, a2, a3, a4);\n  }\n\n  beginPath() {\n    this._context.beginPath();\n  }\n\n  bezierCurveTo(a0, a1, a2, a3, a4, a5) {\n    this._context.bezierCurveTo(a0, a1, a2, a3, a4, a5);\n  }\n\n  clearRect(a0, a1, a2, a3) {\n    this._context.clearRect(a0, a1, a2, a3);\n  }\n\n  clip() {\n    this._context.clip();\n  }\n\n  closePath() {\n    this._context.closePath();\n  }\n\n  createImageData(a0, a1) {\n    var a = arguments;\n\n    if (a.length === 2) {\n      return this._context.createImageData(a0, a1);\n    } else if (a.length === 1) {\n      return this._context.createImageData(a0);\n    }\n  }\n\n  createLinearGradient(a0, a1, a2, a3) {\n    return this._context.createLinearGradient(a0, a1, a2, a3);\n  }\n\n  createPattern(a0, a1) {\n    return this._context.createPattern(a0, a1);\n  }\n\n  createRadialGradient(a0, a1, a2, a3, a4, a5) {\n    return this._context.createRadialGradient(a0, a1, a2, a3, a4, a5);\n  }\n\n  drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n    var a = arguments,\n        _context = this._context;\n\n    if (a.length === 3) {\n      _context.drawImage(a0, a1, a2);\n    } else if (a.length === 5) {\n      _context.drawImage(a0, a1, a2, a3, a4);\n    } else if (a.length === 9) {\n      _context.drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8);\n    }\n  }\n\n  ellipse(a0, a1, a2, a3, a4, a5, a6, a7) {\n    this._context.ellipse(a0, a1, a2, a3, a4, a5, a6, a7);\n  }\n\n  isPointInPath(x, y) {\n    return this._context.isPointInPath(x, y);\n  }\n\n  fill(path2d) {\n    if (path2d) {\n      this._context.fill(path2d);\n    } else {\n      this._context.fill();\n    }\n  }\n\n  fillRect(x, y, width, height) {\n    this._context.fillRect(x, y, width, height);\n  }\n\n  strokeRect(x, y, width, height) {\n    this._context.strokeRect(x, y, width, height);\n  }\n\n  fillText(text, x, y, maxWidth) {\n    if (maxWidth) {\n      this._context.fillText(text, x, y, maxWidth);\n    } else {\n      this._context.fillText(text, x, y);\n    }\n  }\n\n  measureText(text) {\n    return this._context.measureText(text);\n  }\n\n  getImageData(a0, a1, a2, a3) {\n    return this._context.getImageData(a0, a1, a2, a3);\n  }\n\n  lineTo(a0, a1) {\n    this._context.lineTo(a0, a1);\n  }\n\n  moveTo(a0, a1) {\n    this._context.moveTo(a0, a1);\n  }\n\n  rect(a0, a1, a2, a3) {\n    this._context.rect(a0, a1, a2, a3);\n  }\n\n  putImageData(a0, a1, a2) {\n    this._context.putImageData(a0, a1, a2);\n  }\n\n  quadraticCurveTo(a0, a1, a2, a3) {\n    this._context.quadraticCurveTo(a0, a1, a2, a3);\n  }\n\n  restore() {\n    this._context.restore();\n  }\n\n  rotate(a0) {\n    this._context.rotate(a0);\n  }\n\n  save() {\n    this._context.save();\n  }\n\n  scale(a0, a1) {\n    this._context.scale(a0, a1);\n  }\n\n  setLineDash(a0) {\n    if (this._context.setLineDash) {\n      this._context.setLineDash(a0);\n    } else if ('mozDash' in this._context) {\n      this._context['mozDash'] = a0;\n    } else if ('webkitLineDash' in this._context) {\n      this._context['webkitLineDash'] = a0;\n    }\n  }\n\n  getLineDash() {\n    return this._context.getLineDash();\n  }\n\n  setTransform(a0, a1, a2, a3, a4, a5) {\n    this._context.setTransform(a0, a1, a2, a3, a4, a5);\n  }\n\n  stroke(path2d) {\n    if (path2d) {\n      this._context.stroke(path2d);\n    } else {\n      this._context.stroke();\n    }\n  }\n\n  strokeText(a0, a1, a2, a3) {\n    this._context.strokeText(a0, a1, a2, a3);\n  }\n\n  transform(a0, a1, a2, a3, a4, a5) {\n    this._context.transform(a0, a1, a2, a3, a4, a5);\n  }\n\n  translate(a0, a1) {\n    this._context.translate(a0, a1);\n  }\n\n  _enableTrace() {\n    var that = this,\n        len = CONTEXT_METHODS.length,\n        origSetter = this.setAttr,\n        n,\n        args;\n\n    var func = function (methodName) {\n      var origMethod = that[methodName],\n          ret;\n\n      that[methodName] = function () {\n        args = simplifyArray(Array.prototype.slice.call(arguments, 0));\n        ret = origMethod.apply(that, arguments);\n\n        that._trace({\n          method: methodName,\n          args: args\n        });\n\n        return ret;\n      };\n    };\n\n    for (n = 0; n < len; n++) {\n      func(CONTEXT_METHODS[n]);\n    }\n\n    that.setAttr = function () {\n      origSetter.apply(that, arguments);\n      var prop = arguments[0];\n      var val = arguments[1];\n\n      if (prop === 'shadowOffsetX' || prop === 'shadowOffsetY' || prop === 'shadowBlur') {\n        val = val / this.canvas.getPixelRatio();\n      }\n\n      that._trace({\n        property: prop,\n        val: val\n      });\n    };\n  }\n\n  _applyGlobalCompositeOperation(node) {\n    const op = node.attrs.globalCompositeOperation;\n    var def = !op || op === 'source-over';\n\n    if (!def) {\n      this.setAttr('globalCompositeOperation', op);\n    }\n  }\n\n}\nCONTEXT_PROPERTIES.forEach(function (prop) {\n  Object.defineProperty(Context.prototype, prop, {\n    get() {\n      return this._context[prop];\n    },\n\n    set(val) {\n      this._context[prop] = val;\n    }\n\n  });\n});\nexport class SceneContext extends Context {\n  _fillColor(shape) {\n    var fill = shape.fill();\n    this.setAttr('fillStyle', fill);\n\n    shape._fillFunc(this);\n  }\n\n  _fillPattern(shape) {\n    this.setAttr('fillStyle', shape._getFillPattern());\n\n    shape._fillFunc(this);\n  }\n\n  _fillLinearGradient(shape) {\n    var grd = shape._getLinearGradient();\n\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n\n      shape._fillFunc(this);\n    }\n  }\n\n  _fillRadialGradient(shape) {\n    var grd = shape._getRadialGradient();\n\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n\n      shape._fillFunc(this);\n    }\n  }\n\n  _fill(shape) {\n    var hasColor = shape.fill(),\n        fillPriority = shape.getFillPriority();\n\n    if (hasColor && fillPriority === 'color') {\n      this._fillColor(shape);\n\n      return;\n    }\n\n    var hasPattern = shape.getFillPatternImage();\n\n    if (hasPattern && fillPriority === 'pattern') {\n      this._fillPattern(shape);\n\n      return;\n    }\n\n    var hasLinearGradient = shape.getFillLinearGradientColorStops();\n\n    if (hasLinearGradient && fillPriority === 'linear-gradient') {\n      this._fillLinearGradient(shape);\n\n      return;\n    }\n\n    var hasRadialGradient = shape.getFillRadialGradientColorStops();\n\n    if (hasRadialGradient && fillPriority === 'radial-gradient') {\n      this._fillRadialGradient(shape);\n\n      return;\n    }\n\n    if (hasColor) {\n      this._fillColor(shape);\n    } else if (hasPattern) {\n      this._fillPattern(shape);\n    } else if (hasLinearGradient) {\n      this._fillLinearGradient(shape);\n    } else if (hasRadialGradient) {\n      this._fillRadialGradient(shape);\n    }\n  }\n\n  _strokeLinearGradient(shape) {\n    var start = shape.getStrokeLinearGradientStartPoint(),\n        end = shape.getStrokeLinearGradientEndPoint(),\n        colorStops = shape.getStrokeLinearGradientColorStops(),\n        grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n\n    if (colorStops) {\n      for (var n = 0; n < colorStops.length; n += 2) {\n        grd.addColorStop(colorStops[n], colorStops[n + 1]);\n      }\n\n      this.setAttr('strokeStyle', grd);\n    }\n  }\n\n  _stroke(shape) {\n    var dash = shape.dash(),\n        strokeScaleEnabled = shape.getStrokeScaleEnabled();\n\n    if (shape.hasStroke()) {\n      if (!strokeScaleEnabled) {\n        this.save();\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n\n      this._applyLineCap(shape);\n\n      if (dash && shape.dashEnabled()) {\n        this.setLineDash(dash);\n        this.setAttr('lineDashOffset', shape.dashOffset());\n      }\n\n      this.setAttr('lineWidth', shape.strokeWidth());\n\n      if (!shape.getShadowForStrokeEnabled()) {\n        this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n      }\n\n      var hasLinearGradient = shape.getStrokeLinearGradientColorStops();\n\n      if (hasLinearGradient) {\n        this._strokeLinearGradient(shape);\n      } else {\n        this.setAttr('strokeStyle', shape.stroke());\n      }\n\n      shape._strokeFunc(this);\n\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n\n  _applyShadow(shape) {\n    var _a, _b, _c;\n\n    var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black',\n        blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5,\n        offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\n      x: 0,\n      y: 0\n    },\n        scale = shape.getAbsoluteScale(),\n        ratio = this.canvas.getPixelRatio(),\n        scaleX = scale.x * ratio,\n        scaleY = scale.y * ratio;\n    this.setAttr('shadowColor', color);\n    this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\n    this.setAttr('shadowOffsetX', offset.x * scaleX);\n    this.setAttr('shadowOffsetY', offset.y * scaleY);\n  }\n\n}\nexport class HitContext extends Context {\n  _fill(shape) {\n    this.save();\n    this.setAttr('fillStyle', shape.colorKey);\n\n    shape._fillFuncHit(this);\n\n    this.restore();\n  }\n\n  strokeShape(shape) {\n    if (shape.hasHitStroke()) {\n      this._stroke(shape);\n    }\n  }\n\n  _stroke(shape) {\n    if (shape.hasHitStroke()) {\n      var strokeScaleEnabled = shape.getStrokeScaleEnabled();\n\n      if (!strokeScaleEnabled) {\n        this.save();\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n\n      this._applyLineCap(shape);\n\n      var hitStrokeWidth = shape.hitStrokeWidth();\n      var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\n      this.setAttr('lineWidth', strokeWidth);\n      this.setAttr('strokeStyle', shape.colorKey);\n\n      shape._strokeFuncHit(this);\n\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/Context.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,WAArB;AACA,SAAS,KAAT,QAAsB,aAAtB;;AAIA,SAAS,aAAT,CAAuB,GAAvB,EAAsC;AACpC,MAAI,MAAM,GAAG,EAAb;AAAA,MACE,GAAG,GAAG,GAAG,CAAC,MADZ;AAAA,MAEE,IAAI,GAAG,IAFT;AAAA,MAGE,CAHF;AAAA,MAIE,GAJF;;AAMA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAhB,EAAqB,CAAC,EAAtB,EAA0B;AACxB,IAAA,GAAG,GAAG,GAAG,CAAC,CAAD,CAAT;;AACA,QAAI,IAAI,CAAC,SAAL,CAAe,GAAf,CAAJ,EAAyB;AACvB,MAAA,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,GAAG,IAAjB,IAAyB,IAA/B;AACD,KAFD,MAEO,IAAI,CAAC,IAAI,CAAC,SAAL,CAAe,GAAf,CAAL,EAA0B;AAC/B,MAAA,GAAG,GAAG,GAAG,GAAG,EAAZ;AACD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAED,IAAI,KAAK,GAAG,GAAZ;AAAA,IACE,UAAU,GAAG,GADf;AAAA,IAEE,WAAW,GAAG,GAFhB;AAAA,IAGE,kBAAkB,GAAG,IAHvB;AAAA,IAIE,mBAAmB,GAAG,IAJxB;AAAA,IAKE,SAAS,GAAG,GALd;AAAA,IAME,YAAY,GAAG,IANjB;AAAA,IAQE,MAAM,GAAG,GARX;AAAA,IAUE,eAAe,GAAG,CAChB,KADgB,EAEhB,OAFgB,EAGhB,WAHgB,EAIhB,eAJgB,EAKhB,WALgB,EAMhB,MANgB,EAOhB,WAPgB,EAQhB,sBARgB,EAShB,eATgB,EAUhB,sBAVgB,EAWhB,WAXgB,EAYhB,SAZgB,EAahB,MAbgB,EAchB,UAdgB,EAehB,cAfgB,EAgBhB,iBAhBgB,EAiBhB,QAjBgB,EAkBhB,QAlBgB,EAmBhB,cAnBgB,EAoBhB,kBApBgB,EAqBhB,MArBgB,EAsBhB,SAtBgB,EAuBhB,QAvBgB,EAwBhB,MAxBgB,EAyBhB,OAzBgB,EA0BhB,aA1BgB,EA2BhB,cA3BgB,EA4BhB,QA5BgB,EA6BhB,YA7BgB,EA8BhB,WA9BgB,EA+BhB,WA/BgB,CAVpB;AA4CA,IAAI,kBAAkB,GAAG,CACvB,WADuB,EAEvB,aAFuB,EAGvB,aAHuB,EAIvB,YAJuB,EAKvB,eALuB,EAMvB,eANuB,EAOvB,SAPuB,EAQvB,gBARuB,EASvB,UATuB,EAUvB,WAVuB,EAWvB,YAXuB,EAYvB,MAZuB,EAavB,WAbuB,EAcvB,cAduB,EAevB,aAfuB,EAgBvB,0BAhBuB,EAiBvB,uBAjBuB,CAAzB;AAoBA,MAAM,WAAW,GAAG,GAApB;AAuBA,OAAM,MAAO,OAAP,CAAc;AAKlB,EAAA,WAAA,CAAY,MAAZ,EAA0B;AACxB,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,QAAL,GAAgB,MAAM,CAAC,OAAP,CAAe,UAAf,CAA0B,IAA1B,CAAhB;;AAEA,QAAI,KAAK,CAAC,WAAV,EAAuB;AACrB,WAAK,QAAL,GAAgB,EAAhB;;AACA,WAAK,YAAL;AACD;AACF;;AAQD,EAAA,SAAS,CAAC,KAAD,EAAa;AACpB,QAAI,KAAK,CAAC,WAAN,EAAJ,EAAyB;AACvB,WAAK,KAAL,CAAW,KAAX;AACD;AACF;;AAED,EAAA,KAAK,CAAC,KAAD,EAAM,CAEV;;AAOD,EAAA,WAAW,CAAC,KAAD,EAAa;AACtB,QAAI,KAAK,CAAC,SAAN,EAAJ,EAAuB;AACrB,WAAK,OAAL,CAAa,KAAb;AACD;AACF;;AAED,EAAA,OAAO,CAAC,KAAD,EAAM,CAEZ;;AAQD,EAAA,eAAe,CAAC,KAAD,EAAa;AAC1B,QAAI,KAAK,CAAC,KAAN,CAAY,sBAAhB,EAAwC;AACtC,WAAK,WAAL,CAAiB,KAAjB;AACA,WAAK,SAAL,CAAe,KAAf;AACD,KAHD,MAGO;AACL,WAAK,SAAL,CAAe,KAAf;AACA,WAAK,WAAL,CAAiB,KAAjB;AACD;AACF;;AAED,EAAA,QAAQ,CAAC,OAAD,EAAW,OAAX,EAAmB;AACzB,QAAI,QAAQ,GAAG,KAAK,QAApB;AAAA,QACE,GAAG,GAAG,QAAQ,CAAC,MADjB;AAAA,QAEE,GAAG,GAAG,EAFR;AAAA,QAGE,CAHF;AAAA,QAIE,KAJF;AAAA,QAKE,MALF;AAAA,QAME,IANF;;AAQA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAhB,EAAqB,CAAC,EAAtB,EAA0B;AACxB,MAAA,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAhB;AACA,MAAA,MAAM,GAAG,KAAK,CAAC,MAAf;;AAGA,UAAI,MAAJ,EAAY;AACV,QAAA,IAAI,GAAG,KAAK,CAAC,IAAb;AACA,QAAA,GAAG,IAAI,MAAP;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,GAAG,IAAI,YAAP;AACD,SAFD,MAEO;AACL,cAAI,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC1B,YAAA,GAAG,IAAI,kBAAkB,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAArB,GAAwC,mBAA/C;AACD,WAFD,MAEO;AACL,gBAAI,OAAJ,EAAa;AACX,cAAA,IAAI,GAAG,IAAI,CAAC,GAAL,CAAU,CAAD,IACd,OAAO,CAAP,KAAa,QAAb,GAAwB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAxB,GAAwC,CADnC,CAAP;AAGD;;AACD,YAAA,GAAG,IAAI,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAb,GAAgC,WAAvC;AACD;AACF;AACF,OAjBD,MAiBO;AAEL,QAAA,GAAG,IAAI,KAAK,CAAC,QAAb;;AACA,YAAI,CAAC,OAAL,EAAc;AACZ,UAAA,GAAG,IAAI,MAAM,GAAG,KAAK,CAAC,GAAtB;AACD;AACF;;AAED,MAAA,GAAG,IAAI,SAAP;AACD;;AAED,WAAO,GAAP;AACD;;AAED,EAAA,UAAU,GAAA;AACR,SAAK,QAAL,GAAgB,EAAhB;AACD;;AACD,EAAA,MAAM,CAAC,GAAD,EAAI;AACR,QAAI,QAAQ,GAAG,KAAK,QAApB;AAAA,QACE,GADF;AAGA,IAAA,QAAQ,CAAC,IAAT,CAAc,GAAd;AACA,IAAA,GAAG,GAAG,QAAQ,CAAC,MAAf;;AAEA,QAAI,GAAG,IAAI,WAAX,EAAwB;AACtB,MAAA,QAAQ,CAAC,KAAT;AACD;AACF;;AAMD,EAAA,KAAK,GAAA;AACH,QAAI,UAAU,GAAG,KAAK,SAAL,GAAiB,aAAjB,EAAjB;AACA,SAAK,YAAL,CAAkB,IAAI,UAAtB,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,IAAI,UAA5C,EAAwD,CAAxD,EAA2D,CAA3D;AACD;;AAOD,EAAA,SAAS,GAAA;AACP,WAAO,KAAK,MAAZ;AACD;;AAWD,EAAA,KAAK,CAAC,MAAD,EAAQ;AACX,QAAI,MAAM,GAAG,KAAK,SAAL,EAAb;;AAEA,QAAI,MAAJ,EAAY;AACV,WAAK,SAAL,CACE,MAAM,CAAC,CAAP,IAAY,CADd,EAEE,MAAM,CAAC,CAAP,IAAY,CAFd,EAGE,MAAM,CAAC,KAAP,IAAgB,CAHlB,EAIE,MAAM,CAAC,MAAP,IAAiB,CAJnB;AAMD,KAPD,MAOO;AACL,WAAK,SAAL,CACE,CADF,EAEE,CAFF,EAGE,MAAM,CAAC,QAAP,KAAoB,MAAM,CAAC,UAH7B,EAIE,MAAM,CAAC,SAAP,KAAqB,MAAM,CAAC,UAJ9B;AAMD;AACF;;AACD,EAAA,aAAa,CAAC,KAAD,EAAM;AACjB,QAAI,OAAO,GAAG,KAAK,CAAC,UAAN,EAAd;;AACA,QAAI,OAAJ,EAAa;AACX,WAAK,OAAL,CAAa,SAAb,EAAwB,OAAxB;AACD;AACF;;AACD,EAAA,aAAa,CAAC,KAAD,EAAM;AACjB,QAAI,UAAU,GAAG,KAAK,CAAC,kBAAN,EAAjB;;AACA,QAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,WAAK,OAAL,CAAa,aAAb,EAA4B,UAA5B;AACD;AACF;;AACD,EAAA,cAAc,CAAC,KAAD,EAAa;AACzB,QAAI,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,QAA3B;;AACA,QAAI,QAAJ,EAAc;AACZ,WAAK,OAAL,CAAa,UAAb,EAAyB,QAAzB;AACD;AACF;;AAED,EAAA,OAAO,CAAC,IAAD,EAAO,GAAP,EAAU;AACf,SAAK,QAAL,CAAc,IAAd,IAAsB,GAAtB;AACD;;AAOD,EAAA,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAuB;AACxB,SAAK,QAAL,CAAc,GAAd,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC;AACD;;AAMD,EAAA,KAAK,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAmB;AACtB,SAAK,QAAL,CAAc,KAAd,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC;AACD;;AAMD,EAAA,SAAS,GAAA;AACP,SAAK,QAAL,CAAc,SAAd;AACD;;AAMD,EAAA,aAAa,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAuB;AAClC,SAAK,QAAL,CAAc,aAAd,CAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD;AACD;;AAMD,EAAA,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AACtB,SAAK,QAAL,CAAc,SAAd,CAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC;AACD;;AAMD,EAAA,IAAI,GAAA;AACF,SAAK,QAAL,CAAc,IAAd;AACD;;AAMD,EAAA,SAAS,GAAA;AACP,SAAK,QAAL,CAAc,SAAd;AACD;;AAMD,EAAA,eAAe,CAAC,EAAD,EAAK,EAAL,EAAO;AACpB,QAAI,CAAC,GAAG,SAAR;;AACA,QAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;AAClB,aAAO,KAAK,QAAL,CAAc,eAAd,CAA8B,EAA9B,EAAkC,EAAlC,CAAP;AACD,KAFD,MAEO,IAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;AACzB,aAAO,KAAK,QAAL,CAAc,eAAd,CAA8B,EAA9B,CAAP;AACD;AACF;;AAMD,EAAA,oBAAoB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AACjC,WAAO,KAAK,QAAL,CAAc,oBAAd,CAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,CAAP;AACD;;AAMD,EAAA,aAAa,CAAC,EAAD,EAAK,EAAL,EAAO;AAClB,WAAO,KAAK,QAAL,CAAc,aAAd,CAA4B,EAA5B,EAAgC,EAAhC,CAAP;AACD;;AAMD,EAAA,oBAAoB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAuB;AACzC,WAAO,KAAK,QAAL,CAAc,oBAAd,CAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,EAAvD,CAAP;AACD;;AAMD,EAAA,SAAS,CACP,EADO,EAEP,EAFO,EAGP,EAHO,EAIP,EAJO,EAKP,EALO,EAMP,EANO,EAOP,EAPO,EAQP,EARO,EASP,EATO,EASI;AAGX,QAAI,CAAC,GAAG,SAAR;AAAA,QACE,QAAQ,GAAG,KAAK,QADlB;;AAEA,QAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;AAClB,MAAA,QAAQ,CAAC,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B;AACD,KAFD,MAEO,IAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;AACzB,MAAA,QAAQ,CAAC,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC;AACD,KAFM,MAEA,IAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;AACzB,MAAA,QAAQ,CAAC,SAAT,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD;AACD;AACF;;AAMD,EAAA,OAAO,CACL,EADK,EAEL,EAFK,EAGL,EAHK,EAIL,EAJK,EAKL,EALK,EAML,EANK,EAOL,EAPK,EAQL,EARK,EAQO;AAEZ,SAAK,QAAL,CAAc,OAAd,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,EAA9C,EAAkD,EAAlD;AACD;;AAMD,EAAA,aAAa,CAAC,CAAD,EAAI,CAAJ,EAAK;AAChB,WAAO,KAAK,QAAL,CAAc,aAAd,CAA4B,CAA5B,EAA+B,CAA/B,CAAP;AACD;;AAMD,EAAA,IAAI,CAAC,MAAD,EAAgB;AAClB,QAAI,MAAJ,EAAY;AACV,WAAK,QAAL,CAAc,IAAd,CAAmB,MAAnB;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,IAAd;AACD;AACF;;AAMD,EAAA,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAc,MAAd,EAAoB;AAC1B,SAAK,QAAL,CAAc,QAAd,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAA7B,EAAoC,MAApC;AACD;;AAMD,EAAA,UAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAc,MAAd,EAAoB;AAC5B,SAAK,QAAL,CAAc,UAAd,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,KAA/B,EAAsC,MAAtC;AACD;;AAMD,EAAA,QAAQ,CAAC,IAAD,EAAe,CAAf,EAA0B,CAA1B,EAAqC,QAArC,EAAsD;AAC5D,QAAI,QAAJ,EAAc;AACZ,WAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,QAAnC;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,EAA6B,CAA7B,EAAgC,CAAhC;AACD;AACF;;AAMD,EAAA,WAAW,CAAC,IAAD,EAAK;AACd,WAAO,KAAK,QAAL,CAAc,WAAd,CAA0B,IAA1B,CAAP;AACD;;AAMD,EAAA,YAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AACzB,WAAO,KAAK,QAAL,CAAc,YAAd,CAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,CAAP;AACD;;AAMD,EAAA,MAAM,CAAC,EAAD,EAAK,EAAL,EAAO;AACX,SAAK,QAAL,CAAc,MAAd,CAAqB,EAArB,EAAyB,EAAzB;AACD;;AAMD,EAAA,MAAM,CAAC,EAAD,EAAK,EAAL,EAAO;AACX,SAAK,QAAL,CAAc,MAAd,CAAqB,EAArB,EAAyB,EAAzB;AACD;;AAMD,EAAA,IAAI,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AACjB,SAAK,QAAL,CAAc,IAAd,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B;AACD;;AAMD,EAAA,YAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAW;AACrB,SAAK,QAAL,CAAc,YAAd,CAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC;AACD;;AAMD,EAAA,gBAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AAC7B,SAAK,QAAL,CAAc,gBAAd,CAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C;AACD;;AAMD,EAAA,OAAO,GAAA;AACL,SAAK,QAAL,CAAc,OAAd;AACD;;AAMD,EAAA,MAAM,CAAC,EAAD,EAAG;AACP,SAAK,QAAL,CAAc,MAAd,CAAqB,EAArB;AACD;;AAMD,EAAA,IAAI,GAAA;AACF,SAAK,QAAL,CAAc,IAAd;AACD;;AAMD,EAAA,KAAK,CAAC,EAAD,EAAK,EAAL,EAAO;AACV,SAAK,QAAL,CAAc,KAAd,CAAoB,EAApB,EAAwB,EAAxB;AACD;;AAMD,EAAA,WAAW,CAAC,EAAD,EAAG;AAEZ,QAAI,KAAK,QAAL,CAAc,WAAlB,EAA+B;AAC7B,WAAK,QAAL,CAAc,WAAd,CAA0B,EAA1B;AACD,KAFD,MAEO,IAAI,aAAa,KAAK,QAAtB,EAAgC;AAE/B,WAAK,QAAL,CAAc,SAAd,IAA4B,EAA5B;AACP,KAHM,MAGA,IAAI,oBAAoB,KAAK,QAA7B,EAAuC;AAEtC,WAAK,QAAL,CAAc,gBAAd,IAAmC,EAAnC;AACP;AAGF;;AAMD,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,QAAL,CAAc,WAAd,EAAP;AACD;;AAMD,EAAA,YAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAuB;AACjC,SAAK,QAAL,CAAc,YAAd,CAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C;AACD;;AAMD,EAAA,MAAM,CAAC,MAAD,EAAgB;AACpB,QAAI,MAAJ,EAAY;AACV,WAAK,QAAL,CAAc,MAAd,CAAqB,MAArB;AACD,KAFD,MAEO;AACL,WAAK,QAAL,CAAc,MAAd;AACD;AACF;;AAMD,EAAA,UAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAe;AACvB,SAAK,QAAL,CAAc,UAAd,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC;AACD;;AAMD,EAAA,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAuB;AAC9B,SAAK,QAAL,CAAc,SAAd,CAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C;AACD;;AAMD,EAAA,SAAS,CAAC,EAAD,EAAK,EAAL,EAAO;AACd,SAAK,QAAL,CAAc,SAAd,CAAwB,EAAxB,EAA4B,EAA5B;AACD;;AACD,EAAA,YAAY,GAAA;AACV,QAAI,IAAI,GAAG,IAAX;AAAA,QACE,GAAG,GAAG,eAAe,CAAC,MADxB;AAAA,QAEE,UAAU,GAAG,KAAK,OAFpB;AAAA,QAGE,CAHF;AAAA,QAIE,IAJF;;AAOA,QAAI,IAAI,GAAG,UAAU,UAAV,EAAoB;AAC7B,UAAI,UAAU,GAAG,IAAI,CAAC,UAAD,CAArB;AAAA,UACE,GADF;;AAGA,MAAA,IAAI,CAAC,UAAD,CAAJ,GAAmB,YAAA;AACjB,QAAA,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAD,CAApB;AACA,QAAA,GAAG,GAAG,UAAU,CAAC,KAAX,CAAiB,IAAjB,EAAuB,SAAvB,CAAN;;AAEA,QAAA,IAAI,CAAC,MAAL,CAAY;AACV,UAAA,MAAM,EAAE,UADE;AAEV,UAAA,IAAI,EAAE;AAFI,SAAZ;;AAKA,eAAO,GAAP;AACD,OAVD;AAWD,KAfD;;AAiBA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,GAAhB,EAAqB,CAAC,EAAtB,EAA0B;AACxB,MAAA,IAAI,CAAC,eAAe,CAAC,CAAD,CAAhB,CAAJ;AACD;;AAGD,IAAA,IAAI,CAAC,OAAL,GAAe,YAAA;AACb,MAAA,UAAU,CAAC,KAAX,CAAiB,IAAjB,EAAuB,SAAvB;AACA,UAAI,IAAI,GAAG,SAAS,CAAC,CAAD,CAApB;AACA,UAAI,GAAG,GAAG,SAAS,CAAC,CAAD,CAAnB;;AACA,UACE,IAAI,KAAK,eAAT,IACA,IAAI,KAAK,eADT,IAEA,IAAI,KAAK,YAHX,EAIE;AACA,QAAA,GAAG,GAAG,GAAG,GAAG,KAAK,MAAL,CAAY,aAAZ,EAAZ;AACD;;AACD,MAAA,IAAI,CAAC,MAAL,CAAY;AACV,QAAA,QAAQ,EAAE,IADA;AAEV,QAAA,GAAG,EAAE;AAFK,OAAZ;AAID,KAfD;AAgBD;;AACD,EAAA,8BAA8B,CAAC,IAAD,EAAK;AACjC,UAAM,EAAE,GAAG,IAAI,CAAC,KAAL,CAAW,wBAAtB;AACA,QAAI,GAAG,GAAG,CAAC,EAAD,IAAO,EAAE,KAAK,aAAxB;;AACA,QAAI,CAAC,GAAL,EAAU;AACR,WAAK,OAAL,CAAa,0BAAb,EAAyC,EAAzC;AACD;AACF;;AA5kBiB;AA+kBpB,kBAAkB,CAAC,OAAnB,CAA2B,UAAU,IAAV,EAAc;AACvC,EAAA,MAAM,CAAC,cAAP,CAAsB,OAAO,CAAC,SAA9B,EAAyC,IAAzC,EAA+C;AAC7C,IAAA,GAAG,GAAA;AACD,aAAO,KAAK,QAAL,CAAc,IAAd,CAAP;AACD,KAH4C;;AAI7C,IAAA,GAAG,CAAC,GAAD,EAAI;AACL,WAAK,QAAL,CAAc,IAAd,IAAsB,GAAtB;AACD;;AAN4C,GAA/C;AAQD,CATD;AAWA,OAAM,MAAO,YAAP,SAA4B,OAA5B,CAAmC;AACvC,EAAA,UAAU,CAAC,KAAD,EAAa;AACrB,QAAI,IAAI,GAAG,KAAK,CAAC,IAAN,EAAX;AAEA,SAAK,OAAL,CAAa,WAAb,EAA0B,IAA1B;;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACD;;AACD,EAAA,YAAY,CAAC,KAAD,EAAM;AAChB,SAAK,OAAL,CAAa,WAAb,EAA0B,KAAK,CAAC,eAAN,EAA1B;;AACA,IAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACD;;AACD,EAAA,mBAAmB,CAAC,KAAD,EAAM;AACvB,QAAI,GAAG,GAAG,KAAK,CAAC,kBAAN,EAAV;;AAEA,QAAI,GAAJ,EAAS;AACP,WAAK,OAAL,CAAa,WAAb,EAA0B,GAA1B;;AACA,MAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACD;AACF;;AACD,EAAA,mBAAmB,CAAC,KAAD,EAAM;AACvB,QAAI,GAAG,GAAG,KAAK,CAAC,kBAAN,EAAV;;AACA,QAAI,GAAJ,EAAS;AACP,WAAK,OAAL,CAAa,WAAb,EAA0B,GAA1B;;AACA,MAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACD;AACF;;AACD,EAAA,KAAK,CAAC,KAAD,EAAM;AACT,QAAI,QAAQ,GAAG,KAAK,CAAC,IAAN,EAAf;AAAA,QACE,YAAY,GAAG,KAAK,CAAC,eAAN,EADjB;;AAIA,QAAI,QAAQ,IAAI,YAAY,KAAK,OAAjC,EAA0C;AACxC,WAAK,UAAL,CAAgB,KAAhB;;AACA;AACD;;AAED,QAAI,UAAU,GAAG,KAAK,CAAC,mBAAN,EAAjB;;AACA,QAAI,UAAU,IAAI,YAAY,KAAK,SAAnC,EAA8C;AAC5C,WAAK,YAAL,CAAkB,KAAlB;;AACA;AACD;;AAED,QAAI,iBAAiB,GAAG,KAAK,CAAC,+BAAN,EAAxB;;AACA,QAAI,iBAAiB,IAAI,YAAY,KAAK,iBAA1C,EAA6D;AAC3D,WAAK,mBAAL,CAAyB,KAAzB;;AACA;AACD;;AAED,QAAI,iBAAiB,GAAG,KAAK,CAAC,+BAAN,EAAxB;;AACA,QAAI,iBAAiB,IAAI,YAAY,KAAK,iBAA1C,EAA6D;AAC3D,WAAK,mBAAL,CAAyB,KAAzB;;AACA;AACD;;AAGD,QAAI,QAAJ,EAAc;AACZ,WAAK,UAAL,CAAgB,KAAhB;AACD,KAFD,MAEO,IAAI,UAAJ,EAAgB;AACrB,WAAK,YAAL,CAAkB,KAAlB;AACD,KAFM,MAEA,IAAI,iBAAJ,EAAuB;AAC5B,WAAK,mBAAL,CAAyB,KAAzB;AACD,KAFM,MAEA,IAAI,iBAAJ,EAAuB;AAC5B,WAAK,mBAAL,CAAyB,KAAzB;AACD;AACF;;AACD,EAAA,qBAAqB,CAAC,KAAD,EAAM;AACzB,QAAI,KAAK,GAAG,KAAK,CAAC,iCAAN,EAAZ;AAAA,QACE,GAAG,GAAG,KAAK,CAAC,+BAAN,EADR;AAAA,QAEE,UAAU,GAAG,KAAK,CAAC,iCAAN,EAFf;AAAA,QAGE,GAAG,GAAG,KAAK,oBAAL,CAA0B,KAAK,CAAC,CAAhC,EAAmC,KAAK,CAAC,CAAzC,EAA4C,GAAG,CAAC,CAAhD,EAAmD,GAAG,CAAC,CAAvD,CAHR;;AAKA,QAAI,UAAJ,EAAgB;AAEd,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,IAAI,CAA5C,EAA+C;AAC7C,QAAA,GAAG,CAAC,YAAJ,CAAiB,UAAU,CAAC,CAAD,CAA3B,EAAgC,UAAU,CAAC,CAAC,GAAG,CAAL,CAA1C;AACD;;AACD,WAAK,OAAL,CAAa,aAAb,EAA4B,GAA5B;AACD;AACF;;AACD,EAAA,OAAO,CAAC,KAAD,EAAM;AACX,QAAI,IAAI,GAAG,KAAK,CAAC,IAAN,EAAX;AAAA,QAEE,kBAAkB,GAAG,KAAK,CAAC,qBAAN,EAFvB;;AAIA,QAAI,KAAK,CAAC,SAAN,EAAJ,EAAuB;AACrB,UAAI,CAAC,kBAAL,EAAyB;AACvB,aAAK,IAAL;AACA,YAAI,UAAU,GAAG,KAAK,SAAL,GAAiB,aAAjB,EAAjB;AACA,aAAK,YAAL,CAAkB,UAAlB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,UAApC,EAAgD,CAAhD,EAAmD,CAAnD;AACD;;AAED,WAAK,aAAL,CAAmB,KAAnB;;AACA,UAAI,IAAI,IAAI,KAAK,CAAC,WAAN,EAAZ,EAAiC;AAC/B,aAAK,WAAL,CAAiB,IAAjB;AACA,aAAK,OAAL,CAAa,gBAAb,EAA+B,KAAK,CAAC,UAAN,EAA/B;AACD;;AAED,WAAK,OAAL,CAAa,WAAb,EAA0B,KAAK,CAAC,WAAN,EAA1B;;AAEA,UAAI,CAAC,KAAK,CAAC,yBAAN,EAAL,EAAwC;AACtC,aAAK,OAAL,CAAa,aAAb,EAA4B,eAA5B;AACD;;AAED,UAAI,iBAAiB,GAAG,KAAK,CAAC,iCAAN,EAAxB;;AACA,UAAI,iBAAJ,EAAuB;AACrB,aAAK,qBAAL,CAA2B,KAA3B;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,aAAb,EAA4B,KAAK,CAAC,MAAN,EAA5B;AACD;;AAED,MAAA,KAAK,CAAC,WAAN,CAAkB,IAAlB;;AAEA,UAAI,CAAC,kBAAL,EAAyB;AACvB,aAAK,OAAL;AACD;AACF;AACF;;AACD,EAAA,YAAY,CAAC,KAAD,EAAM;;;AAChB,QAAI,KAAK,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,aAAN,EAAA,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,OAArC;AAAA,QACE,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,aAAN,EAAA,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,CADlC;AAAA,QAEE,MAAM,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,eAAN,EAAA,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,EAAvB,GAA2B;AAClC,MAAA,CAAC,EAAE,CAD+B;AAElC,MAAA,CAAC,EAAE;AAF+B,KAFtC;AAAA,QAME,KAAK,GAAG,KAAK,CAAC,gBAAN,EANV;AAAA,QAOE,KAAK,GAAG,KAAK,MAAL,CAAY,aAAZ,EAPV;AAAA,QAQE,MAAM,GAAG,KAAK,CAAC,CAAN,GAAU,KARrB;AAAA,QASE,MAAM,GAAG,KAAK,CAAC,CAAN,GAAU,KATrB;AAWA,SAAK,OAAL,CAAa,aAAb,EAA4B,KAA5B;AACA,SAAK,OAAL,CACE,YADF,EAEE,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,MAAT,CAAT,EAA2B,IAAI,CAAC,GAAL,CAAS,MAAT,CAA3B,CAFT;AAIA,SAAK,OAAL,CAAa,eAAb,EAA8B,MAAM,CAAC,CAAP,GAAW,MAAzC;AACA,SAAK,OAAL,CAAa,eAAb,EAA8B,MAAM,CAAC,CAAP,GAAW,MAAzC;AACD;;AAxIsC;AA2IzC,OAAM,MAAO,UAAP,SAA0B,OAA1B,CAAiC;AACrC,EAAA,KAAK,CAAC,KAAD,EAAM;AACT,SAAK,IAAL;AACA,SAAK,OAAL,CAAa,WAAb,EAA0B,KAAK,CAAC,QAAhC;;AACA,IAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB;;AACA,SAAK,OAAL;AACD;;AACD,EAAA,WAAW,CAAC,KAAD,EAAa;AACtB,QAAI,KAAK,CAAC,YAAN,EAAJ,EAA0B;AACxB,WAAK,OAAL,CAAa,KAAb;AACD;AACF;;AACD,EAAA,OAAO,CAAC,KAAD,EAAM;AACX,QAAI,KAAK,CAAC,YAAN,EAAJ,EAA0B;AAExB,UAAI,kBAAkB,GAAG,KAAK,CAAC,qBAAN,EAAzB;;AACA,UAAI,CAAC,kBAAL,EAAyB;AACvB,aAAK,IAAL;AACA,YAAI,UAAU,GAAG,KAAK,SAAL,GAAiB,aAAjB,EAAjB;AACA,aAAK,YAAL,CAAkB,UAAlB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,UAApC,EAAgD,CAAhD,EAAmD,CAAnD;AACD;;AACD,WAAK,aAAL,CAAmB,KAAnB;;AAEA,UAAI,cAAc,GAAG,KAAK,CAAC,cAAN,EAArB;AACA,UAAI,WAAW,GACb,cAAc,KAAK,MAAnB,GAA4B,KAAK,CAAC,WAAN,EAA5B,GAAkD,cADpD;AAGA,WAAK,OAAL,CAAa,WAAb,EAA0B,WAA1B;AACA,WAAK,OAAL,CAAa,aAAb,EAA4B,KAAK,CAAC,QAAlC;;AACA,MAAA,KAAK,CAAC,cAAN,CAAqB,IAArB;;AACA,UAAI,CAAC,kBAAL,EAAyB;AACvB,aAAK,OAAL;AACD;AACF;AACF;;AAlCoC","sourceRoot":"","sourcesContent":["import { Util } from './Util.js';\nimport { Konva } from './Global.js';\nfunction simplifyArray(arr) {\n    var retArr = [], len = arr.length, util = Util, n, val;\n    for (n = 0; n < len; n++) {\n        val = arr[n];\n        if (util._isNumber(val)) {\n            val = Math.round(val * 1000) / 1000;\n        }\n        else if (!util._isString(val)) {\n            val = val + '';\n        }\n        retArr.push(val);\n    }\n    return retArr;\n}\nvar COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [\n    'arc',\n    'arcTo',\n    'beginPath',\n    'bezierCurveTo',\n    'clearRect',\n    'clip',\n    'closePath',\n    'createLinearGradient',\n    'createPattern',\n    'createRadialGradient',\n    'drawImage',\n    'ellipse',\n    'fill',\n    'fillText',\n    'getImageData',\n    'createImageData',\n    'lineTo',\n    'moveTo',\n    'putImageData',\n    'quadraticCurveTo',\n    'rect',\n    'restore',\n    'rotate',\n    'save',\n    'scale',\n    'setLineDash',\n    'setTransform',\n    'stroke',\n    'strokeText',\n    'transform',\n    'translate',\n];\nvar CONTEXT_PROPERTIES = [\n    'fillStyle',\n    'strokeStyle',\n    'shadowColor',\n    'shadowBlur',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'lineCap',\n    'lineDashOffset',\n    'lineJoin',\n    'lineWidth',\n    'miterLimit',\n    'font',\n    'textAlign',\n    'textBaseline',\n    'globalAlpha',\n    'globalCompositeOperation',\n    'imageSmoothingEnabled',\n];\nconst traceArrMax = 100;\nexport class Context {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this._context = canvas._canvas.getContext('2d');\n        if (Konva.enableTrace) {\n            this.traceArr = [];\n            this._enableTrace();\n        }\n    }\n    fillShape(shape) {\n        if (shape.fillEnabled()) {\n            this._fill(shape);\n        }\n    }\n    _fill(shape) {\n    }\n    strokeShape(shape) {\n        if (shape.hasStroke()) {\n            this._stroke(shape);\n        }\n    }\n    _stroke(shape) {\n    }\n    fillStrokeShape(shape) {\n        if (shape.attrs.fillAfterStrokeEnabled) {\n            this.strokeShape(shape);\n            this.fillShape(shape);\n        }\n        else {\n            this.fillShape(shape);\n            this.strokeShape(shape);\n        }\n    }\n    getTrace(relaxed, rounded) {\n        var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;\n        for (n = 0; n < len; n++) {\n            trace = traceArr[n];\n            method = trace.method;\n            if (method) {\n                args = trace.args;\n                str += method;\n                if (relaxed) {\n                    str += DOUBLE_PAREN;\n                }\n                else {\n                    if (Util._isArray(args[0])) {\n                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n                    }\n                    else {\n                        if (rounded) {\n                            args = args.map((a) => typeof a === 'number' ? Math.floor(a) : a);\n                        }\n                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n                    }\n                }\n            }\n            else {\n                str += trace.property;\n                if (!relaxed) {\n                    str += EQUALS + trace.val;\n                }\n            }\n            str += SEMICOLON;\n        }\n        return str;\n    }\n    clearTrace() {\n        this.traceArr = [];\n    }\n    _trace(str) {\n        var traceArr = this.traceArr, len;\n        traceArr.push(str);\n        len = traceArr.length;\n        if (len >= traceArrMax) {\n            traceArr.shift();\n        }\n    }\n    reset() {\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    clear(bounds) {\n        var canvas = this.getCanvas();\n        if (bounds) {\n            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n        }\n        else {\n            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n        }\n    }\n    _applyLineCap(shape) {\n        var lineCap = shape.getLineCap();\n        if (lineCap) {\n            this.setAttr('lineCap', lineCap);\n        }\n    }\n    _applyOpacity(shape) {\n        var absOpacity = shape.getAbsoluteOpacity();\n        if (absOpacity !== 1) {\n            this.setAttr('globalAlpha', absOpacity);\n        }\n    }\n    _applyLineJoin(shape) {\n        var lineJoin = shape.attrs.lineJoin;\n        if (lineJoin) {\n            this.setAttr('lineJoin', lineJoin);\n        }\n    }\n    setAttr(attr, val) {\n        this._context[attr] = val;\n    }\n    arc(a0, a1, a2, a3, a4, a5) {\n        this._context.arc(a0, a1, a2, a3, a4, a5);\n    }\n    arcTo(a0, a1, a2, a3, a4) {\n        this._context.arcTo(a0, a1, a2, a3, a4);\n    }\n    beginPath() {\n        this._context.beginPath();\n    }\n    bezierCurveTo(a0, a1, a2, a3, a4, a5) {\n        this._context.bezierCurveTo(a0, a1, a2, a3, a4, a5);\n    }\n    clearRect(a0, a1, a2, a3) {\n        this._context.clearRect(a0, a1, a2, a3);\n    }\n    clip() {\n        this._context.clip();\n    }\n    closePath() {\n        this._context.closePath();\n    }\n    createImageData(a0, a1) {\n        var a = arguments;\n        if (a.length === 2) {\n            return this._context.createImageData(a0, a1);\n        }\n        else if (a.length === 1) {\n            return this._context.createImageData(a0);\n        }\n    }\n    createLinearGradient(a0, a1, a2, a3) {\n        return this._context.createLinearGradient(a0, a1, a2, a3);\n    }\n    createPattern(a0, a1) {\n        return this._context.createPattern(a0, a1);\n    }\n    createRadialGradient(a0, a1, a2, a3, a4, a5) {\n        return this._context.createRadialGradient(a0, a1, a2, a3, a4, a5);\n    }\n    drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        var a = arguments, _context = this._context;\n        if (a.length === 3) {\n            _context.drawImage(a0, a1, a2);\n        }\n        else if (a.length === 5) {\n            _context.drawImage(a0, a1, a2, a3, a4);\n        }\n        else if (a.length === 9) {\n            _context.drawImage(a0, a1, a2, a3, a4, a5, a6, a7, a8);\n        }\n    }\n    ellipse(a0, a1, a2, a3, a4, a5, a6, a7) {\n        this._context.ellipse(a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n    isPointInPath(x, y) {\n        return this._context.isPointInPath(x, y);\n    }\n    fill(path2d) {\n        if (path2d) {\n            this._context.fill(path2d);\n        }\n        else {\n            this._context.fill();\n        }\n    }\n    fillRect(x, y, width, height) {\n        this._context.fillRect(x, y, width, height);\n    }\n    strokeRect(x, y, width, height) {\n        this._context.strokeRect(x, y, width, height);\n    }\n    fillText(text, x, y, maxWidth) {\n        if (maxWidth) {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n        else {\n            this._context.fillText(text, x, y);\n        }\n    }\n    measureText(text) {\n        return this._context.measureText(text);\n    }\n    getImageData(a0, a1, a2, a3) {\n        return this._context.getImageData(a0, a1, a2, a3);\n    }\n    lineTo(a0, a1) {\n        this._context.lineTo(a0, a1);\n    }\n    moveTo(a0, a1) {\n        this._context.moveTo(a0, a1);\n    }\n    rect(a0, a1, a2, a3) {\n        this._context.rect(a0, a1, a2, a3);\n    }\n    putImageData(a0, a1, a2) {\n        this._context.putImageData(a0, a1, a2);\n    }\n    quadraticCurveTo(a0, a1, a2, a3) {\n        this._context.quadraticCurveTo(a0, a1, a2, a3);\n    }\n    restore() {\n        this._context.restore();\n    }\n    rotate(a0) {\n        this._context.rotate(a0);\n    }\n    save() {\n        this._context.save();\n    }\n    scale(a0, a1) {\n        this._context.scale(a0, a1);\n    }\n    setLineDash(a0) {\n        if (this._context.setLineDash) {\n            this._context.setLineDash(a0);\n        }\n        else if ('mozDash' in this._context) {\n            this._context['mozDash'] = a0;\n        }\n        else if ('webkitLineDash' in this._context) {\n            this._context['webkitLineDash'] = a0;\n        }\n    }\n    getLineDash() {\n        return this._context.getLineDash();\n    }\n    setTransform(a0, a1, a2, a3, a4, a5) {\n        this._context.setTransform(a0, a1, a2, a3, a4, a5);\n    }\n    stroke(path2d) {\n        if (path2d) {\n            this._context.stroke(path2d);\n        }\n        else {\n            this._context.stroke();\n        }\n    }\n    strokeText(a0, a1, a2, a3) {\n        this._context.strokeText(a0, a1, a2, a3);\n    }\n    transform(a0, a1, a2, a3, a4, a5) {\n        this._context.transform(a0, a1, a2, a3, a4, a5);\n    }\n    translate(a0, a1) {\n        this._context.translate(a0, a1);\n    }\n    _enableTrace() {\n        var that = this, len = CONTEXT_METHODS.length, origSetter = this.setAttr, n, args;\n        var func = function (methodName) {\n            var origMethod = that[methodName], ret;\n            that[methodName] = function () {\n                args = simplifyArray(Array.prototype.slice.call(arguments, 0));\n                ret = origMethod.apply(that, arguments);\n                that._trace({\n                    method: methodName,\n                    args: args,\n                });\n                return ret;\n            };\n        };\n        for (n = 0; n < len; n++) {\n            func(CONTEXT_METHODS[n]);\n        }\n        that.setAttr = function () {\n            origSetter.apply(that, arguments);\n            var prop = arguments[0];\n            var val = arguments[1];\n            if (prop === 'shadowOffsetX' ||\n                prop === 'shadowOffsetY' ||\n                prop === 'shadowBlur') {\n                val = val / this.canvas.getPixelRatio();\n            }\n            that._trace({\n                property: prop,\n                val: val,\n            });\n        };\n    }\n    _applyGlobalCompositeOperation(node) {\n        const op = node.attrs.globalCompositeOperation;\n        var def = !op || op === 'source-over';\n        if (!def) {\n            this.setAttr('globalCompositeOperation', op);\n        }\n    }\n}\nCONTEXT_PROPERTIES.forEach(function (prop) {\n    Object.defineProperty(Context.prototype, prop, {\n        get() {\n            return this._context[prop];\n        },\n        set(val) {\n            this._context[prop] = val;\n        },\n    });\n});\nexport class SceneContext extends Context {\n    _fillColor(shape) {\n        var fill = shape.fill();\n        this.setAttr('fillStyle', fill);\n        shape._fillFunc(this);\n    }\n    _fillPattern(shape) {\n        this.setAttr('fillStyle', shape._getFillPattern());\n        shape._fillFunc(this);\n    }\n    _fillLinearGradient(shape) {\n        var grd = shape._getLinearGradient();\n        if (grd) {\n            this.setAttr('fillStyle', grd);\n            shape._fillFunc(this);\n        }\n    }\n    _fillRadialGradient(shape) {\n        var grd = shape._getRadialGradient();\n        if (grd) {\n            this.setAttr('fillStyle', grd);\n            shape._fillFunc(this);\n        }\n    }\n    _fill(shape) {\n        var hasColor = shape.fill(), fillPriority = shape.getFillPriority();\n        if (hasColor && fillPriority === 'color') {\n            this._fillColor(shape);\n            return;\n        }\n        var hasPattern = shape.getFillPatternImage();\n        if (hasPattern && fillPriority === 'pattern') {\n            this._fillPattern(shape);\n            return;\n        }\n        var hasLinearGradient = shape.getFillLinearGradientColorStops();\n        if (hasLinearGradient && fillPriority === 'linear-gradient') {\n            this._fillLinearGradient(shape);\n            return;\n        }\n        var hasRadialGradient = shape.getFillRadialGradientColorStops();\n        if (hasRadialGradient && fillPriority === 'radial-gradient') {\n            this._fillRadialGradient(shape);\n            return;\n        }\n        if (hasColor) {\n            this._fillColor(shape);\n        }\n        else if (hasPattern) {\n            this._fillPattern(shape);\n        }\n        else if (hasLinearGradient) {\n            this._fillLinearGradient(shape);\n        }\n        else if (hasRadialGradient) {\n            this._fillRadialGradient(shape);\n        }\n    }\n    _strokeLinearGradient(shape) {\n        var start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n        if (colorStops) {\n            for (var n = 0; n < colorStops.length; n += 2) {\n                grd.addColorStop(colorStops[n], colorStops[n + 1]);\n            }\n            this.setAttr('strokeStyle', grd);\n        }\n    }\n    _stroke(shape) {\n        var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();\n        if (shape.hasStroke()) {\n            if (!strokeScaleEnabled) {\n                this.save();\n                var pixelRatio = this.getCanvas().getPixelRatio();\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            }\n            this._applyLineCap(shape);\n            if (dash && shape.dashEnabled()) {\n                this.setLineDash(dash);\n                this.setAttr('lineDashOffset', shape.dashOffset());\n            }\n            this.setAttr('lineWidth', shape.strokeWidth());\n            if (!shape.getShadowForStrokeEnabled()) {\n                this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n            }\n            var hasLinearGradient = shape.getStrokeLinearGradientColorStops();\n            if (hasLinearGradient) {\n                this._strokeLinearGradient(shape);\n            }\n            else {\n                this.setAttr('strokeStyle', shape.stroke());\n            }\n            shape._strokeFunc(this);\n            if (!strokeScaleEnabled) {\n                this.restore();\n            }\n        }\n    }\n    _applyShadow(shape) {\n        var _a, _b, _c;\n        var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black', blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5, offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\n            x: 0,\n            y: 0,\n        }, scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;\n        this.setAttr('shadowColor', color);\n        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\n        this.setAttr('shadowOffsetX', offset.x * scaleX);\n        this.setAttr('shadowOffsetY', offset.y * scaleY);\n    }\n}\nexport class HitContext extends Context {\n    _fill(shape) {\n        this.save();\n        this.setAttr('fillStyle', shape.colorKey);\n        shape._fillFuncHit(this);\n        this.restore();\n    }\n    strokeShape(shape) {\n        if (shape.hasHitStroke()) {\n            this._stroke(shape);\n        }\n    }\n    _stroke(shape) {\n        if (shape.hasHitStroke()) {\n            var strokeScaleEnabled = shape.getStrokeScaleEnabled();\n            if (!strokeScaleEnabled) {\n                this.save();\n                var pixelRatio = this.getCanvas().getPixelRatio();\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            }\n            this._applyLineCap(shape);\n            var hitStrokeWidth = shape.hitStrokeWidth();\n            var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\n            this.setAttr('lineWidth', strokeWidth);\n            this.setAttr('strokeStyle', shape.colorKey);\n            shape._strokeFuncHit(this);\n            if (!strokeScaleEnabled) {\n                this.restore();\n            }\n        }\n    }\n}\n//# sourceMappingURL=Context.js.map"]},"metadata":{},"sourceType":"module"}