{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\Inventory\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useRef, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Box, Button, Link, useDisclosure, Alert, AlertIcon, AlertDescription } from '@chakra-ui/react';\nimport readXlsxFile from 'read-excel-file';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport { useRouteMatch, Switch, Route, Link as ReactLink } from 'react-router-dom';\nimport DynamicTable from '../../components/DynamicTable';\nimport ModifiedTableTop, { generateInput } from '../../components/TableTop/ModifiedTableTop';\nimport SimpleModal from '../../components/Modal';\nimport withToast from '../../HOCs/withToast';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport getCamelCase from '../../utils/getCamelCase';\nimport { selectGlobalState } from '../../globalSlice';\nimport { Select as MultiSelect } from 'chakra-react-select';\nimport messages from './messages';\nimport { getAllStock, selectInventory, uploadStock, getBranchStocks } from './slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst selectBranch = {\n  title: 'Select Branch',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'groupBy',\n  fullWidth: true,\n  options: []\n};\nconst mapSelect = [\n/*  {\r\n   title: 'Location Code',\r\n   type: 'select',\r\n   placeholder: 'Select option',\r\n   name: 'locationCode',\r\n   isDisabled: false,\r\n   fullWidth: true,\r\n   defaultValue: {\r\n     value: 'Loc Code',\r\n     label: 'Loc Code',\r\n   },\r\n   options: [\r\n     {\r\n       value: 'none',\r\n       label: 'None',\r\n     },\r\n     {\r\n       value: 'Loc Code',\r\n       label: 'Loc Code',\r\n     },\r\n   ],\r\n }, */\n{\n  title: 'Part Number',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'partNumber',\n  fullWidth: true,\n  options: [{\n    value: 'none',\n    label: 'None'\n  }, {\n    value: 'Loc Code',\n    label: 'Loc Code'\n  }]\n},\n/*  {\r\n   title: 'Batch Code',\r\n   type: 'select',\r\n   placeholder: 'Select option',\r\n   name: 'batchCode',\r\n   fullWidth: true,\r\n   options: [\r\n     {\r\n       value: 'none',\r\n       label: 'None',\r\n     },\r\n     {\r\n       value: 'Loc Code',\r\n       label: 'Loc Code',\r\n     },\r\n   ],\r\n }, */\n{\n  title: 'Quantity',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'quantity',\n  fullWidth: true,\n  options: [{\n    value: 'none',\n    label: 'None'\n  }, {\n    value: 'Loc Code',\n    label: 'Loc Code'\n  }]\n}, {\n  title: 'Price',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'price',\n  fullWidth: true,\n  options: [{\n    value: 'none',\n    label: 'None'\n  }, {\n    value: 'Loc Code',\n    label: 'Loc Code'\n  }]\n}, {\n  title: 'Bin Location',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'binLocation',\n  fullWidth: true,\n  options: [{\n    value: 'none',\n    label: 'None'\n  }, {\n    value: 'Loc Code',\n    label: 'Loc Code'\n  }]\n}];\n\nconst Inventory = _ref => {\n  _s();\n\n  let {\n    notification\n  } = _ref;\n  const [inputValues, setInputValue] = useState({\n    start: moment().format('DD-MM-YYYY'),\n    end: moment().startOf('month').format('DD-MM-YYYY')\n  });\n  const intl = useIntl();\n  const importExcelRef = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    allStock\n  } = useSelector(selectInventory);\n  const [batchinventoryList, setBatchinventoryList] = useState({\n    part: {},\n    batchinventory: []\n  });\n  const auth = useSelector(state => state.auth);\n  const dispatcher = useDispatch();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const [tableLoading, setTableLoading] = useState(false);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    isOpen: mapingModalOpen,\n    onOpen: onMapingModalOpen,\n    onClose: onMapingModalClose\n  } = useDisclosure();\n  const {\n    isOpen: stockDataOpen,\n    onOpen: onStockDataOpen,\n    onClose: onStockDataClose\n  } = useDisclosure();\n  const {\n    isOpen: openSingleEntryDetail,\n    onOpen: onOpenSingleEntryDetail,\n    onClose: onCloseSingleEntryDetail\n  } = useDisclosure();\n  const [selectbranchComponent, setSelectbranchComponent] = useState(selectBranch);\n  const [selectedBranch, setSelectBranch] = useState({});\n  const [mappingSelectState, setMapingSelectState] = useState(mapSelect);\n  const [processingImport, setProcessingImport] = useState(false);\n  const [rawImportedData, setRawImportedData] = useState([]);\n  const [mapKeys, setMapKey] = useState({});\n  const [processedImportedData, setProcessedImportedData] = useState([]);\n  const {\n    branches,\n    isDistributor\n  } = useSelector(selectGlobalState);\n  const [selectedBranchValue, setSelectedBranchValue] = useState([]);\n  const [finalData, setFinalData] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        await dispatcher(getAllStock({\n          auth,\n          params: { ...inputValues\n          }\n        }));\n        const refinedBranch = [...branches].map(e => {\n          return {\n            value: e,\n            label: e.branchCode\n          };\n        });\n        setSelectbranchComponent(prev => ({ ...prev,\n          options: refinedBranch\n        }));\n      } catch (error) {}\n    })();\n  }, [branches]);\n  const inputData = useMemo(() => [\n  /* {\r\n    title: intl.formatMessage(messages.inventoryDetailSearch),\r\n    type: 'text',\r\n    placeholder: '',\r\n    name: 'searchAccount',\r\n  },\r\n  {\r\n    title: intl.formatMessage(messages.groupBy),\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'groupBy',\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: intl.formatMessage(messages.locCode),\r\n      },\r\n    ],\r\n  }, */\n  {\n    title: intl.formatMessage(messages.filterByBranch),\n    type: 'select',\n    placeholder: intl.formatMessage(messages.selectBranch),\n    name: 'filterByBranch',\n    options: [{\n      label: 'None',\n      value: 'none'\n    }, ...selectbranchComponent.options]\n  }], [selectbranchComponent]);\n  const singleDetailColumns = useMemo(() => [{\n    Header: intl.formatMessage(messages.sNo),\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.locCode),\n    accessor: 'locationCode'\n  }, {\n    Header: intl.formatMessage(messages.quantity),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.price),\n    accessor: 'price',\n    Cell: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.binLocation),\n    accessor: 'binLocation'\n  }], []);\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.sNo),\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row2;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row2 = allData.row) === null || _allData$row2 === void 0 ? void 0 : _allData$row2.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.partNo),\n    accessor: row => {\n      var _row$part;\n\n      return row === null || row === void 0 ? void 0 : (_row$part = row.part) === null || _row$part === void 0 ? void 0 : _row$part.partNumber;\n    }\n  }, {\n    Header: intl.formatMessage(messages.batchCode),\n    accessor: row => {\n      var _row$batchinventory$;\n\n      return row === null || row === void 0 ? void 0 : (_row$batchinventory$ = row.batchinventory[0]) === null || _row$batchinventory$ === void 0 ? void 0 : _row$batchinventory$.batchCode;\n    }\n  }, {\n    Header: intl.formatMessage(messages.locCode),\n    accessor: row => {\n      var _row$batchinventory$2;\n\n      return (_row$batchinventory$2 = row.batchinventory[0]) === null || _row$batchinventory$2 === void 0 ? void 0 : _row$batchinventory$2.locationCode;\n    }\n  }, {\n    Header: intl.formatMessage(messages.quantity),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.price),\n    accessor: 'price',\n    Cell: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.stockValue),\n    accessor: row => row.quantity * row.price,\n    Cell: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: 'Actions',\n    accessor: row => ({\n      batchinventory: row.batchinventory,\n      part: row.part\n    }),\n    Cell: _ref5 => {\n      let {\n        value\n      } = _ref5;\n\n      const handleViewDetails = () => {\n        setBatchinventoryList({\n          part: value.part,\n          batchinventory: value.batchinventory\n        });\n        onOpenSingleEntryDetail();\n      };\n\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleViewDetails,\n        variant: \"link\",\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }, this);\n    }\n  }], []);\n  const previewColumns = useMemo(() => [{\n    Header: intl.formatMessage(messages.sNo),\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row3;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row3 = allData.row) === null || _allData$row3 === void 0 ? void 0 : _allData$row3.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.partNo),\n    accessor: 'partNumber'\n  }, {\n    Header: intl.formatMessage(messages.batchCode),\n    accessor: 'batchCode'\n  },\n  /*  {\r\n     Header: intl.formatMessage(messages.locCode),\r\n     accessor: 'locationCode',\r\n   }, */\n  {\n    Header: intl.formatMessage(messages.quantity),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.price),\n    accessor: 'price',\n    Cell: _ref6 => {\n      let {\n        value\n      } = _ref6;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.binLocation),\n    accessor: 'binLocation'\n  }], []);\n\n  const handleTableTopChange = async (e, name) => {\n    setTableLoading(true);\n    let value = e.hasOwnProperty('target') ? e.target.value : e;\n\n    if (name === 'filterByBranch') {\n      try {\n        if (typeof e.value === 'string') {\n          await dispatcher(getAllStock({\n            auth,\n            params: { ...inputValues,\n              [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n            }\n          }));\n        } else {\n          var _e$value;\n\n          await dispatcher(getBranchStocks({\n            auth,\n            branchId: e === null || e === void 0 ? void 0 : (_e$value = e.value) === null || _e$value === void 0 ? void 0 : _e$value._id\n          }));\n        }\n\n        setTableLoading(false);\n      } catch (error) {\n        setTableLoading(false);\n      }\n\n      return;\n    }\n\n    try {\n      await dispatcher(getAllStock({\n        auth,\n        params: { ...inputValues,\n          [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n        }\n      }));\n      setTableLoading(false);\n    } catch (error) {\n      setTableLoading(false);\n    }\n  };\n\n  const handleBranchSelect = (e, name) => {\n    setSelectBranch({\n      branch: e.value,\n      name: e.label\n    });\n    setMapingSelectState(prevState => {\n      return prevState.map(item => {\n        if (item.name === 'locationCode') {\n          item.defaultValue = {\n            value: e.value.branchCode,\n            label: e.value.branchCode\n          };\n          item.options = [{\n            value: e.value.branchCode,\n            label: e.value.branchCode\n          }];\n          return item;\n        }\n\n        return item;\n      });\n    });\n  };\n\n  const handleMapping = (e, name) => {\n    setMapKey(prevState => {\n      var _selectedBranch$branc, _selectedBranch$branc2;\n\n      return { ...prevState,\n        [name]: e,\n        locationCode: {\n          label: selectedBranch === null || selectedBranch === void 0 ? void 0 : (_selectedBranch$branc = selectedBranch.branch) === null || _selectedBranch$branc === void 0 ? void 0 : _selectedBranch$branc.branchCode,\n          value: selectedBranch === null || selectedBranch === void 0 ? void 0 : (_selectedBranch$branc2 = selectedBranch.branch) === null || _selectedBranch$branc2 === void 0 ? void 0 : _selectedBranch$branc2.branchCode\n        }\n      };\n    });\n  };\n\n  const handleImportExcelButton = () => {\n    /* if (!selectedBranch.hasOwnProperty('branch')) {\r\n      notification({\r\n        status: 'error',\r\n        title: 'Branch Not Selected',\r\n        description: 'Branch must be selected',\r\n      });\r\n      return;\r\n    } */\n    if (selectedBranchValue.length < 1) {\n      notification({\n        status: 'error',\n        title: 'Branch Not Selected',\n        description: 'Branch must be selected'\n      });\n      return;\n    }\n\n    importExcelRef.current.click();\n  };\n\n  const handleImportChange = async e => {\n    setProcessingImport(true);\n    const rows = await readXlsxFile(e.target.files[0]);\n    const refinedHeader = rows[0].map(e => ({\n      value: e,\n      label: e\n    }));\n    setMapingSelectState(prevState => {\n      return prevState.map(el => {\n        if (el.name === 'locationCode') {\n          return el;\n        }\n\n        el.options = refinedHeader;\n        return el;\n      });\n    });\n    const key = rows[0];\n    const importedData = [];\n    rows.slice(1).forEach(row => {\n      importedData.push(Object.fromEntries(row.map((e, index) => {\n        return [key[index], e];\n      })));\n    });\n    setRawImportedData(importedData);\n    setProcessingImport(false);\n    onMapingModalOpen();\n    e.target.value = null; //reset the file input\n  };\n\n  const handleUploadReview = () => {\n    const uniqueKeys = [...new Set(Object.values({ ...mapKeys\n    }).map(e => e.value))];\n\n    if (uniqueKeys.length !== Object.values({ ...mapKeys\n    }).length) {\n      notification({\n        status: 'error',\n        description: intl.formatMessage(messages.fieldValueMessage)\n      });\n      return;\n    }\n\n    const processedImportData = [...rawImportedData].map((e, index) => {\n      const data = Object.entries({ ...mapKeys\n      }).map(_ref7 => {\n        let [key, value] = _ref7;\n\n        if (key === 'locationCode') {\n          return [key, value.label];\n        }\n\n        return [key, e[value.label]];\n      });\n      return Object.fromEntries(data);\n    });\n    const someData = [];\n\n    for (const bran of selectedBranchValue) {\n      console.log(bran);\n      const dat = [];\n\n      for (const d of processedImportData) {\n        const da = { ...d,\n          locationCode: bran.label\n        };\n        dat.push(da);\n      }\n\n      someData.push({\n        branchId: bran.value._id,\n        stocks: dat\n      });\n    }\n\n    console.log({\n      someData\n    });\n    setFinalData(someData);\n    setProcessedImportedData(processedImportData);\n    onStockDataOpen();\n  };\n\n  const handleStockDataUpload = async () => {\n    try {\n      setIsLoading(true);\n      const data = {\n        inventory: finalData\n      };\n      await dispatcher(uploadStock({\n        auth,\n        data\n      }));\n      await dispatcher(getAllStock({\n        auth,\n        params: { ...inputValues\n        }\n      }));\n      setIsLoading(false);\n      onClose();\n      onMapingModalClose();\n      onStockDataClose();\n      notification({\n        status: 'success',\n        description: `${intl.formatMessage(messages.stockHasBeenAdded)} ${selectedBranch.name}`\n      });\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: error !== null && error !== void 0 ? error : intl.formatMessage(messages.tryAgain)\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        minHeight: \"80vh\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            status: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Download a sample file from here \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 625,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                style: {\n                  fontWeight: 'bold'\n                },\n                href: \"https://docs.google.com/uc?id=1qUvhuzsqNE6CV_GLaK7spluz8qISdhWz&export=download\",\n                download: \"Inventory sample File\",\n                children: \"Download File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 626,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModifiedTableTop, {\n          inputData: inputData,\n          onChange: handleTableTopChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this), isDistributor && /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          mb: 6,\n          width: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            accept: \".xlsx\",\n            ref: importExcelRef,\n            type: \"file\",\n            onChange: handleImportChange,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"normal\",\n            onClick: onOpen,\n            children: intl.formatMessage(messages.bulkUpload)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n          columns: columns,\n          data: allStock,\n          fetchData: () => console.log('...fetching'),\n          skipPageReset: true,\n          loading: tableLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n          onOk: handleImportExcelButton,\n          isLoading: processingImport,\n          onClose: onClose,\n          isOpen: isOpen,\n          title: intl.formatMessage(messages.selectBranch),\n          okText: intl.formatMessage(messages.importStock),\n          isModalBody: true,\n          children: /*#__PURE__*/_jsxDEV(MultiSelect, {\n            sx: {\n              zIndex: 2000\n            },\n            placeholder: intl.formatMessage(messages.selectBranch),\n            value: selectedBranchValue,\n            onChange: value => {\n              console.log(value);\n              setSelectedBranchValue(value);\n            },\n            isMulti: true,\n            options: selectbranchComponent.options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n          size: \"xl\",\n          onOk: handleUploadReview,\n          isLoading: false,\n          onClose: onMapingModalClose,\n          isOpen: mapingModalOpen,\n          title: intl.formatMessage(messages.mapFields),\n          okText: intl.formatMessage(messages.next),\n          isModalBody: true,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-between\",\n            children: mappingSelectState.map(e => {\n              if (e.name === 'locationCode') {\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  width: \"49%\",\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    textStyle: \"label\",\n                    layerStyle: \"muted\",\n                    mb: 1,\n                    children: \"Location Code\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 701,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n                    placeholder: intl.formatMessage(messages.selectBranch),\n                    value: selectedBranchValue,\n                    onChange: value => {\n                      console.log(value);\n                      setSelectedBranchValue(value);\n                    },\n                    isMulti: true,\n                    options: selectbranchComponent.options\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 704,\n                    columnNumber: 23\n                  }, this)]\n                }, e.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 21\n                }, this);\n              }\n\n              return /*#__PURE__*/_jsxDEV(Box, {\n                width: \"49%\",\n                children: generateInput(e, handleMapping)\n              }, e.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 718,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n          size: \"2.5xl\",\n          onOk: handleStockDataUpload,\n          isLoading: isLoading,\n          onClose: onStockDataClose,\n          isOpen: stockDataOpen,\n          title: `${intl.formatMessage(messages.stockData)}`,\n          okText: intl.formatMessage(messages.uploadStock),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(DynamicTable, {\n              columns: previewColumns,\n              data: processedImportedData,\n              fetchData: () => console.log('...fetching'),\n              skipPageReset: true,\n              loading: tableLoading,\n              hidePagination: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n          onClose: onCloseSingleEntryDetail,\n          isOpen: openSingleEntryDetail,\n          title: `${batchinventoryList.part.partName} - ${batchinventoryList.part.partNumber}`,\n          hidefooter: true,\n          size: \"2.5xl\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            m: 5,\n            children: /*#__PURE__*/_jsxDEV(DynamicTable, {\n              columns: singleDetailColumns,\n              data: batchinventoryList.batchinventory,\n              fetchData: () => console.log('...fetching'),\n              skipPageReset: true,\n              loading: tableLoading,\n              hidePagination: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 618,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Inventory, \"AMP7zEVRWSubitP4dflYyTvwH5Q=\", false, function () {\n  return [useIntl, useSelector, useSelector, useDispatch, useRouteMatch, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useSelector];\n});\n\n_c = Inventory;\nexport default _c2 = withToast(Inventory);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Inventory\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/Inventory/index.js"],"names":["React","useMemo","useState","useRef","useEffect","useIntl","Box","Button","Link","useDisclosure","Alert","AlertIcon","AlertDescription","readXlsxFile","useSelector","useDispatch","moment","useRouteMatch","Switch","Route","ReactLink","DynamicTable","ModifiedTableTop","generateInput","SimpleModal","withToast","getMoneyFormat","getCamelCase","selectGlobalState","Select","MultiSelect","messages","getAllStock","selectInventory","uploadStock","getBranchStocks","selectBranch","title","type","placeholder","name","fullWidth","options","mapSelect","value","label","Inventory","notification","inputValues","setInputValue","start","format","end","startOf","intl","importExcelRef","isLoading","setIsLoading","allStock","batchinventoryList","setBatchinventoryList","part","batchinventory","auth","state","dispatcher","url","path","tableLoading","setTableLoading","isOpen","onOpen","onClose","mapingModalOpen","onMapingModalOpen","onMapingModalClose","stockDataOpen","onStockDataOpen","onStockDataClose","openSingleEntryDetail","onOpenSingleEntryDetail","onCloseSingleEntryDetail","selectbranchComponent","setSelectbranchComponent","selectedBranch","setSelectBranch","mappingSelectState","setMapingSelectState","processingImport","setProcessingImport","rawImportedData","setRawImportedData","mapKeys","setMapKey","processedImportedData","setProcessedImportedData","branches","isDistributor","selectedBranchValue","setSelectedBranchValue","finalData","setFinalData","params","refinedBranch","map","e","branchCode","prev","error","inputData","formatMessage","filterByBranch","singleDetailColumns","Header","sNo","accessor","Cell","allData","row","index","locCode","quantity","price","binLocation","columns","partNo","partNumber","batchCode","locationCode","stockValue","handleViewDetails","previewColumns","handleTableTopChange","hasOwnProperty","target","branchId","_id","handleBranchSelect","branch","prevState","item","defaultValue","handleMapping","handleImportExcelButton","length","status","description","current","click","handleImportChange","rows","files","refinedHeader","el","key","importedData","slice","forEach","push","Object","fromEntries","handleUploadReview","uniqueKeys","Set","values","fieldValueMessage","processedImportData","data","entries","someData","bran","console","log","dat","d","da","stocks","handleStockDataUpload","inventory","stockHasBeenAdded","tryAgain","fontWeight","display","bulkUpload","importStock","zIndex","mapFields","next","stockData","partName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA4D,OAA5D;AAEA,SAASC,OAAT,QAAwB,YAAxB;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,aAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,gBAPF,QAQO,kBARP;AASA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,aADF,EAEEC,MAFF,EAGEC,KAHF,EAIEX,IAAI,IAAIY,SAJV,QAKO,kBALP;AAMA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,gBAAP,IACEC,aADF,QAEO,4CAFP;AAGA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,MAAM,IAAIC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,WAHF,EAIEC,eAJF,QAKO,SALP;;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,eADY;AAEnBC,EAAAA,IAAI,EAAE,QAFa;AAGnBC,EAAAA,WAAW,EAAE,eAHM;AAInBC,EAAAA,IAAI,EAAE,SAJa;AAKnBC,EAAAA,SAAS,EAAE,IALQ;AAMnBC,EAAAA,OAAO,EAAE;AANU,CAArB;AASA,MAAMC,SAAS,GAAG;AACjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACEN,EAAAA,KAAK,EAAE,aADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,WAAW,EAAE,eAHf;AAIEC,EAAAA,IAAI,EAAE,YAJR;AAKEC,EAAAA,SAAS,EAAE,IALb;AAMEC,EAAAA,OAAO,EAAE,CACP;AACEE,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO;AANX,CAvBgB;AAwCjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACER,EAAAA,KAAK,EAAE,UADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,WAAW,EAAE,eAHf;AAIEC,EAAAA,IAAI,EAAE,UAJR;AAKEC,EAAAA,SAAS,EAAE,IALb;AAMEC,EAAAA,OAAO,EAAE,CACP;AACEE,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO;AANX,CAzDgB,EA0EhB;AACER,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,WAAW,EAAE,eAHf;AAIEC,EAAAA,IAAI,EAAE,OAJR;AAKEC,EAAAA,SAAS,EAAE,IALb;AAMEC,EAAAA,OAAO,EAAE,CACP;AACEE,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO;AANX,CA1EgB,EA2FhB;AACER,EAAAA,KAAK,EAAE,cADT;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,WAAW,EAAE,eAHf;AAIEC,EAAAA,IAAI,EAAE,aAJR;AAKEC,EAAAA,SAAS,EAAE,IALb;AAMEC,EAAAA,OAAO,EAAE,CACP;AACEE,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO;AANX,CA3FgB,CAAlB;;AA8GA,MAAMC,SAAS,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AACtC,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+B/C,QAAQ,CAAC;AAC5CgD,IAAAA,KAAK,EAAElC,MAAM,GAAGmC,MAAT,CAAgB,YAAhB,CADqC;AAE5CC,IAAAA,GAAG,EAAEpC,MAAM,GAAGqC,OAAT,CAAiB,OAAjB,EAA0BF,MAA1B,CAAiC,YAAjC;AAFuC,GAAD,CAA7C;AAIA,QAAMG,IAAI,GAAGjD,OAAO,EAApB;AACA,QAAMkD,cAAc,GAAGpD,MAAM,EAA7B;AACA,QAAM,CAACqD,SAAD,EAAYC,YAAZ,IAA4BvD,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEwD,IAAAA;AAAF,MAAe5C,WAAW,CAACmB,eAAD,CAAhC;AACA,QAAM,CAAC0B,kBAAD,EAAqBC,qBAArB,IAA8C1D,QAAQ,CAAC;AAC3D2D,IAAAA,IAAI,EAAE,EADqD;AAE3DC,IAAAA,cAAc,EAAE;AAF2C,GAAD,CAA5D;AAIA,QAAMC,IAAI,GAAGjD,WAAW,CAAEkD,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,UAAU,GAAGlD,WAAW,EAA9B;AACA,QAAM;AAAEmD,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgBlD,aAAa,EAAnC;AACA,QAAM,CAACmD,YAAD,EAAeC,eAAf,IAAkCnE,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEoE,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8B/D,aAAa,EAAjD;AACA,QAAM;AACJ6D,IAAAA,MAAM,EAAEG,eADJ;AAEJF,IAAAA,MAAM,EAAEG,iBAFJ;AAGJF,IAAAA,OAAO,EAAEG;AAHL,MAIFlE,aAAa,EAJjB;AAKA,QAAM;AACJ6D,IAAAA,MAAM,EAAEM,aADJ;AAEJL,IAAAA,MAAM,EAAEM,eAFJ;AAGJL,IAAAA,OAAO,EAAEM;AAHL,MAIFrE,aAAa,EAJjB;AAKA,QAAM;AACJ6D,IAAAA,MAAM,EAAES,qBADJ;AAEJR,IAAAA,MAAM,EAAES,uBAFJ;AAGJR,IAAAA,OAAO,EAAES;AAHL,MAIFxE,aAAa,EAJjB;AAKA,QAAM,CAACyE,qBAAD,EAAwBC,wBAAxB,IACJjF,QAAQ,CAACkC,YAAD,CADV;AAEA,QAAM,CAACgD,cAAD,EAAiBC,eAAjB,IAAoCnF,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACoF,kBAAD,EAAqBC,oBAArB,IAA6CrF,QAAQ,CAACyC,SAAD,CAA3D;AACA,QAAM,CAAC6C,gBAAD,EAAmBC,mBAAnB,IAA0CvF,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACwF,eAAD,EAAkBC,kBAAlB,IAAwCzF,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC0F,OAAD,EAAUC,SAAV,IAAuB3F,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAAC4F,qBAAD,EAAwBC,wBAAxB,IAAoD7F,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM;AAAE8F,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA8BnF,WAAW,CAACc,iBAAD,CAA/C;AACA,QAAM,CAACsE,mBAAD,EAAsBC,sBAAtB,IAAgDjG,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACkG,SAAD,EAAYC,YAAZ,IAA4BnG,QAAQ,CAAC,EAAD,CAA1C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAI;AACF,cAAM6D,UAAU,CAACjC,WAAW,CAAC;AAAE+B,UAAAA,IAAF;AAAQuC,UAAAA,MAAM,EAAE,EAAE,GAAGtD;AAAL;AAAhB,SAAD,CAAZ,CAAhB;AAEA,cAAMuD,aAAa,GAAG,CAAC,GAAGP,QAAJ,EAAcQ,GAAd,CAAmBC,CAAD,IAAO;AAC7C,iBAAO;AAAE7D,YAAAA,KAAK,EAAE6D,CAAT;AAAY5D,YAAAA,KAAK,EAAE4D,CAAC,CAACC;AAArB,WAAP;AACD,SAFqB,CAAtB;AAIAvB,QAAAA,wBAAwB,CAAEwB,IAAD,KAAW,EAClC,GAAGA,IAD+B;AAElCjE,UAAAA,OAAO,EAAE6D;AAFyB,SAAX,CAAD,CAAxB;AAID,OAXD,CAWE,OAAOK,KAAP,EAAc,CAAE;AACnB,KAbD;AAcD,GAfQ,EAeN,CAACZ,QAAD,CAfM,CAAT;AAiBA,QAAMa,SAAS,GAAG5G,OAAO,CACvB,MAAM;AACJ;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM;AACEoC,IAAAA,KAAK,EAAEiB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACgF,cAA5B,CADT;AAEEzE,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,WAAW,EAAEe,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACK,YAA5B,CAHf;AAIEI,IAAAA,IAAI,EAAE,gBAJR;AAKEE,IAAAA,OAAO,EAAE,CACP;AAAEG,MAAAA,KAAK,EAAE,MAAT;AAAiBD,MAAAA,KAAK,EAAE;AAAxB,KADO,EAEP,GAAGsC,qBAAqB,CAACxC,OAFlB;AALX,GAvBI,CADiB,EAmCvB,CAACwC,qBAAD,CAnCuB,CAAzB;AAsCA,QAAM8B,mBAAmB,GAAG/G,OAAO,CACjC,MAAM,CACJ;AACEgH,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACmF,GAA5B,CADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,IAAI,EAAGC,OAAD,IAAa;AAAA;;AACjB,0BAAO,QAAC,GAAD;AAAA,kBAAM,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,4BAAAA,OAAO,CAAEC,GAAT,8DAAcC,KAAd,IAAsB;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AALH,GADI,EAQJ;AACEN,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACyF,OAA5B,CADV;AAEEL,IAAAA,QAAQ,EAAE;AAFZ,GARI,EAYJ;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC0F,QAA5B,CADV;AAEEN,IAAAA,QAAQ,EAAE;AAFZ,GAZI,EAgBJ;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC2F,KAA5B,CADV;AAEEP,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAExE,QAAAA;AAAF,OAAD;AAAA,aAAelB,cAAc,CAACkB,KAAD,CAA7B;AAAA;AAHR,GAhBI,EAqBJ;AACEqE,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC4F,WAA5B,CADV;AAEER,IAAAA,QAAQ,EAAE;AAFZ,GArBI,CAD2B,EA2BjC,EA3BiC,CAAnC;AA8BA,QAAMS,OAAO,GAAG3H,OAAO,CACrB,MAAM,CACJ;AACEgH,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACmF,GAA5B,CADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,IAAI,EAAGC,OAAD,IAAa;AAAA;;AACjB,0BAAO,QAAC,GAAD;AAAA,kBAAM,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,6BAAAA,OAAO,CAAEC,GAAT,gEAAcC,KAAd,IAAsB;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AALH,GADI,EAQJ;AACEN,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC8F,MAA5B,CADV;AAEEV,IAAAA,QAAQ,EAAGG,GAAD;AAAA;;AAAA,aAASA,GAAT,aAASA,GAAT,oCAASA,GAAG,CAAEzD,IAAd,8CAAS,UAAWiE,UAApB;AAAA;AAFZ,GARI,EAYJ;AACEb,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACgG,SAA5B,CADV;AAEEZ,IAAAA,QAAQ,EAAGG,GAAD;AAAA;;AAAA,aAASA,GAAT,aAASA,GAAT,+CAASA,GAAG,CAAExD,cAAL,CAAoB,CAApB,CAAT,yDAAS,qBAAwBiE,SAAjC;AAAA;AAFZ,GAZI,EAgBJ;AACEd,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACyF,OAA5B,CADV;AAEEL,IAAAA,QAAQ,EAAGG,GAAD;AAAA;;AAAA,sCAASA,GAAG,CAACxD,cAAJ,CAAmB,CAAnB,CAAT,0DAAS,sBAAuBkE,YAAhC;AAAA;AAFZ,GAhBI,EAoBJ;AACEf,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC0F,QAA5B,CADV;AAEEN,IAAAA,QAAQ,EAAE;AAFZ,GApBI,EAwBJ;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC2F,KAA5B,CADV;AAEEP,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAExE,QAAAA;AAAF,OAAD;AAAA,aAAelB,cAAc,CAACkB,KAAD,CAA7B;AAAA;AAHR,GAxBI,EA6BJ;AACEqE,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACkG,UAA5B,CADV;AAEEd,IAAAA,QAAQ,EAAGG,GAAD,IAASA,GAAG,CAACG,QAAJ,GAAeH,GAAG,CAACI,KAFxC;AAGEN,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAExE,QAAAA;AAAF,OAAD;AAAA,aAAelB,cAAc,CAACkB,KAAD,CAA7B;AAAA;AAHR,GA7BI,EAkCJ;AACEqE,IAAAA,MAAM,EAAE,SADV;AAEEE,IAAAA,QAAQ,EAAGG,GAAD,KAAU;AAClBxD,MAAAA,cAAc,EAAEwD,GAAG,CAACxD,cADF;AAElBD,MAAAA,IAAI,EAAEyD,GAAG,CAACzD;AAFQ,KAAV,CAFZ;AAMEuD,IAAAA,IAAI,EAAE,SAAe;AAAA,UAAd;AAAExE,QAAAA;AAAF,OAAc;;AACnB,YAAMsF,iBAAiB,GAAG,MAAM;AAC9BtE,QAAAA,qBAAqB,CAAC;AACpBC,UAAAA,IAAI,EAAEjB,KAAK,CAACiB,IADQ;AAEpBC,UAAAA,cAAc,EAAElB,KAAK,CAACkB;AAFF,SAAD,CAArB;AAIAkB,QAAAA,uBAAuB;AACxB,OAND;;AAOA,0BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEkD,iBAAjB;AAAoC,QAAA,OAAO,EAAC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AAnBH,GAlCI,CADe,EAyDrB,EAzDqB,CAAvB;AA4DA,QAAMC,cAAc,GAAGlI,OAAO,CAC5B,MAAM,CACJ;AACEgH,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACmF,GAA5B,CADV;AAEEC,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,IAAI,EAAGC,OAAD,IAAa;AAAA;;AACjB,0BAAO,QAAC,GAAD;AAAA,kBAAM,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,6BAAAA,OAAO,CAAEC,GAAT,gEAAcC,KAAd,IAAsB;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AALH,GADI,EAQJ;AACEN,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC8F,MAA5B,CADV;AAEEV,IAAAA,QAAQ,EAAE;AAFZ,GARI,EAYJ;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACgG,SAA5B,CADV;AAEEZ,IAAAA,QAAQ,EAAE;AAFZ,GAZI;AAgBL;AACL;AACA;AACA;AACM;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC0F,QAA5B,CADV;AAEEN,IAAAA,QAAQ,EAAE;AAFZ,GApBI,EAwBJ;AACEF,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC2F,KAA5B,CADV;AAEEP,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAExE,QAAAA;AAAF,OAAD;AAAA,aAAelB,cAAc,CAACkB,KAAD,CAA7B;AAAA;AAHR,GAxBI,EA6BJ;AACEqE,IAAAA,MAAM,EAAE3D,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC4F,WAA5B,CADV;AAEER,IAAAA,QAAQ,EAAE;AAFZ,GA7BI,CADsB,EAmC5B,EAnC4B,CAA9B;;AAsCA,QAAMiB,oBAAoB,GAAG,OAAO3B,CAAP,EAAUjE,IAAV,KAAmB;AAC9C6B,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,QAAIzB,KAAK,GAAG6D,CAAC,CAAC4B,cAAF,CAAiB,QAAjB,IAA6B5B,CAAC,CAAC6B,MAAF,CAAS1F,KAAtC,GAA8C6D,CAA1D;;AAEA,QAAIjE,IAAI,KAAK,gBAAb,EAA+B;AAC7B,UAAI;AACF,YAAI,OAAOiE,CAAC,CAAC7D,KAAT,KAAmB,QAAvB,EAAiC;AAC/B,gBAAMqB,UAAU,CACdjC,WAAW,CAAC;AACV+B,YAAAA,IADU;AAEVuC,YAAAA,MAAM,EAAE,EACN,GAAGtD,WADG;AAEN,eAACR,IAAD,GACE,OAAOI,KAAP,KAAiB,QAAjB,GACIA,KADJ,GAEIA,KAAK,CAACA,KAAN,KAAgB,MAAhB,GACA,EADA,GAEAA,KAAK,CAACA;AAPN;AAFE,WAAD,CADG,CAAhB;AAcD,SAfD,MAeO;AAAA;;AACL,gBAAMqB,UAAU,CAAC9B,eAAe,CAAC;AAAE4B,YAAAA,IAAF;AAAQwE,YAAAA,QAAQ,EAAE9B,CAAF,aAAEA,CAAF,mCAAEA,CAAC,CAAE7D,KAAL,6CAAE,SAAU4F;AAA5B,WAAD,CAAhB,CAAhB;AACD;;AAEDnE,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OArBD,CAqBE,OAAOuC,KAAP,EAAc;AACdvC,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;;AACD;AACD;;AAED,QAAI;AACF,YAAMJ,UAAU,CACdjC,WAAW,CAAC;AACV+B,QAAAA,IADU;AAEVuC,QAAAA,MAAM,EAAE,EACN,GAAGtD,WADG;AAEN,WAACR,IAAD,GACE,OAAOI,KAAP,KAAiB,QAAjB,GACIA,KADJ,GAEIA,KAAK,CAACA,KAAN,KAAgB,MAAhB,GACA,EADA,GAEAA,KAAK,CAACA;AAPN;AAFE,OAAD,CADG,CAAhB;AAeAyB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAjBD,CAiBE,OAAOuC,KAAP,EAAc;AACdvC,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GApDD;;AAsDA,QAAMoE,kBAAkB,GAAG,CAAChC,CAAD,EAAIjE,IAAJ,KAAa;AACtC6C,IAAAA,eAAe,CAAC;AAAEqD,MAAAA,MAAM,EAAEjC,CAAC,CAAC7D,KAAZ;AAAmBJ,MAAAA,IAAI,EAAEiE,CAAC,CAAC5D;AAA3B,KAAD,CAAf;AAEA0C,IAAAA,oBAAoB,CAAEoD,SAAD,IAAe;AAClC,aAAOA,SAAS,CAACnC,GAAV,CAAeoC,IAAD,IAAU;AAC7B,YAAIA,IAAI,CAACpG,IAAL,KAAc,cAAlB,EAAkC;AAChCoG,UAAAA,IAAI,CAACC,YAAL,GAAoB;AAClBjG,YAAAA,KAAK,EAAE6D,CAAC,CAAC7D,KAAF,CAAQ8D,UADG;AAElB7D,YAAAA,KAAK,EAAE4D,CAAC,CAAC7D,KAAF,CAAQ8D;AAFG,WAApB;AAIAkC,UAAAA,IAAI,CAAClG,OAAL,GAAe,CACb;AAAEE,YAAAA,KAAK,EAAE6D,CAAC,CAAC7D,KAAF,CAAQ8D,UAAjB;AAA6B7D,YAAAA,KAAK,EAAE4D,CAAC,CAAC7D,KAAF,CAAQ8D;AAA5C,WADa,CAAf;AAGA,iBAAOkC,IAAP;AACD;;AACD,eAAOA,IAAP;AACD,OAZM,CAAP;AAaD,KAdmB,CAApB;AAeD,GAlBD;;AAoBA,QAAME,aAAa,GAAG,CAACrC,CAAD,EAAIjE,IAAJ,KAAa;AACjCqD,IAAAA,SAAS,CAAE8C,SAAD;AAAA;;AAAA,aAAgB,EACxB,GAAGA,SADqB;AAExB,SAACnG,IAAD,GAAQiE,CAFgB;AAGxBuB,QAAAA,YAAY,EAAE;AACZnF,UAAAA,KAAK,EAAEuC,cAAF,aAAEA,cAAF,gDAAEA,cAAc,CAAEsD,MAAlB,0DAAE,sBAAwBhC,UADnB;AAEZ9D,UAAAA,KAAK,EAAEwC,cAAF,aAAEA,cAAF,iDAAEA,cAAc,CAAEsD,MAAlB,2DAAE,uBAAwBhC;AAFnB;AAHU,OAAhB;AAAA,KAAD,CAAT;AAQD,GATD;;AAWA,QAAMqC,uBAAuB,GAAG,MAAM;AACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,QAAI7C,mBAAmB,CAAC8C,MAApB,GAA6B,CAAjC,EAAoC;AAClCjG,MAAAA,YAAY,CAAC;AACXkG,QAAAA,MAAM,EAAE,OADG;AAEX5G,QAAAA,KAAK,EAAE,qBAFI;AAGX6G,QAAAA,WAAW,EAAE;AAHF,OAAD,CAAZ;AAKA;AACD;;AAED3F,IAAAA,cAAc,CAAC4F,OAAf,CAAuBC,KAAvB;AACD,GApBD;;AAsBA,QAAMC,kBAAkB,GAAG,MAAO5C,CAAP,IAAa;AACtChB,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,UAAM6D,IAAI,GAAG,MAAMzI,YAAY,CAAC4F,CAAC,CAAC6B,MAAF,CAASiB,KAAT,CAAe,CAAf,CAAD,CAA/B;AAEA,UAAMC,aAAa,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQ9C,GAAR,CAAaC,CAAD,KAAQ;AACxC7D,MAAAA,KAAK,EAAE6D,CADiC;AAExC5D,MAAAA,KAAK,EAAE4D;AAFiC,KAAR,CAAZ,CAAtB;AAKAlB,IAAAA,oBAAoB,CAAEoD,SAAD,IAAe;AAClC,aAAOA,SAAS,CAACnC,GAAV,CAAeiD,EAAD,IAAQ;AAC3B,YAAIA,EAAE,CAACjH,IAAH,KAAY,cAAhB,EAAgC;AAC9B,iBAAOiH,EAAP;AACD;;AACDA,QAAAA,EAAE,CAAC/G,OAAH,GAAa8G,aAAb;AACA,eAAOC,EAAP;AACD,OANM,CAAP;AAOD,KARmB,CAApB;AAUA,UAAMC,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAhB;AAEA,UAAMK,YAAY,GAAG,EAArB;AAEAL,IAAAA,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcC,OAAd,CAAuBvC,GAAD,IAAS;AAC7BqC,MAAAA,YAAY,CAACG,IAAb,CACEC,MAAM,CAACC,WAAP,CACE1C,GAAG,CAACd,GAAJ,CAAQ,CAACC,CAAD,EAAIc,KAAJ,KAAc;AACpB,eAAO,CAACmC,GAAG,CAACnC,KAAD,CAAJ,EAAad,CAAb,CAAP;AACD,OAFD,CADF,CADF;AAOD,KARD;AAUAd,IAAAA,kBAAkB,CAACgE,YAAD,CAAlB;AAEAlE,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAf,IAAAA,iBAAiB;AAEjB+B,IAAAA,CAAC,CAAC6B,MAAF,CAAS1F,KAAT,GAAiB,IAAjB,CAtCsC,CAsCf;AACxB,GAvCD;;AAyCA,QAAMqH,kBAAkB,GAAG,MAAM;AAC/B,UAAMC,UAAU,GAAG,CACjB,GAAG,IAAIC,GAAJ,CAAQJ,MAAM,CAACK,MAAP,CAAc,EAAE,GAAGxE;AAAL,KAAd,EAA8BY,GAA9B,CAAmCC,CAAD,IAAOA,CAAC,CAAC7D,KAA3C,CAAR,CADc,CAAnB;;AAGA,QAAIsH,UAAU,CAAClB,MAAX,KAAsBe,MAAM,CAACK,MAAP,CAAc,EAAE,GAAGxE;AAAL,KAAd,EAA8BoD,MAAxD,EAAgE;AAC9DjG,MAAAA,YAAY,CAAC;AACXkG,QAAAA,MAAM,EAAE,OADG;AAEXC,QAAAA,WAAW,EAAE5F,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACsI,iBAA5B;AAFF,OAAD,CAAZ;AAIA;AACD;;AAED,UAAMC,mBAAmB,GAAG,CAAC,GAAG5E,eAAJ,EAAqBc,GAArB,CAAyB,CAACC,CAAD,EAAIc,KAAJ,KAAc;AACjE,YAAMgD,IAAI,GAAGR,MAAM,CAACS,OAAP,CAAe,EAAE,GAAG5E;AAAL,OAAf,EAA+BY,GAA/B,CAAmC,SAAkB;AAAA,YAAjB,CAACkD,GAAD,EAAM9G,KAAN,CAAiB;;AAChE,YAAI8G,GAAG,KAAK,cAAZ,EAA4B;AAC1B,iBAAO,CAACA,GAAD,EAAM9G,KAAK,CAACC,KAAZ,CAAP;AACD;;AAED,eAAO,CAAC6G,GAAD,EAAMjD,CAAC,CAAC7D,KAAK,CAACC,KAAP,CAAP,CAAP;AACD,OANY,CAAb;AAOA,aAAOkH,MAAM,CAACC,WAAP,CAAmBO,IAAnB,CAAP;AACD,KAT2B,CAA5B;AAYA,UAAME,QAAQ,GAAG,EAAjB;;AAEA,SAAI,MAAMC,IAAV,IAAkBxE,mBAAlB,EAAsC;AACpCyE,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAMG,GAAG,GAAG,EAAZ;;AACA,WAAI,MAAMC,CAAV,IAAeR,mBAAf,EAAoC;AACnC,cAAMS,EAAE,GAAG,EACR,GAAGD,CADK;AAER9C,UAAAA,YAAY,EAAE0C,IAAI,CAAC7H;AAFX,SAAX;AAICgI,QAAAA,GAAG,CAACf,IAAJ,CAASiB,EAAT;AACD;;AAGDN,MAAAA,QAAQ,CAACX,IAAT,CAAc;AACZvB,QAAAA,QAAQ,EAAEmC,IAAI,CAAC9H,KAAL,CAAW4F,GADT;AAEZwC,QAAAA,MAAM,EAAEH;AAFI,OAAd;AAID;;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,MAAAA;AAAD,KAAZ;AAEApE,IAAAA,YAAY,CAACoE,QAAD,CAAZ;AACI1E,IAAAA,wBAAwB,CAACuE,mBAAD,CAAxB;AACAzF,IAAAA,eAAe;AAChB,GAhDD;;AAsDA,QAAMoG,qBAAqB,GAAG,YAAY;AACxC,QAAI;AACFxH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,YAAM8G,IAAI,GAAG;AACXW,QAAAA,SAAS,EAAE9E;AADA,OAAb;AAGA,YAAMnC,UAAU,CAAC/B,WAAW,CAAC;AAAE6B,QAAAA,IAAF;AAAQwG,QAAAA;AAAR,OAAD,CAAZ,CAAhB;AACA,YAAMtG,UAAU,CAACjC,WAAW,CAAC;AAAE+B,QAAAA,IAAF;AAAQuC,QAAAA,MAAM,EAAE,EAAE,GAAGtD;AAAL;AAAhB,OAAD,CAAZ,CAAhB;AACAS,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAe,MAAAA,OAAO;AACPG,MAAAA,kBAAkB;AAClBG,MAAAA,gBAAgB;AAChB/B,MAAAA,YAAY,CAAC;AACXkG,QAAAA,MAAM,EAAE,SADG;AAEXC,QAAAA,WAAW,EAAG,GAAE5F,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACoJ,iBAA5B,CAA+C,IAC7D/F,cAAc,CAAC5C,IAChB;AAJU,OAAD,CAAZ;AAMD,KAlBD,CAkBE,OAAOoE,KAAP,EAAc;AACd7D,MAAAA,YAAY,CAAC;AACXkG,QAAAA,MAAM,EAAE,OADG;AAEXC,QAAAA,WAAW,EAAEtC,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAWtD,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACqJ,QAA5B;AAFX,OAAD,CAAZ;AAIA3H,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GA1BD;;AA4BA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAEU,IAAnB;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,GAAD;AAAA,iCACE,QAAC,KAAD;AAAO,YAAA,MAAM,EAAC,MAAd;AAAA,oCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,gBAAD;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,gBAAA,KAAK,EAAE;AAAEkH,kBAAAA,UAAU,EAAE;AAAd,iBADT;AAEE,gBAAA,IAAI,EAAC,iFAFP;AAGE,gBAAA,QAAQ,EAAC,uBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAiBE,QAAC,gBAAD;AACE,UAAA,SAAS,EAAExE,SADb;AAEE,UAAA,QAAQ,EAAEuB;AAFZ;AAAA;AAAA;AAAA;AAAA,gBAjBF,EAqBGnC,aAAa,iBACZ,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,MAAb;AAAoB,UAAA,cAAc,EAAC,UAAnC;AAA8C,UAAA,EAAE,EAAE,CAAlD;AAAqD,UAAA,KAAK,EAAC,MAA3D;AAAA,kCACE;AACE,YAAA,MAAM,EAAC,OADT;AAEE,YAAA,GAAG,EAAE1C,cAFP;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,QAAQ,EAAE8F,kBAJZ;AAKE,YAAA,KAAK,EAAE;AAAEiC,cAAAA,OAAO,EAAE;AAAX;AALT;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,QAAhB;AAAyB,YAAA,OAAO,EAAE/G,MAAlC;AAAA,sBACGjB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACwJ,UAA5B;AADH;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ,eAoCE,QAAC,YAAD;AACE,UAAA,OAAO,EAAE3D,OADX;AAEE,UAAA,IAAI,EAAElE,QAFR;AAGE,UAAA,SAAS,EAAE,MAAMiH,OAAO,CAACC,GAAR,CAAY,aAAZ,CAHnB;AAIE,UAAA,aAAa,EAAE,IAJjB;AAKE,UAAA,OAAO,EAAExG;AALX;AAAA;AAAA;AAAA;AAAA,gBApCF,eA2CE,QAAC,WAAD;AACE,UAAA,IAAI,EAAE2E,uBADR;AAEE,UAAA,SAAS,EAAEvD,gBAFb;AAGE,UAAA,OAAO,EAAEhB,OAHX;AAIE,UAAA,MAAM,EAAEF,MAJV;AAKE,UAAA,KAAK,EAAEhB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACK,YAA5B,CALT;AAME,UAAA,MAAM,EAAEkB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACyJ,WAA5B,CANV;AAOE,UAAA,WAAW,EAAE,IAPf;AAAA,iCAUG,QAAC,WAAD;AACA,YAAA,EAAE,EAAE;AAAEC,cAAAA,MAAM,EAAE;AAAV,aADJ;AAEH,YAAA,WAAW,EAAEnI,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACK,YAA5B,CAFV;AAGH,YAAA,KAAK,EAAE8D,mBAHJ;AAIH,YAAA,QAAQ,EAAGtD,KAAD,IAAW;AACnB+H,cAAAA,OAAO,CAACC,GAAR,CAAYhI,KAAZ;AACAuD,cAAAA,sBAAsB,CAACvD,KAAD,CAAtB;AACD,aAPE;AAQH,YAAA,OAAO,MARJ;AASH,YAAA,OAAO,EAAEsC,qBAAqB,CAACxC;AAT5B;AAAA;AAAA;AAAA;AAAA;AAVH;AAAA;AAAA;AAAA;AAAA,gBA3CF,eAkEE,QAAC,WAAD;AACE,UAAA,IAAI,EAAC,IADP;AAEE,UAAA,IAAI,EAAEuH,kBAFR;AAGE,UAAA,SAAS,EAAE,KAHb;AAIE,UAAA,OAAO,EAAEtF,kBAJX;AAKE,UAAA,MAAM,EAAEF,eALV;AAME,UAAA,KAAK,EAAEnB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC2J,SAA5B,CANT;AAOE,UAAA,MAAM,EAAEpI,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC4J,IAA5B,CAPV;AAQE,UAAA,WAAW,EAAE,IARf;AAAA,iCAUE,QAAC,GAAD;AAAK,YAAA,OAAO,EAAC,MAAb;AAAoB,YAAA,QAAQ,EAAC,MAA7B;AAAoC,YAAA,cAAc,EAAC,eAAnD;AAAA,sBACGrG,kBAAkB,CAACkB,GAAnB,CAAwBC,CAAD,IAAO;AAC7B,kBAAIA,CAAC,CAACjE,IAAF,KAAW,cAAf,EAA+B;AAC7B,oCACE,QAAC,GAAD;AAAkB,kBAAA,KAAK,EAAC,KAAxB;AAAA,0CACE,QAAC,GAAD;AAAK,oBAAA,SAAS,EAAC,OAAf;AAAuB,oBAAA,UAAU,EAAC,OAAlC;AAA0C,oBAAA,EAAE,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAIE,QAAC,WAAD;AACE,oBAAA,WAAW,EAAEc,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACK,YAA5B,CADf;AAEE,oBAAA,KAAK,EAAE8D,mBAFT;AAGE,oBAAA,QAAQ,EAAGtD,KAAD,IAAW;AACnB+H,sBAAAA,OAAO,CAACC,GAAR,CAAYhI,KAAZ;AACAuD,sBAAAA,sBAAsB,CAACvD,KAAD,CAAtB;AACD,qBANH;AAOE,oBAAA,OAAO,MAPT;AAQE,oBAAA,OAAO,EAAEsC,qBAAqB,CAACxC;AARjC;AAAA;AAAA;AAAA;AAAA,0BAJF;AAAA,mBAAU+D,CAAC,CAACjE,IAAZ;AAAA;AAAA;AAAA;AAAA,wBADF;AAiBD;;AACD,kCACE,QAAC,GAAD;AAAkB,gBAAA,KAAK,EAAC,KAAxB;AAAA,0BACGjB,aAAa,CAACkF,CAAD,EAAIqC,aAAJ;AADhB,iBAAUrC,CAAC,CAACjE,IAAZ;AAAA;AAAA;AAAA;AAAA,sBADF;AAKD,aAzBA;AADH;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,gBAlEF,eAyGE,QAAC,WAAD;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAEyI,qBAFR;AAGE,UAAA,SAAS,EAAEzH,SAHb;AAIE,UAAA,OAAO,EAAEsB,gBAJX;AAKE,UAAA,MAAM,EAAEF,aALV;AAME,UAAA,KAAK,EAAG,GAAEtB,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAAC6J,SAA5B,CAAuC,EANnD;AAOE,UAAA,MAAM,EAAEtI,IAAI,CAACwD,aAAL,CAAmB/E,QAAQ,CAACG,WAA5B,CAPV;AAAA,iCASE,QAAC,GAAD;AAAK,YAAA,MAAM,EAAC,MAAZ;AAAA,mCACE,QAAC,YAAD;AACE,cAAA,OAAO,EAAEiG,cADX;AAEE,cAAA,IAAI,EAAErC,qBAFR;AAGE,cAAA,SAAS,EAAE,MAAM6E,OAAO,CAACC,GAAR,CAAY,aAAZ,CAHnB;AAIE,cAAA,aAAa,EAAE,IAJjB;AAKE,cAAA,OAAO,EAAExG,YALX;AAME,cAAA,cAAc,EAAE;AANlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBAzGF,eA6HE,QAAC,WAAD;AACE,UAAA,OAAO,EAAEa,wBADX;AAEE,UAAA,MAAM,EAAEF,qBAFV;AAGE,UAAA,KAAK,EAAG,GAAEpB,kBAAkB,CAACE,IAAnB,CAAwBgI,QAAS,MAAKlI,kBAAkB,CAACE,IAAnB,CAAwBiE,UAAW,EAHrF;AAIE,UAAA,UAAU,MAJZ;AAKE,UAAA,IAAI,EAAC,OALP;AAAA,iCAOE,QAAC,GAAD;AAAK,YAAA,CAAC,EAAE,CAAR;AAAA,mCACE,QAAC,YAAD;AACE,cAAA,OAAO,EAAEd,mBADX;AAEE,cAAA,IAAI,EAAErD,kBAAkB,CAACG,cAF3B;AAGE,cAAA,SAAS,EAAE,MAAM6G,OAAO,CAACC,GAAR,CAAY,aAAZ,CAHnB;AAIE,cAAA,aAAa,EAAE,IAJjB;AAKE,cAAA,OAAO,EAAExG,YALX;AAME,cAAA,cAAc,EAAE;AANlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,gBA7HF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsJD,CAhmBD;;GAAMtB,S;UAKSzC,O,EAGQS,W,EAKRA,W,EACMC,W,EACGE,a,EAEcR,a,EAKhCA,a,EAKAA,a,EAKAA,a,EASgCK,W;;;KAzChCgC,S;AAkmBN,qBAAerB,SAAS,CAACqB,SAAD,CAAxB","sourcesContent":["import React, { useMemo, useState, useRef, useEffect } from 'react';\r\n\r\nimport { useIntl } from 'react-intl';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Link,\r\n  useDisclosure,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertDescription,\r\n} from '@chakra-ui/react';\r\nimport readXlsxFile from 'read-excel-file';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\nimport {\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  Link as ReactLink,\r\n} from 'react-router-dom';\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport ModifiedTableTop, {\r\n  generateInput,\r\n} from '../../components/TableTop/ModifiedTableTop';\r\nimport SimpleModal from '../../components/Modal';\r\nimport withToast from '../../HOCs/withToast';\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\nimport getCamelCase from '../../utils/getCamelCase';\r\nimport { selectGlobalState } from '../../globalSlice';\r\nimport { Select as MultiSelect } from 'chakra-react-select';\r\nimport messages from './messages';\r\nimport {\r\n  getAllStock,\r\n  selectInventory,\r\n  uploadStock,\r\n  getBranchStocks,\r\n} from './slice';\r\n\r\nconst selectBranch = {\r\n  title: 'Select Branch',\r\n  type: 'select',\r\n  placeholder: 'Select option',\r\n  name: 'groupBy',\r\n  fullWidth: true,\r\n  options: [],\r\n};\r\n\r\nconst mapSelect = [\r\n /*  {\r\n    title: 'Location Code',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'locationCode',\r\n    isDisabled: false,\r\n    fullWidth: true,\r\n    defaultValue: {\r\n      value: 'Loc Code',\r\n      label: 'Loc Code',\r\n    },\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  }, */\r\n  {\r\n    title: 'Part Number',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'partNumber',\r\n    fullWidth: true,\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  },\r\n /*  {\r\n    title: 'Batch Code',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'batchCode',\r\n    fullWidth: true,\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  }, */\r\n  {\r\n    title: 'Quantity',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'quantity',\r\n    fullWidth: true,\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'Price',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'price',\r\n    fullWidth: true,\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'Bin Location',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name: 'binLocation',\r\n    fullWidth: true,\r\n    options: [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'Loc Code',\r\n        label: 'Loc Code',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst Inventory = ({ notification }) => {\r\n  const [inputValues, setInputValue] = useState({\r\n    start: moment().format('DD-MM-YYYY'),\r\n    end: moment().startOf('month').format('DD-MM-YYYY'),\r\n  });\r\n  const intl = useIntl();\r\n  const importExcelRef = useRef();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { allStock } = useSelector(selectInventory);\r\n  const [batchinventoryList, setBatchinventoryList] = useState({\r\n    part: {},\r\n    batchinventory: [],\r\n  });\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatcher = useDispatch();\r\n  const { url, path } = useRouteMatch();\r\n  const [tableLoading, setTableLoading] = useState(false);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const {\r\n    isOpen: mapingModalOpen,\r\n    onOpen: onMapingModalOpen,\r\n    onClose: onMapingModalClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: stockDataOpen,\r\n    onOpen: onStockDataOpen,\r\n    onClose: onStockDataClose,\r\n  } = useDisclosure();\r\n  const {\r\n    isOpen: openSingleEntryDetail,\r\n    onOpen: onOpenSingleEntryDetail,\r\n    onClose: onCloseSingleEntryDetail,\r\n  } = useDisclosure();\r\n  const [selectbranchComponent, setSelectbranchComponent] =\r\n    useState(selectBranch);\r\n  const [selectedBranch, setSelectBranch] = useState({});\r\n  const [mappingSelectState, setMapingSelectState] = useState(mapSelect);\r\n  const [processingImport, setProcessingImport] = useState(false);\r\n  const [rawImportedData, setRawImportedData] = useState([]);\r\n  const [mapKeys, setMapKey] = useState({});\r\n  const [processedImportedData, setProcessedImportedData] = useState([]);\r\n  const { branches, isDistributor } = useSelector(selectGlobalState);\r\n  const [selectedBranchValue, setSelectedBranchValue] = useState([]);\r\n  const [finalData, setFinalData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        await dispatcher(getAllStock({ auth, params: { ...inputValues } }));\r\n\r\n        const refinedBranch = [...branches].map((e) => {\r\n          return { value: e, label: e.branchCode };\r\n        });\r\n\r\n        setSelectbranchComponent((prev) => ({\r\n          ...prev,\r\n          options: refinedBranch,\r\n        }));\r\n      } catch (error) {}\r\n    })();\r\n  }, [branches]);\r\n\r\n  const inputData = useMemo(\r\n    () => [\r\n      /* {\r\n        title: intl.formatMessage(messages.inventoryDetailSearch),\r\n        type: 'text',\r\n        placeholder: '',\r\n        name: 'searchAccount',\r\n      },\r\n      {\r\n        title: intl.formatMessage(messages.groupBy),\r\n        type: 'select',\r\n        placeholder: 'Select option',\r\n        name: 'groupBy',\r\n        options: [\r\n          {\r\n            value: 'none',\r\n            label: 'None',\r\n          },\r\n          {\r\n            value: 'Loc Code',\r\n            label: intl.formatMessage(messages.locCode),\r\n          },\r\n        ],\r\n      }, */\r\n      {\r\n        title: intl.formatMessage(messages.filterByBranch),\r\n        type: 'select',\r\n        placeholder: intl.formatMessage(messages.selectBranch),\r\n        name: 'filterByBranch',\r\n        options: [\r\n          { label: 'None', value: 'none' },\r\n          ...selectbranchComponent.options,\r\n        ],\r\n      },\r\n    ],\r\n    [selectbranchComponent],\r\n  );\r\n\r\n  const singleDetailColumns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.sNo),\r\n        accessor: 'sno',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.locCode),\r\n        accessor: 'locationCode',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.quantity),\r\n        accessor: 'quantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.price),\r\n        accessor: 'price',\r\n        Cell: ({ value }) => getMoneyFormat(value),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.binLocation),\r\n        accessor: 'binLocation',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.sNo),\r\n        accessor: 'sno',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partNo),\r\n        accessor: (row) => row?.part?.partNumber,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.batchCode),\r\n        accessor: (row) => row?.batchinventory[0]?.batchCode,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.locCode),\r\n        accessor: (row) => row.batchinventory[0]?.locationCode,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.quantity),\r\n        accessor: 'quantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.price),\r\n        accessor: 'price',\r\n        Cell: ({ value }) => getMoneyFormat(value),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.stockValue),\r\n        accessor: (row) => row.quantity * row.price,\r\n        Cell: ({ value }) => getMoneyFormat(value),\r\n      },\r\n      {\r\n        Header: 'Actions',\r\n        accessor: (row) => ({\r\n          batchinventory: row.batchinventory,\r\n          part: row.part,\r\n        }),\r\n        Cell: ({ value }) => {\r\n          const handleViewDetails = () => {\r\n            setBatchinventoryList({\r\n              part: value.part,\r\n              batchinventory: value.batchinventory,\r\n            });\r\n            onOpenSingleEntryDetail();\r\n          };\r\n          return (\r\n            <Button onClick={handleViewDetails} variant='link'>\r\n              View Details\r\n            </Button>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const previewColumns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.sNo),\r\n        accessor: 'sno',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partNo),\r\n        accessor: 'partNumber',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.batchCode),\r\n        accessor: 'batchCode',\r\n      },\r\n     /*  {\r\n        Header: intl.formatMessage(messages.locCode),\r\n        accessor: 'locationCode',\r\n      }, */\r\n      {\r\n        Header: intl.formatMessage(messages.quantity),\r\n        accessor: 'quantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.price),\r\n        accessor: 'price',\r\n        Cell: ({ value }) => getMoneyFormat(value),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.binLocation),\r\n        accessor: 'binLocation',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const handleTableTopChange = async (e, name) => {\r\n    setTableLoading(true);\r\n    let value = e.hasOwnProperty('target') ? e.target.value : e;\r\n\r\n    if (name === 'filterByBranch') {\r\n      try {\r\n        if (typeof e.value === 'string') {\r\n          await dispatcher(\r\n            getAllStock({\r\n              auth,\r\n              params: {\r\n                ...inputValues,\r\n                [name]:\r\n                  typeof value !== 'object'\r\n                    ? value\r\n                    : value.value === 'none'\r\n                    ? ''\r\n                    : value.value,\r\n              },\r\n            }),\r\n          );\r\n        } else {\r\n          await dispatcher(getBranchStocks({ auth, branchId: e?.value?._id }));\r\n        }\r\n\r\n        setTableLoading(false);\r\n      } catch (error) {\r\n        setTableLoading(false);\r\n      }\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await dispatcher(\r\n        getAllStock({\r\n          auth,\r\n          params: {\r\n            ...inputValues,\r\n            [name]:\r\n              typeof value !== 'object'\r\n                ? value\r\n                : value.value === 'none'\r\n                ? ''\r\n                : value.value,\r\n          },\r\n        }),\r\n      );\r\n\r\n      setTableLoading(false);\r\n    } catch (error) {\r\n      setTableLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBranchSelect = (e, name) => {\r\n    setSelectBranch({ branch: e.value, name: e.label });\r\n\r\n    setMapingSelectState((prevState) => {\r\n      return prevState.map((item) => {\r\n        if (item.name === 'locationCode') {\r\n          item.defaultValue = {\r\n            value: e.value.branchCode,\r\n            label: e.value.branchCode,\r\n          };\r\n          item.options = [\r\n            { value: e.value.branchCode, label: e.value.branchCode },\r\n          ];\r\n          return item;\r\n        }\r\n        return item;\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleMapping = (e, name) => {\r\n    setMapKey((prevState) => ({\r\n      ...prevState,\r\n      [name]: e,\r\n      locationCode: {\r\n        label: selectedBranch?.branch?.branchCode,\r\n        value: selectedBranch?.branch?.branchCode,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleImportExcelButton = () => {\r\n    /* if (!selectedBranch.hasOwnProperty('branch')) {\r\n      notification({\r\n        status: 'error',\r\n        title: 'Branch Not Selected',\r\n        description: 'Branch must be selected',\r\n      });\r\n      return;\r\n    } */\r\n\r\n    if (selectedBranchValue.length < 1) {\r\n      notification({\r\n        status: 'error',\r\n        title: 'Branch Not Selected',\r\n        description: 'Branch must be selected',\r\n      });\r\n      return;\r\n    }\r\n\r\n    importExcelRef.current.click();\r\n  };\r\n\r\n  const handleImportChange = async (e) => {\r\n    setProcessingImport(true);\r\n    const rows = await readXlsxFile(e.target.files[0]);\r\n\r\n    const refinedHeader = rows[0].map((e) => ({\r\n      value: e,\r\n      label: e,\r\n    }));\r\n\r\n    setMapingSelectState((prevState) => {\r\n      return prevState.map((el) => {\r\n        if (el.name === 'locationCode') {\r\n          return el;\r\n        }\r\n        el.options = refinedHeader;\r\n        return el;\r\n      });\r\n    });\r\n\r\n    const key = rows[0];\r\n\r\n    const importedData = [];\r\n\r\n    rows.slice(1).forEach((row) => {\r\n      importedData.push(\r\n        Object.fromEntries(\r\n          row.map((e, index) => {\r\n            return [key[index], e];\r\n          }),\r\n        ),\r\n      );\r\n    });\r\n\r\n    setRawImportedData(importedData);\r\n\r\n    setProcessingImport(false);\r\n    onMapingModalOpen();\r\n\r\n    e.target.value = null; //reset the file input\r\n  };\r\n\r\n  const handleUploadReview = () => {\r\n    const uniqueKeys = [\r\n      ...new Set(Object.values({ ...mapKeys }).map((e) => e.value)),\r\n    ];\r\n    if (uniqueKeys.length !== Object.values({ ...mapKeys }).length) {\r\n      notification({\r\n        status: 'error',\r\n        description: intl.formatMessage(messages.fieldValueMessage),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const processedImportData = [...rawImportedData].map((e, index) => {\r\n      const data = Object.entries({ ...mapKeys }).map(([key, value]) => {\r\n        if (key === 'locationCode') {\r\n          return [key, value.label];\r\n        }\r\n\r\n        return [key, e[value.label]];\r\n      });\r\n      return Object.fromEntries(data);\r\n    });\r\n\r\n\r\n    const someData = []\r\n\r\n    for(const bran of selectedBranchValue){\r\n      console.log(bran)\r\n      const dat = [];\r\n      for(const d of processedImportData ){\r\n       const da = {\r\n          ...d,\r\n          locationCode: bran.label\r\n        }\r\n        dat.push(da)\r\n      }\r\n\r\n\r\n      someData.push({\r\n        branchId: bran.value._id,\r\n        stocks: dat,\r\n      })\r\n    }\r\nconsole.log({someData})\r\n\r\nsetFinalData(someData);\r\n    setProcessedImportedData(processedImportData);\r\n    onStockDataOpen();\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const handleStockDataUpload = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      const data = {\r\n        inventory: finalData,\r\n      };\r\n      await dispatcher(uploadStock({ auth, data }));\r\n      await dispatcher(getAllStock({ auth, params: { ...inputValues } }));\r\n      setIsLoading(false);\r\n      onClose();\r\n      onMapingModalClose();\r\n      onStockDataClose();\r\n      notification({\r\n        status: 'success',\r\n        description: `${intl.formatMessage(messages.stockHasBeenAdded)} ${\r\n          selectedBranch.name\r\n        }`,\r\n      });\r\n    } catch (error) {\r\n      notification({\r\n        status: 'error',\r\n        description: error ?? intl.formatMessage(messages.tryAgain),\r\n      });\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path={path}>\r\n        <Box minHeight='80vh'>\r\n          <Box>\r\n            <Alert status='info'>\r\n              <AlertIcon />\r\n              <AlertDescription>\r\n                <label>Download a sample file from here </label>\r\n                <a\r\n                  style={{ fontWeight: 'bold' }}\r\n                  href='https://docs.google.com/uc?id=1qUvhuzsqNE6CV_GLaK7spluz8qISdhWz&export=download'\r\n                  download='Inventory sample File'\r\n                >\r\n                  Download File\r\n                </a>\r\n              </AlertDescription>\r\n            </Alert>\r\n          </Box>\r\n\r\n          <ModifiedTableTop\r\n            inputData={inputData}\r\n            onChange={handleTableTopChange}\r\n          />\r\n          {isDistributor && (\r\n            <Box display='flex' justifyContent='flex-end' mb={6} width='100%'>\r\n              <input\r\n                accept='.xlsx'\r\n                ref={importExcelRef}\r\n                type='file'\r\n                onChange={handleImportChange}\r\n                style={{ display: 'none' }}\r\n              />\r\n              <Button variant='normal' onClick={onOpen}>\r\n                {intl.formatMessage(messages.bulkUpload)}\r\n              </Button>\r\n            </Box>\r\n          )}\r\n\r\n          <DynamicTable\r\n            columns={columns}\r\n            data={allStock}\r\n            fetchData={() => console.log('...fetching')}\r\n            skipPageReset={true}\r\n            loading={tableLoading}\r\n          />\r\n          <SimpleModal\r\n            onOk={handleImportExcelButton}\r\n            isLoading={processingImport}\r\n            onClose={onClose}\r\n            isOpen={isOpen}\r\n            title={intl.formatMessage(messages.selectBranch)}\r\n            okText={intl.formatMessage(messages.importStock)}\r\n            isModalBody={true}\r\n          >\r\n            {/* {generateInput(selectbranchComponent, handleBranchSelect)} */}\r\n             <MultiSelect\r\n             sx={{ zIndex: 2000 }}\r\n          placeholder={intl.formatMessage(messages.selectBranch)}\r\n          value={selectedBranchValue}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setSelectedBranchValue(value)\r\n          }}\r\n          isMulti\r\n          options={selectbranchComponent.options}\r\n        />\r\n          </SimpleModal>\r\n\r\n          <SimpleModal\r\n            size='xl'\r\n            onOk={handleUploadReview}\r\n            isLoading={false}\r\n            onClose={onMapingModalClose}\r\n            isOpen={mapingModalOpen}\r\n            title={intl.formatMessage(messages.mapFields)}\r\n            okText={intl.formatMessage(messages.next)}\r\n            isModalBody={true}\r\n          >\r\n            <Box display='flex' flexWrap='wrap' justifyContent='space-between'>\r\n              {mappingSelectState.map((e) => {\r\n                if (e.name === 'locationCode') {\r\n                  return (\r\n                    <Box key={e.name} width='49%'>\r\n                      <Box textStyle='label' layerStyle='muted' mb={1}>\r\n                        Location Code\r\n                      </Box>\r\n                      <MultiSelect\r\n                        placeholder={intl.formatMessage(messages.selectBranch)}\r\n                        value={selectedBranchValue}\r\n                        onChange={(value) => {\r\n                          console.log(value);\r\n                          setSelectedBranchValue(value);\r\n                        }}\r\n                        isMulti\r\n                        options={selectbranchComponent.options}\r\n                      />\r\n                    </Box>\r\n                  );\r\n                }\r\n                return (\r\n                  <Box key={e.name} width='49%'>\r\n                    {generateInput(e, handleMapping)}\r\n                  </Box>\r\n                );\r\n              })}\r\n            </Box>\r\n          </SimpleModal>\r\n          <SimpleModal\r\n            size='2.5xl'\r\n            onOk={handleStockDataUpload}\r\n            isLoading={isLoading}\r\n            onClose={onStockDataClose}\r\n            isOpen={stockDataOpen}\r\n            title={`${intl.formatMessage(messages.stockData)}`}\r\n            okText={intl.formatMessage(messages.uploadStock)}\r\n          >\r\n            <Box height='100%'>\r\n              <DynamicTable\r\n                columns={previewColumns}\r\n                data={processedImportedData}\r\n                fetchData={() => console.log('...fetching')}\r\n                skipPageReset={true}\r\n                loading={tableLoading}\r\n                hidePagination={true}\r\n              />\r\n            </Box>\r\n          </SimpleModal>\r\n          <SimpleModal\r\n            onClose={onCloseSingleEntryDetail}\r\n            isOpen={openSingleEntryDetail}\r\n            title={`${batchinventoryList.part.partName} - ${batchinventoryList.part.partNumber}`}\r\n            hidefooter\r\n            size='2.5xl'\r\n          >\r\n            <Box m={5}>\r\n              <DynamicTable\r\n                columns={singleDetailColumns}\r\n                data={batchinventoryList.batchinventory}\r\n                fetchData={() => console.log('...fetching')}\r\n                skipPageReset={true}\r\n                loading={tableLoading}\r\n                hidePagination={true}\r\n              />\r\n            </Box>\r\n          </SimpleModal>\r\n        </Box>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default withToast(Inventory);\r\n"]},"metadata":{},"sourceType":"module"}