{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getNumberArrayValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\n\nfunction getControlPoints(x0, y0, x1, y1, x2, y2, t) {\n  var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)),\n      d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),\n      fa = t * d01 / (d01 + d12),\n      fb = t * d12 / (d01 + d12),\n      p1x = x1 - fa * (x2 - x0),\n      p1y = y1 - fa * (y2 - y0),\n      p2x = x1 + fb * (x2 - x0),\n      p2y = y1 + fb * (y2 - y0);\n  return [p1x, p1y, p2x, p2y];\n}\n\nfunction expandPoints(p, tension) {\n  var len = p.length,\n      allPoints = [],\n      n,\n      cp;\n\n  for (n = 2; n < len - 2; n += 2) {\n    cp = getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);\n\n    if (isNaN(cp[0])) {\n      continue;\n    }\n\n    allPoints.push(cp[0]);\n    allPoints.push(cp[1]);\n    allPoints.push(p[n]);\n    allPoints.push(p[n + 1]);\n    allPoints.push(cp[2]);\n    allPoints.push(cp[3]);\n  }\n\n  return allPoints;\n}\n\nexport class Line extends Shape {\n  constructor(config) {\n    super(config);\n    this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {\n      this._clearCache('tensionPoints');\n    });\n  }\n\n  _sceneFunc(context) {\n    var points = this.points(),\n        length = points.length,\n        tension = this.tension(),\n        closed = this.closed(),\n        bezier = this.bezier(),\n        tp,\n        len,\n        n;\n\n    if (!length) {\n      return;\n    }\n\n    context.beginPath();\n    context.moveTo(points[0], points[1]);\n\n    if (tension !== 0 && length > 4) {\n      tp = this.getTensionPoints();\n      len = tp.length;\n      n = closed ? 0 : 4;\n\n      if (!closed) {\n        context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);\n      }\n\n      while (n < len - 2) {\n        context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);\n      }\n\n      if (!closed) {\n        context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);\n      }\n    } else if (bezier) {\n      n = 2;\n\n      while (n < length) {\n        context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);\n      }\n    } else {\n      for (n = 2; n < length; n += 2) {\n        context.lineTo(points[n], points[n + 1]);\n      }\n    }\n\n    if (closed) {\n      context.closePath();\n      context.fillStrokeShape(this);\n    } else {\n      context.strokeShape(this);\n    }\n  }\n\n  getTensionPoints() {\n    return this._getCache('tensionPoints', this._getTensionPoints);\n  }\n\n  _getTensionPoints() {\n    if (this.closed()) {\n      return this._getTensionPointsClosed();\n    } else {\n      return expandPoints(this.points(), this.tension());\n    }\n  }\n\n  _getTensionPointsClosed() {\n    var p = this.points(),\n        len = p.length,\n        tension = this.tension(),\n        firstControlPoints = getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension),\n        lastControlPoints = getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension),\n        middle = expandPoints(p, tension),\n        tp = [firstControlPoints[2], firstControlPoints[3]].concat(middle).concat([lastControlPoints[0], lastControlPoints[1], p[len - 2], p[len - 1], lastControlPoints[2], lastControlPoints[3], firstControlPoints[0], firstControlPoints[1], p[0], p[1]]);\n    return tp;\n  }\n\n  getWidth() {\n    return this.getSelfRect().width;\n  }\n\n  getHeight() {\n    return this.getSelfRect().height;\n  }\n\n  getSelfRect() {\n    var points = this.points();\n\n    if (points.length < 4) {\n      return {\n        x: points[0] || 0,\n        y: points[1] || 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    if (this.tension() !== 0) {\n      points = [points[0], points[1], ...this._getTensionPoints(), points[points.length - 2], points[points.length - 1]];\n    } else {\n      points = this.points();\n    }\n\n    var minX = points[0];\n    var maxX = points[0];\n    var minY = points[1];\n    var maxY = points[1];\n    var x, y;\n\n    for (var i = 0; i < points.length / 2; i++) {\n      x = points[i * 2];\n      y = points[i * 2 + 1];\n      minX = Math.min(minX, x);\n      maxX = Math.max(maxX, x);\n      minY = Math.min(minY, y);\n      maxY = Math.max(maxY, y);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n}\nLine.prototype.className = 'Line';\nLine.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];\n\n_registerNode(Line);\n\nFactory.addGetterSetter(Line, 'closed', false);\nFactory.addGetterSetter(Line, 'bezier', false);\nFactory.addGetterSetter(Line, 'tension', 0, getNumberValidator());\nFactory.addGetterSetter(Line, 'points', [], getNumberArrayValidator());","map":{"version":3,"sources":["../../src/shapes/Line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getNumberArrayValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nfunction getControlPoints(x0, y0, x1, y1, x2, y2, t) {\n    var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);\n    return [p1x, p1y, p2x, p2y];\n}\nfunction expandPoints(p, tension) {\n    var len = p.length, allPoints = [], n, cp;\n    for (n = 2; n < len - 2; n += 2) {\n        cp = getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);\n        if (isNaN(cp[0])) {\n            continue;\n        }\n        allPoints.push(cp[0]);\n        allPoints.push(cp[1]);\n        allPoints.push(p[n]);\n        allPoints.push(p[n + 1]);\n        allPoints.push(cp[2]);\n        allPoints.push(cp[3]);\n    }\n    return allPoints;\n}\nexport class Line extends Shape {\n    constructor(config) {\n        super(config);\n        this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {\n            this._clearCache('tensionPoints');\n        });\n    }\n    _sceneFunc(context) {\n        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;\n        if (!length) {\n            return;\n        }\n        context.beginPath();\n        context.moveTo(points[0], points[1]);\n        if (tension !== 0 && length > 4) {\n            tp = this.getTensionPoints();\n            len = tp.length;\n            n = closed ? 0 : 4;\n            if (!closed) {\n                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);\n            }\n            while (n < len - 2) {\n                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);\n            }\n            if (!closed) {\n                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);\n            }\n        }\n        else if (bezier) {\n            n = 2;\n            while (n < length) {\n                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);\n            }\n        }\n        else {\n            for (n = 2; n < length; n += 2) {\n                context.lineTo(points[n], points[n + 1]);\n            }\n        }\n        if (closed) {\n            context.closePath();\n            context.fillStrokeShape(this);\n        }\n        else {\n            context.strokeShape(this);\n        }\n    }\n    getTensionPoints() {\n        return this._getCache('tensionPoints', this._getTensionPoints);\n    }\n    _getTensionPoints() {\n        if (this.closed()) {\n            return this._getTensionPointsClosed();\n        }\n        else {\n            return expandPoints(this.points(), this.tension());\n        }\n    }\n    _getTensionPointsClosed() {\n        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]\n            .concat(middle)\n            .concat([\n            lastControlPoints[0],\n            lastControlPoints[1],\n            p[len - 2],\n            p[len - 1],\n            lastControlPoints[2],\n            lastControlPoints[3],\n            firstControlPoints[0],\n            firstControlPoints[1],\n            p[0],\n            p[1],\n        ]);\n        return tp;\n    }\n    getWidth() {\n        return this.getSelfRect().width;\n    }\n    getHeight() {\n        return this.getSelfRect().height;\n    }\n    getSelfRect() {\n        var points = this.points();\n        if (points.length < 4) {\n            return {\n                x: points[0] || 0,\n                y: points[1] || 0,\n                width: 0,\n                height: 0,\n            };\n        }\n        if (this.tension() !== 0) {\n            points = [\n                points[0],\n                points[1],\n                ...this._getTensionPoints(),\n                points[points.length - 2],\n                points[points.length - 1],\n            ];\n        }\n        else {\n            points = this.points();\n        }\n        var minX = points[0];\n        var maxX = points[0];\n        var minY = points[1];\n        var maxY = points[1];\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            minX = Math.min(minX, x);\n            maxX = Math.max(maxX, x);\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n}\nLine.prototype.className = 'Line';\nLine.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];\n_registerNode(Line);\nFactory.addGetterSetter(Line, 'closed', false);\nFactory.addGetterSetter(Line, 'bezier', false);\nFactory.addGetterSetter(Line, 'tension', 0, getNumberValidator());\nFactory.addGetterSetter(Line, 'points', [], getNumberArrayValidator());\n//# sourceMappingURL=Line.js.map"]},"metadata":{},"sourceType":"module"}