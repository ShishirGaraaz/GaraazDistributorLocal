{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PressActivation = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nconst TouchEnvironmentActivation_1 = require(\"./TouchEnvironmentActivation\");\n\nclass PressActivation extends TouchEnvironmentActivation_1.TouchEnvironmentActivation {\n  constructor(options) {\n    super({\n      onIsActiveChanged: options.onIsActiveChanged\n    });\n    this.pressDurationInMs = options.pressDurationInMs;\n    this.pressMoveThreshold = options.pressMoveThreshold;\n  }\n\n  touchStarted(event) {\n    this.initPressEventCriteria(event.position);\n    this.setPressEventTimer();\n  }\n\n  touchMoved(event) {\n    if (this.isActive) {\n      return;\n    }\n\n    this.setPressEventCriteria(event.position);\n  }\n\n  setPressEventTimer() {\n    this.timers.push({\n      name: constants_1.PRESS_EVENT_TIMER_NAME,\n      id: setTimeout(() => {\n        if (Math.abs(this.currentElTop - this.initialElTop) < this.pressMoveThreshold) {\n          this.activate();\n        }\n      }, this.pressDurationInMs)\n    });\n  }\n\n  setPressEventCriteria(position) {\n    this.currentElTop = position.y;\n  }\n\n  initPressEventCriteria(position) {\n    const top = position.y;\n    this.initialElTop = top;\n    this.currentElTop = top;\n  }\n\n}\n\nexports.PressActivation = PressActivation;","map":{"version":3,"sources":["../../../src/lib/PressActivation.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAQA,MAAa,eAAb,SAAqC,4BAAA,CAAA,0BAArC,CAA+D;AAK3D,EAAA,WAAA,CAAY,OAAZ,EAA2C;AACvC,UAAM;AAAE,MAAA,iBAAiB,EAAE,OAAO,CAAC;AAA7B,KAAN;AAEA,SAAK,iBAAL,GAAyB,OAAO,CAAC,iBAAjC;AACA,SAAK,kBAAL,GAA0B,OAAO,CAAC,kBAAlC;AACH;;AAED,EAAA,YAAY,CAAC,KAAD,EAAkB;AAC1B,SAAK,sBAAL,CAA4B,KAAK,CAAC,QAAlC;AACA,SAAK,kBAAL;AACH;;AAED,EAAA,UAAU,CAAC,KAAD,EAAkB;AACxB,QAAI,KAAK,QAAT,EAAmB;AACf;AACH;;AAED,SAAK,qBAAL,CAA2B,KAAK,CAAC,QAAjC;AACH;;AAED,EAAA,kBAAkB,GAAA;AACd,SAAK,MAAL,CAAY,IAAZ,CAAiB;AACb,MAAA,IAAI,EAAE,WAAA,CAAA,sBADO;AAEb,MAAA,EAAE,EAAE,UAAU,CAAC,MAAK;AAChB,YAAI,IAAI,CAAC,GAAL,CAAS,KAAK,YAAL,GAAoB,KAAK,YAAlC,IAAkD,KAAK,kBAA3D,EAA+E;AAC3E,eAAK,QAAL;AACH;AACJ,OAJa,EAIX,KAAK,iBAJM;AAFD,KAAjB;AAQH;;AAED,EAAA,qBAAqB,CAAC,QAAD,EAAgB;AACjC,SAAK,YAAL,GAAoB,QAAQ,CAAC,CAA7B;AACH;;AAED,EAAA,sBAAsB,CAAC,QAAD,EAAgB;AAClC,UAAM,GAAG,GAAG,QAAQ,CAAC,CAArB;AAEA,SAAK,YAAL,GAAoB,GAApB;AACA,SAAK,YAAL,GAAoB,GAApB;AACH;;AA7C0D;;AAA/D,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { PRESS_EVENT_TIMER_NAME } from 'src/constants';\nimport { TouchEnvironmentActivation, TouchEnvironmentActivationOptions } from 'src/lib/TouchEnvironmentActivation';\nimport type { Point, TouchEvent } from 'src/types';\n\nexport type PressActivationOptions = TouchEnvironmentActivationOptions & {\n    pressDurationInMs: number;\n    pressMoveThreshold: number;\n};\n\nexport class PressActivation extends TouchEnvironmentActivation {\n    pressDurationInMs: number;\n\n    pressMoveThreshold: number;\n\n    constructor(options: PressActivationOptions) {\n        super({ onIsActiveChanged: options.onIsActiveChanged });\n\n        this.pressDurationInMs = options.pressDurationInMs;\n        this.pressMoveThreshold = options.pressMoveThreshold;\n    }\n\n    touchStarted(event: TouchEvent): void {\n        this.initPressEventCriteria(event.position);\n        this.setPressEventTimer();\n    }\n\n    touchMoved(event: TouchEvent): void {\n        if (this.isActive) {\n            return;\n        }\n\n        this.setPressEventCriteria(event.position);\n    }\n\n    setPressEventTimer(): void {\n        this.timers.push({\n            name: PRESS_EVENT_TIMER_NAME,\n            id: setTimeout(() => {\n                if (Math.abs(this.currentElTop - this.initialElTop) < this.pressMoveThreshold) {\n                    this.activate();\n                }\n            }, this.pressDurationInMs),\n        });\n    }\n\n    setPressEventCriteria(position: Point): void {\n        this.currentElTop = position.y;\n    }\n\n    initPressEventCriteria(position: Point): void {\n        const top = position.y;\n\n        this.initialElTop = top;\n        this.currentElTop = top;\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}