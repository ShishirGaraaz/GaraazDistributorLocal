{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\OrderList\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { InputGroup, Input, InputRightElement, Box, useColorMode } from '@chakra-ui/react';\nimport messages from './messages';\nimport { Badge, Menu, MenuButton, MenuList, MenuItem, Button, Center } from '@chakra-ui/react';\nimport TableTop from '../../components/TableTop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllOrders, setAllOrders, setTotalCount } from './actions';\nimport moment from 'moment';\nimport toast from 'react-hot-toast';\nimport DynamicTable from '../../components/DynamicTable';\nimport { setBranches, getBranchList } from '../BranchList/actions';\nimport enums from '../../utils/enums';\nimport { FiMoreVertical } from 'react-icons/fi';\nimport OrderDetails from '../OrderDetails';\nimport { Switch, Route, useRouteMatch, useHistory } from 'react-router-dom';\nimport stringifyArray from '../../utils/stringifyArray';\nimport withToast from '../../HOCs/withToast';\nimport OrderOverview from '../OrderDetails/OrderOverView';\nimport RequestOrder from '../OrderDetails/RequestOrder';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport downloadExcel from '../../utils/downloadExcel';\nimport { selectGlobalState } from '../../globalSlice'; // import { devToolsEnhancer } from '@reduxjs/toolkit/dist/devtoolsExtension';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OrderList = _ref => {\n  _s();\n\n  let {\n    notification\n  } = _ref;\n  const intl = useIntl();\n  const [tableData, setTableData] = useState([]);\n  const [orderStatus, setOrderStatus] = useState([]);\n  const [branchValue, setBranchValue] = useState([]);\n  const [workshopValue, setWorkshopValue] = useState([]);\n  const [dates, setDates] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const [orderIds, setOrdIds] = useState('');\n  const auth = useSelector(state => state.auth);\n  const {\n    orders,\n    totalCount\n  } = useSelector(state => state.orderList);\n  const dispatcher = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const history = useHistory();\n  const [pageCount, setPageCount] = useState(0);\n  const {\n    branches,\n    workshops\n  } = useSelector(selectGlobalState);\n\n  const fetchAllOrders = params => {\n    (async () => {\n      setIsLoading(true);\n\n      try {\n        var _response$totalCount, _response$totalCount2;\n\n        const response = await getAllOrders(auth, params);\n        dispatcher(setAllOrders(response === null || response === void 0 ? void 0 : response.data));\n        params.limit = params !== null && params !== void 0 && params.limit ? params === null || params === void 0 ? void 0 : params.limit : 10;\n        setPageCount(Math.ceil((response === null || response === void 0 ? void 0 : (_response$totalCount = response.totalCount) === null || _response$totalCount === void 0 ? void 0 : _response$totalCount.count) / (params === null || params === void 0 ? void 0 : params.limit)));\n        dispatcher(setTotalCount(response === null || response === void 0 ? void 0 : (_response$totalCount2 = response.totalCount) === null || _response$totalCount2 === void 0 ? void 0 : _response$totalCount2.count));\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n\n        if (error.response) {\n          var _error$response$data$;\n\n          notification({\n            status: 'error',\n            description: (_error$response$data$ = error.response.data.message) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : intl.formatMessage(messages.errorMessage)\n          });\n        }\n      }\n    })();\n  };\n  /*  useEffect(() => {\r\n     fetchAllOrders();\r\n   }, []); */\n\n\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.date),\n    accessor: 'createdAt',\n    Cell: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return moment(value).format('DD/MM/YYYY');\n    }\n  }, {\n    Header: intl.formatMessage(messages.orderNo),\n    accessor: 'orderNo',\n    Cell: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return value;\n    }\n  }, {\n    Header: intl.formatMessage(messages.workshopCode),\n    accessor: row => {\n      var _row$workshop, _row$workshop$worksho;\n\n      return (_row$workshop = row.workshop) === null || _row$workshop === void 0 ? void 0 : (_row$workshop$worksho = _row$workshop.workshopcustomer[0]) === null || _row$workshop$worksho === void 0 ? void 0 : _row$workshop$worksho.code;\n    } //Cell: ({ value }) => value?.slice(0, 8),\n\n  }, {\n    Header: intl.formatMessage(messages.workshopName),\n    accessor: row => {\n      var _row$workshop2, _row$workshop2$worksh;\n\n      return (_row$workshop2 = row.workshop) === null || _row$workshop2 === void 0 ? void 0 : (_row$workshop2$worksh = _row$workshop2.workshopcustomer[0]) === null || _row$workshop2$worksh === void 0 ? void 0 : _row$workshop2$worksh.name;\n    }\n  }, {\n    Header: intl.formatMessage(messages.branchCode),\n    accessor: row => {\n      var _row$branch;\n\n      return (_row$branch = row.branch) === null || _row$branch === void 0 ? void 0 : _row$branch.branchCode;\n    }\n  }, {\n    Header: intl.formatMessage(messages.totalParts),\n    accessor: row => row.orderitems.length\n  }, {\n    Header: intl.formatMessage(messages.orderValue),\n    accessor: row =>\n    /*  row.orderitems.reduce(\r\n       (prevState, currentVal) => prevState + currentVal.price,\r\n       0,\r\n     ), */\n    row.orderitems.reduce((prev, curr) => prev + curr.price * curr.quantity, 0),\n    Cell: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.paymentMode),\n    accessor: row => row.paymentOption\n  }, {\n    Header: intl.formatMessage(messages.orderStatus),\n    accessor: 'status',\n    Cell: _ref5 => {\n      let {\n        value\n      } = _ref5;\n      return value === enums.UPDATED ? /*#__PURE__*/_jsxDEV(Badge, {\n        colorScheme: \"yellow\",\n        children: intl.formatMessage(messages.updatedStatus)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this) : value === enums.COMPLETED ? /*#__PURE__*/_jsxDEV(Badge, {\n        colorScheme: \"green\",\n        children: intl.formatMessage(messages.completedStatus)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Badge, {\n        colorScheme: \"orange\",\n        children: value.replace(/_/g, ' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.actions),\n    accessor: row => row._id,\n    Cell: allData => {\n      const handleViewOrderDetails = () => {\n        const status = allData.row.original.status;\n\n        if (status === enums.COMPLETED || status === enums.STOCK_TRANSFER_COMPLETED || status === enums.STOCK_TRANSFER_PLACED || status === enums.CBO || status === enums.LOST_SALE) {\n          history.push(`${url}/${allData.value}/overview`);\n        } else if (status === enums.REQUEST_ORDER) {\n          history.push(`${url}/${allData.value}/request-order`);\n        } else if (status === enums.UPDATED) {\n          history.push(`${url}/${allData.value}/order-summary`);\n          /* history.push(`${url}/${allData.value}/request-order`); */\n        } else {\n          history.push(`${url}/${allData.value}`);\n        }\n      };\n\n      return /*#__PURE__*/_jsxDEV(Menu, {\n        children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n          p: 0,\n          as: Button,\n          children: /*#__PURE__*/_jsxDEV(Center, {\n            children: /*#__PURE__*/_jsxDEV(FiMoreVertical, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n          onClick: handleViewOrderDetails,\n          children: /*#__PURE__*/_jsxDEV(MenuItem, {\n            children: \"View Detail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this);\n    }\n  }], []);\n\n  const handleSelectChange = (valueList, name) => {\n    const valueString = stringifyArray(valueList);\n    const statusString = stringifyArray(orderStatus);\n    const workshopString = stringifyArray(workshopValue);\n    const branchString = stringifyArray(branchValue);\n    const dateString = stringifyArray([dates.startDate, dates.endDate]);\n\n    if (name === enums.STATUS) {\n      setOrderStatus(valueList);\n      fetchAllOrders({\n        status: valueString,\n        order: orderIds,\n        workshop: workshopString,\n        branch: branchString,\n        date: dateString\n      });\n    } else if (name === enums.WORKSHOP) {\n      setWorkshopValue(valueList);\n      fetchAllOrders({\n        workshop: valueString,\n        order: orderIds,\n        branch: branchString,\n        status: statusString,\n        date: dateString\n      });\n    } else if (name === enums.BRANCH) {\n      setBranchValue(valueList);\n      fetchAllOrders({\n        branch: valueString,\n        order: orderIds,\n        workshop: workshopString,\n        status: statusString,\n        date: dateString\n      });\n    }\n  };\n\n  const handleSearchById = event => {\n    const idString = event.target.value;\n    const statusString = stringifyArray(orderStatus);\n    const workshopString = stringifyArray(workshopValue);\n    const branchString = stringifyArray(branchValue);\n    const dateString = stringifyArray([dates.startDate, dates.endDate]);\n    setOrdIds(idString);\n    fetchAllOrders({\n      status: statusString,\n      order: idString,\n      workshop: workshopString,\n      branch: branchString,\n      date: dateString\n    });\n  };\n  /* once workshop is implemented, this list will be replaced with fetched workshops */\n\n\n  const workshopOptions = workshops.map(workshop => ({\n    label: workshop === null || workshop === void 0 ? void 0 : workshop.name,\n    value: workshop === null || workshop === void 0 ? void 0 : workshop._id\n  }));\n  const branchOptions = branches.map(branch => ({\n    label: branch.branchName,\n    value: branch._id\n  }));\n\n  const checkIsBefore = (date1, date2) => {\n    return moment(date1).isBefore(date2);\n  };\n\n  const addToDate = (date, days) => {\n    return moment(date, 'YYYY-MM-DD').add(days, 'days').format('YYYY-MM-DD');\n  };\n\n  function subtractFromDate(date, days) {\n    return moment(date, 'YYYY-MM-DD').subtract(days, 'days').format('YYYY-MM-DD');\n  }\n\n  const handleExport = () => {\n    console.log({\n      tableData\n    });\n    const refinedTableData = [...tableData].map(data => {\n      return {\n        'Date': data.date,\n        'Order No': data.orderNo,\n        'Workshop Code': data.workshopCustomer[0].code,\n        'Workshop Name': data.workshopCustomer[0].name,\n        'Branch Code': data.branchCode,\n        'Total Parts': data.orderItems.length(),\n        'Order Value': data.orderValue,\n        'Payment Mode': data.paymentOption,\n        'Order Status': data.orderStatus\n      };\n    });\n    downloadExcel(refinedTableData, 'Branches.xlsx');\n  };\n\n  const handleDateChange = event => {\n    let dateString;\n    let {\n      value,\n      name\n    } = event.target;\n    const statusString = stringifyArray(orderStatus);\n    const workshopString = stringifyArray(workshopValue);\n    const branchString = stringifyArray(branchValue);\n\n    if (name === enums.STARTDATE && value) {\n      const endDate = dates.endDate ? dates.endDate : addToDate(value, 1);\n\n      if (!checkIsBefore(value, endDate)) {\n        notification({\n          status: 'error',\n          description: intl.formatMessage(messages.dateError)\n        });\n        return;\n      } else {\n        dateString = stringifyArray([value, endDate]);\n      }\n    }\n\n    if (name === enums.ENDDATE && value) {\n      const startDate = dates.startDate ? dates.startDate : subtractFromDate(value, 1);\n\n      if (checkIsBefore(value, startDate)) {\n        notification({\n          status: 'error',\n          description: intl.formatMessage(messages.dateError)\n        });\n      } else {\n        dateString = stringifyArray([startDate, value]);\n      }\n    }\n\n    setDates(prevState => ({ ...prevState,\n      [name]: value\n    }));\n    fetchAllOrders({\n      date: dateString,\n      status: statusString,\n      order: orderIds,\n      workshop: workshopString,\n      branch: branchString\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TableTop, {\n          onSearchOrderChange: handleSearchById,\n          onSelectChange: handleSelectChange,\n          orderStatus: orderStatus,\n          workshopOptions: workshopOptions,\n          branchOptions: branchOptions,\n          branchValue: branchValue,\n          workshopValue: workshopValue,\n          onDateChange: handleDateChange // Export = {handleExport}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleExport,\n          variant: \"addition\",\n          size: \"md\",\n          ml: 4,\n          children: intl.formatMessage(messages.exportToExcel)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n          columns: columns,\n          data: [...orders],\n          fetchData: fetchAllOrders,\n          totalCount: totalCount,\n          controlledPageCount: pageCount,\n          loading: isLoading,\n          skipPageReset: true,\n          params: {\n            order: orderIds,\n            status: stringifyArray(orderStatus),\n            branch: stringifyArray(branchValue),\n            workshop: stringifyArray(workshopValue),\n            date: stringifyArray([dates.startDate, dates.endDate])\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${path}/:id/overview`,\n      children: /*#__PURE__*/_jsxDEV(OrderOverview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${path}/:id/request-order`,\n      children: /*#__PURE__*/_jsxDEV(RequestOrder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/:id`,\n      children: /*#__PURE__*/_jsxDEV(OrderDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n}; // const InputBox = ({ islarge, children }) => {\n//   return (\n//     <Box\n//       width={{ base: '100%', lg: islarge ? '30rem' : '15rem' }}\n//       mr={[0, null, 8]}\n//       mb={15}\n//     >\n//       {children}\n//     </Box>\n//   );\n// };\n\n\n_s(OrderList, \"Xnm6wLtNutygvW8kKEIVI2X5sHU=\", false, function () {\n  return [useIntl, useSelector, useSelector, useDispatch, useRouteMatch, useHistory, useSelector];\n});\n\n_c = OrderList;\nexport default _c2 = withToast(OrderList);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OrderList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/OrderList/index.js"],"names":["React","useState","useMemo","useEffect","useIntl","InputGroup","Input","InputRightElement","Box","useColorMode","messages","Badge","Menu","MenuButton","MenuList","MenuItem","Button","Center","TableTop","useSelector","useDispatch","getAllOrders","setAllOrders","setTotalCount","moment","toast","DynamicTable","setBranches","getBranchList","enums","FiMoreVertical","OrderDetails","Switch","Route","useRouteMatch","useHistory","stringifyArray","withToast","OrderOverview","RequestOrder","getMoneyFormat","downloadExcel","selectGlobalState","OrderList","notification","intl","tableData","setTableData","orderStatus","setOrderStatus","branchValue","setBranchValue","workshopValue","setWorkshopValue","dates","setDates","startDate","endDate","orderIds","setOrdIds","auth","state","orders","totalCount","orderList","dispatcher","isLoading","setIsLoading","url","path","history","pageCount","setPageCount","branches","workshops","fetchAllOrders","params","response","data","limit","Math","ceil","count","error","status","description","message","formatMessage","errorMessage","columns","Header","date","accessor","Cell","value","format","orderNo","workshopCode","row","workshop","workshopcustomer","code","workshopName","name","branchCode","branch","totalParts","orderitems","length","orderValue","reduce","prev","curr","price","quantity","paymentMode","paymentOption","UPDATED","updatedStatus","COMPLETED","completedStatus","replace","actions","_id","allData","handleViewOrderDetails","original","STOCK_TRANSFER_COMPLETED","STOCK_TRANSFER_PLACED","CBO","LOST_SALE","push","REQUEST_ORDER","handleSelectChange","valueList","valueString","statusString","workshopString","branchString","dateString","STATUS","order","WORKSHOP","BRANCH","handleSearchById","event","idString","target","workshopOptions","map","label","branchOptions","branchName","checkIsBefore","date1","date2","isBefore","addToDate","days","add","subtractFromDate","subtract","handleExport","console","log","refinedTableData","workshopCustomer","orderItems","handleDateChange","STARTDATE","dateError","ENDDATE","prevState","exportToExcel"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport {\r\n  InputGroup,\r\n  Input,\r\n  InputRightElement,\r\n  Box,\r\n  useColorMode,\r\n} from '@chakra-ui/react';\r\n\r\nimport messages from './messages';\r\nimport {\r\n  Badge,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Button,\r\n  Center,\r\n} from '@chakra-ui/react';\r\nimport TableTop from '../../components/TableTop';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getAllOrders, setAllOrders, setTotalCount } from './actions';\r\nimport moment from 'moment';\r\nimport toast from 'react-hot-toast';\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport { setBranches, getBranchList } from '../BranchList/actions';\r\nimport enums from '../../utils/enums';\r\nimport { FiMoreVertical } from 'react-icons/fi';\r\nimport OrderDetails from '../OrderDetails';\r\nimport { Switch, Route, useRouteMatch, useHistory } from 'react-router-dom';\r\nimport stringifyArray from '../../utils/stringifyArray';\r\nimport withToast from '../../HOCs/withToast';\r\nimport OrderOverview from '../OrderDetails/OrderOverView';\r\nimport RequestOrder from '../OrderDetails/RequestOrder';\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\nimport downloadExcel from '../../utils/downloadExcel';\r\nimport {selectGlobalState} from '../../globalSlice'; \r\n// import { devToolsEnhancer } from '@reduxjs/toolkit/dist/devtoolsExtension';\r\n\r\n\r\nconst OrderList = ({ notification }) => {\r\n  const intl = useIntl();\r\n  const [tableData, setTableData] = useState([]);\r\n  const [orderStatus, setOrderStatus] = useState([]);\r\n  const [branchValue, setBranchValue] = useState([]);\r\n  const [workshopValue, setWorkshopValue] = useState([]);\r\n  const [dates, setDates] = useState({ startDate: '', endDate: '' });\r\n  const [orderIds, setOrdIds] = useState('');\r\n  const auth = useSelector((state) => state.auth);\r\n  const { orders, totalCount } = useSelector((state) => state.orderList);\r\n  const dispatcher = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { url, path } = useRouteMatch();\r\n  const history = useHistory();\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const { branches, workshops } = useSelector(selectGlobalState);\r\n\r\n\r\n\r\n  const fetchAllOrders = (params) => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await getAllOrders(auth, params);\r\n\r\n        dispatcher(setAllOrders(response?.data));\r\n\r\n       params.limit = params?.limit? params?.limit : 10;\r\n        setPageCount(Math.ceil(response?.totalCount?.count / params?.limit));\r\n\r\n        dispatcher(setTotalCount(response?.totalCount?.count));\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        if (error.response) {\r\n          notification({\r\n            status: 'error',\r\n            description:\r\n              error.response.data.message ??\r\n              intl.formatMessage(messages.errorMessage),\r\n          });\r\n        }\r\n      }\r\n    })();\r\n  };\r\n\r\n /*  useEffect(() => {\r\n    fetchAllOrders();\r\n  }, []); */\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.date),\r\n        accessor: 'createdAt',\r\n        Cell: ({ value }) => moment(value).format('DD/MM/YYYY'),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.orderNo),\r\n        accessor: 'orderNo',\r\n        Cell: ({ value }) => value,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.workshopCode),\r\n        accessor: (row) => row.workshop?.workshopcustomer[0]?.code,\r\n        //Cell: ({ value }) => value?.slice(0, 8),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.workshopName),\r\n        accessor: (row) => row.workshop?.workshopcustomer[0]?.name,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.branchCode),\r\n        accessor: (row) => row.branch?.branchCode,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.totalParts),\r\n        accessor: (row) =>\r\n          row.orderitems.length\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.orderValue),\r\n        accessor: (row) =>\r\n         /*  row.orderitems.reduce(\r\n            (prevState, currentVal) => prevState + currentVal.price,\r\n            0,\r\n          ), */\r\n\r\n\r\n           row.orderitems.reduce(\r\n            (prev, curr) => prev + curr.price * curr.quantity,\r\n            0,\r\n          ),\r\n          Cell: ({ value }) => getMoneyFormat(value),\r\n\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.paymentMode),\r\n        accessor: (row) => row.paymentOption,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.orderStatus),\r\n        accessor: 'status',\r\n        Cell: ({ value }) => {\r\n          return value === enums.UPDATED ? (\r\n            <Badge colorScheme='yellow'>\r\n              {intl.formatMessage(messages.updatedStatus)}\r\n            </Badge>\r\n          ) : value === enums.COMPLETED ? (\r\n            <Badge colorScheme='green'>\r\n              {intl.formatMessage(messages.completedStatus)}\r\n            </Badge>\r\n          ) : (\r\n            <Badge colorScheme='orange'>{value.replace(/_/g, ' ')}</Badge>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.actions),\r\n        accessor: (row) => row._id,\r\n        Cell: (allData) => {\r\n          const handleViewOrderDetails = () => {\r\n            const status = allData.row.original.status;\r\n            if (\r\n              status === enums.COMPLETED ||\r\n              status === enums.STOCK_TRANSFER_COMPLETED ||\r\n              status === enums.STOCK_TRANSFER_PLACED ||\r\n              status === enums.CBO ||\r\n              status === enums.LOST_SALE\r\n            ) {\r\n              history.push(`${url}/${allData.value}/overview`);\r\n            } else if (status === enums.REQUEST_ORDER) {\r\n              history.push(`${url}/${allData.value}/request-order`);\r\n            } else if (status === enums.UPDATED) {\r\n              history.push(`${url}/${allData.value}/order-summary`);\r\n              /* history.push(`${url}/${allData.value}/request-order`); */\r\n            } else {\r\n              history.push(`${url}/${allData.value}`);\r\n            }\r\n          };\r\n\r\n          return (\r\n            <Menu>\r\n              <MenuButton p={0} as={Button}>\r\n                <Center>\r\n                  <FiMoreVertical />\r\n                </Center>\r\n              </MenuButton>\r\n\r\n              <MenuList onClick={handleViewOrderDetails}>\r\n                <MenuItem>View Detail</MenuItem>\r\n              </MenuList>\r\n            </Menu>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const handleSelectChange = (valueList, name) => {\r\n    const valueString = stringifyArray(valueList);\r\n    const statusString = stringifyArray(orderStatus);\r\n    const workshopString = stringifyArray(workshopValue);\r\n    const branchString = stringifyArray(branchValue);\r\n    const dateString = stringifyArray([dates.startDate, dates.endDate]);\r\n\r\n    if (name === enums.STATUS) {\r\n      setOrderStatus(valueList);\r\n      fetchAllOrders({\r\n        status: valueString,\r\n        order: orderIds,\r\n        workshop: workshopString,\r\n        branch: branchString,\r\n        date: dateString,\r\n\r\n      });\r\n    } else if (name === enums.WORKSHOP) {\r\n      setWorkshopValue(valueList);\r\n      fetchAllOrders({\r\n        workshop: valueString,\r\n        order: orderIds,\r\n        branch: branchString,\r\n        status: statusString,\r\n        date: dateString,\r\n\r\n      });\r\n    } else if (name === enums.BRANCH) {\r\n      setBranchValue(valueList);\r\n      fetchAllOrders({\r\n        branch: valueString,\r\n        order: orderIds,\r\n        workshop: workshopString,\r\n        status: statusString,\r\n        date: dateString,\r\n\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSearchById = (event) => {\r\n    const idString = event.target.value;\r\n    const statusString = stringifyArray(orderStatus);\r\n    const workshopString = stringifyArray(workshopValue);\r\n    const branchString = stringifyArray(branchValue);\r\n    const dateString = stringifyArray([dates.startDate, dates.endDate]);\r\n\r\n    setOrdIds(idString);\r\n    fetchAllOrders({\r\n      status: statusString,\r\n      order: idString,\r\n      workshop: workshopString,\r\n      branch: branchString,\r\n      date: dateString,\r\n\r\n    });\r\n  };\r\n\r\n  /* once workshop is implemented, this list will be replaced with fetched workshops */\r\n  const workshopOptions = workshops.map((workshop) => ({\r\n    label: workshop?.name,\r\n    value: workshop?._id,\r\n  }));\r\n\r\n  const branchOptions = branches.map((branch) => ({\r\n    label: branch.branchName,\r\n    value: branch._id,\r\n  }));\r\n\r\n  const checkIsBefore = (date1, date2) => {\r\n    return moment(date1).isBefore(date2);\r\n  };\r\n\r\n  const addToDate = (date, days) => {\r\n    return moment(date, 'YYYY-MM-DD').add(days, 'days').format('YYYY-MM-DD');\r\n  };\r\n\r\n  function subtractFromDate(date, days) {\r\n    return moment(date, 'YYYY-MM-DD')\r\n      .subtract(days, 'days')\r\n      .format('YYYY-MM-DD');\r\n  }\r\n\r\n  const handleExport = () => {\r\n    console.log({tableData})\r\n    const refinedTableData = [...tableData].map((data) => {\r\n      return {\r\n        'Date': data.date,\r\n        'Order No': data.orderNo,\r\n        'Workshop Code': data.workshopCustomer[0].code,\r\n        'Workshop Name': data.workshopCustomer[0].name,\r\n        'Branch Code': data.branchCode,\r\n        'Total Parts': data.orderItems.length(),\r\n        'Order Value': data.orderValue,\r\n        'Payment Mode': data.paymentOption,\r\n        'Order Status': data.orderStatus,\r\n      };\r\n    });\r\n    downloadExcel(refinedTableData, 'Branches.xlsx');\r\n  };\r\n\r\n  const handleDateChange = (event) => {\r\n    let dateString;\r\n\r\n    let { value, name } = event.target;\r\n\r\n    const statusString = stringifyArray(orderStatus);\r\n    const workshopString = stringifyArray(workshopValue);\r\n    const branchString = stringifyArray(branchValue);\r\n\r\n    if (name === enums.STARTDATE && value) {\r\n      const endDate = dates.endDate ? dates.endDate : addToDate(value, 1);\r\n\r\n      if (!checkIsBefore(value, endDate)) {\r\n        notification({\r\n          status: 'error',\r\n          description: intl.formatMessage(messages.dateError),\r\n        });\r\n        return;\r\n      } else {\r\n        dateString = stringifyArray([value, endDate]);\r\n      }\r\n    }\r\n\r\n    if (name === enums.ENDDATE && value) {\r\n      const startDate = dates.startDate\r\n        ? dates.startDate\r\n        : subtractFromDate(value, 1);\r\n\r\n      if (checkIsBefore(value, startDate)) {\r\n        notification({\r\n          status: 'error',\r\n          description: intl.formatMessage(messages.dateError),\r\n        });\r\n      } else {\r\n        dateString = stringifyArray([startDate, value]);\r\n      }\r\n    }\r\n\r\n    setDates((prevState) => ({ ...prevState, [name]: value }));\r\n    fetchAllOrders({\r\n      date: dateString,\r\n      status: statusString,\r\n      order: orderIds,\r\n      workshop: workshopString,\r\n      branch: branchString,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path={path}>\r\n        <div>\r\n          {/* <InputBox>    */}\r\n          <TableTop\r\n            onSearchOrderChange={handleSearchById}\r\n            onSelectChange={handleSelectChange}\r\n            orderStatus={orderStatus}\r\n            workshopOptions={workshopOptions}\r\n            branchOptions={branchOptions}\r\n            branchValue={branchValue}\r\n            workshopValue={workshopValue}\r\n            onDateChange={handleDateChange}\r\n            // Export = {handleExport}\r\n          />\r\n          <Button\r\n                  onClick={handleExport}\r\n                  variant='addition'\r\n                  size='md'\r\n                  ml={4}\r\n              >\r\n            {intl.formatMessage(messages.exportToExcel)}\r\n            </Button>   \r\n            {/* </InputBox>    */}\r\n           \r\n          <DynamicTable\r\n            columns={columns}\r\n            data={[...orders]}\r\n            fetchData={fetchAllOrders}\r\n            totalCount={totalCount}\r\n            controlledPageCount={pageCount}\r\n            loading={isLoading}\r\n            skipPageReset={true}\r\n            params={{ order: orderIds, status: stringifyArray(orderStatus), branch: stringifyArray(branchValue),workshop:stringifyArray(workshopValue), date:stringifyArray([dates.startDate, dates.endDate])   }}\r\n          />\r\n        </div>\r\n      </Route>\r\n      <Route exact path={`${path}/:id/overview`}>\r\n        <OrderOverview />\r\n      </Route>\r\n      <Route exact path={`${path}/:id/request-order`}>\r\n        <RequestOrder />\r\n      </Route>\r\n      <Route path={`${path}/:id`}>\r\n        <OrderDetails />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n// const InputBox = ({ islarge, children }) => {\r\n//   return (\r\n//     <Box\r\n//       width={{ base: '100%', lg: islarge ? '30rem' : '15rem' }}\r\n//       mr={[0, null, 8]}\r\n//       mb={15}\r\n//     >\r\n//       {children}\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n\r\nexport default withToast(OrderList);\r\n"]},"metadata":{},"sourceType":"module"}