{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Konva } from '../Global.js';\nimport { getNumberValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Arc extends Shape {\n  _sceneFunc(context) {\n    var angle = Konva.getAngle(this.angle()),\n        clockwise = this.clockwise();\n    context.beginPath();\n    context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);\n    context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  getWidth() {\n    return this.outerRadius() * 2;\n  }\n\n  getHeight() {\n    return this.outerRadius() * 2;\n  }\n\n  setWidth(width) {\n    this.outerRadius(width / 2);\n  }\n\n  setHeight(height) {\n    this.outerRadius(height / 2);\n  }\n\n  getSelfRect() {\n    const radius = this.outerRadius();\n    const DEG_TO_RAD = Math.PI / 180;\n    const angle = this.angle() * DEG_TO_RAD;\n    const inc = 1 * DEG_TO_RAD;\n    let start = 0;\n    let end = angle + inc;\n\n    if (this.clockwise()) {\n      start = end;\n      end = 360;\n    }\n\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < end; i += inc) {\n      xs.push(Math.cos(i));\n      ys.push(Math.sin(i));\n    }\n\n    const minX = Math.round(radius * Math.min(...xs));\n    const maxX = Math.round(radius * Math.max(...xs));\n    const minY = Math.round(radius * Math.min(...ys));\n    const maxY = Math.round(radius * Math.max(...ys));\n    return {\n      x: minX || 0,\n      y: minY || 0,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n}\nArc.prototype._centroid = true;\nArc.prototype.className = 'Arc';\nArc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\n\n_registerNode(Arc);\n\nFactory.addGetterSetter(Arc, 'innerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'outerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'angle', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'clockwise', false, getBooleanValidator());","map":{"version":3,"sources":["../../src/shapes/Arc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Konva } from '../Global.js';\nimport { getNumberValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Arc extends Shape {\n    _sceneFunc(context) {\n        var angle = Konva.getAngle(this.angle()), clockwise = this.clockwise();\n        context.beginPath();\n        context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);\n        context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    getWidth() {\n        return this.outerRadius() * 2;\n    }\n    getHeight() {\n        return this.outerRadius() * 2;\n    }\n    setWidth(width) {\n        this.outerRadius(width / 2);\n    }\n    setHeight(height) {\n        this.outerRadius(height / 2);\n    }\n    getSelfRect() {\n        const radius = this.outerRadius();\n        const DEG_TO_RAD = Math.PI / 180;\n        const angle = this.angle() * DEG_TO_RAD;\n        const inc = 1 * DEG_TO_RAD;\n        let start = 0;\n        let end = angle + inc;\n        if (this.clockwise()) {\n            start = end;\n            end = 360;\n        }\n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < end; i += inc) {\n            xs.push(Math.cos(i));\n            ys.push(Math.sin(i));\n        }\n        const minX = Math.round(radius * Math.min(...xs));\n        const maxX = Math.round(radius * Math.max(...xs));\n        const minY = Math.round(radius * Math.min(...ys));\n        const maxY = Math.round(radius * Math.max(...ys));\n        return {\n            x: minX || 0,\n            y: minY || 0,\n            width: maxX - minX,\n            height: maxY - minY\n        };\n    }\n}\nArc.prototype._centroid = true;\nArc.prototype.className = 'Arc';\nArc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\n_registerNode(Arc);\nFactory.addGetterSetter(Arc, 'innerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'outerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'angle', 0, getNumberValidator());\nFactory.addGetterSetter(Arc, 'clockwise', false, getBooleanValidator());\n//# sourceMappingURL=Arc.js.map"]},"metadata":{},"sourceType":"module"}