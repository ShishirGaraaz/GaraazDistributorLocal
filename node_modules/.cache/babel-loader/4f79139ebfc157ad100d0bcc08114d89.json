{"ast":null,"code":"import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = ('ontouchstart' in Konva._global);\n\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\n\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\n\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\n\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  });\n}\n\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\n\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n\n  return snapped;\n}\n\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._transforming = false;\n\n    this._createElements();\n\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n\n  setNodes() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n\n    this._nodes = nodes;\n\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n\n        this._resetTransformCache();\n\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n\n      const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n\n      node.on(additionalEvents, onChange);\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n\n      this._proxyDrag(node);\n    });\n\n    this._resetTransformCache();\n\n    var elementsCreated = !!this.findOne('.top-left');\n\n    if (elementsCreated) {\n      this.update();\n    }\n\n    return this;\n  }\n\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n\n        if (otherNode.isDragging()) {\n          return;\n        }\n\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n\n  getNodes() {\n    return this._nodes || [];\n  }\n\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n\n    this._nodes = [];\n\n    this._resetTransformCache();\n  }\n\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n\n    this._clearCache('transform');\n\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n\n  __getNodeShape(node) {\n    let rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n    let relative = arguments.length > 2 ? arguments[2] : undefined;\n    var rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    var absScale = node.getAbsoluteScale(relative);\n    var absPos = node.getAbsolutePosition(relative);\n    var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n\n  __getNodeRect() {\n    var node = this.getNode();\n\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        var transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    var minX, minY, maxX, maxY;\n    totalPoints.forEach(function (point) {\n      var transformed = tr.point(point);\n\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n\n  getX() {\n    return this._getNodeRect().x;\n  }\n\n  getY() {\n    return this._getNodeRect().y;\n  }\n\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n\n  _createElements() {\n    this._createBack();\n\n    ANCHORS_NAMES.forEach(function (name) {\n      this._createAnchor(name);\n    }.bind(this));\n\n    this._createAnchor('rotater');\n  }\n\n  _createAnchor(name) {\n    var anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    var self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      var rad = Konva.getAngle(this.rotation());\n      var cursor = getCursor(name, rad);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n\n  _createBack() {\n    var back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      draggable: true,\n\n      sceneFunc(ctx) {\n        var tr = this.getParent();\n        var padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n        ctx.moveTo(this.width() / 2, -padding);\n\n        if (tr.rotateEnabled()) {\n          ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n        }\n\n        ctx.fillStrokeShape(this);\n      },\n\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n\n        var padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n\n    this._proxyDrag(back);\n\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n\n  _handleMouseDown(e) {\n    this._movingAnchorName = e.target.name().split(' ')[0];\n\n    var attrs = this._getNodeRect();\n\n    var width = attrs.width;\n    var height = attrs.height;\n    var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n\n    this._transforming = true;\n    var ap = e.target.getAbsolutePosition();\n    var pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n\n    this._fire('transformstart', {\n      evt: e,\n      target: this.getNode()\n    });\n\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e,\n        target\n      });\n    });\n  }\n\n  _handleMouseMove(e) {\n    var x, y, newHypotenuse;\n    var anchorNode = this.findOne('.' + this._movingAnchorName);\n    var stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n\n    if (this._movingAnchorName === 'rotater') {\n      var attrs = this._getNodeRect();\n\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n\n      var oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n\n      this._fitNodesInto(shape, e);\n\n      return;\n    }\n\n    var keepProportion = this.keepRatio() || e.shiftKey;\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        var comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n\n    var centeredScaling = this.centeredScaling() || e.altKey;\n\n    if (centeredScaling) {\n      var topLeft = this.findOne('.top-left');\n      var bottomRight = this.findOne('.bottom-right');\n      var topOffsetX = topLeft.x();\n      var topOffsetY = topLeft.y();\n      var bottomOffsetX = this.getWidth() - bottomRight.x();\n      var bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n\n    var absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n\n  _removeEvents(e) {\n    if (this._transforming) {\n      this._transforming = false;\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n\n      var node = this.getNode();\n\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n\n      if (node) {\n        this._nodes.forEach(target => {\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n        });\n      }\n\n      this._movingAnchorName = null;\n    }\n  }\n\n  _fitNodesInto(newAttrs, evt) {\n    var oldAttrs = this._getNodeRect();\n\n    const minSize = 1;\n\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n\n    const allowNegativeScale = this.flipEnabled();\n    var t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n\n      if (!allowNegativeScale) {\n        this.update();\n        return;\n      }\n    }\n\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    newTr.translate(newAttrs.x, newAttrs.y);\n    newTr.rotate(newAttrs.rotation);\n    newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n    const delta = newTr.multiply(oldTr.invert());\n\n    this._nodes.forEach(node => {\n      var _a;\n\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n\n    this.rotation(Util._getRotation(newAttrs.rotation));\n\n    this._resetTransformCache();\n\n    this.update();\n    this.getLayer().batchDraw();\n  }\n\n  forceUpdate() {\n    this._resetTransformCache();\n\n    this.update();\n  }\n\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n\n  update() {\n    var _a;\n\n    var attrs = this._getNodeRect();\n\n    this.rotation(Util._getRotation(attrs.rotation));\n    var width = attrs.width;\n    var height = attrs.height;\n    var enabledAnchors = this.enabledAnchors();\n    var resizeEnabled = this.resizeEnabled();\n    var padding = this.padding();\n    var anchorSize = this.anchorSize();\n    this.find('._anchor').forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      x: 0,\n      y: 0\n    });\n\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n\n  isTransforming() {\n    return this._transforming;\n  }\n\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n\n    Group.prototype.destroy.call(this);\n    this.detach();\n\n    this._removeEvents();\n\n    return this;\n  }\n\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n\n}\n\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n\n  return val || [];\n}\n\nTransformer.prototype.className = 'Transformer';\n\n_registerNode(Transformer);\n\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"sources":["../../src/shapes/Transformer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n//# sourceMappingURL=Transformer.js.map"]},"metadata":{},"sourceType":"module"}