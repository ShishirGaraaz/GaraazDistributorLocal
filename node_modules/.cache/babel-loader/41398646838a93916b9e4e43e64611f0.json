{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints();\n\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n\n    for (var n = 1; n < points.length; n++) {\n      context.lineTo(points[n].x, points[n].y);\n    }\n\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n\n    for (var n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n\n    return points;\n  }\n\n  getSelfRect() {\n    const points = this._getPoints();\n\n    var minX = points[0].x;\n    var maxX = points[0].y;\n    var minY = points[0].x;\n    var maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  getWidth() {\n    return this.radius() * 2;\n  }\n\n  getHeight() {\n    return this.radius() * 2;\n  }\n\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n\n_registerNode(RegularPolygon);\n\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());","map":{"version":3,"sources":["../../src/shapes/RegularPolygon.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints();\n        context.beginPath();\n        context.moveTo(points[0].x, points[0].y);\n        for (var n = 1; n < points.length; n++) {\n            context.lineTo(points[n].x, points[n].y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (var n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        var minX = points[0].x;\n        var maxX = points[0].y;\n        var minY = points[0].x;\n        var maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\n//# sourceMappingURL=RegularPolygon.js.map"]},"metadata":{},"sourceType":"module"}