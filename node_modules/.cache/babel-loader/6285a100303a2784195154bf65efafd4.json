{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Services from './services';\nconst inventorySlice = createSlice({\n  name: 'inventorySlice',\n  initialState: {\n    allStock: []\n  },\n  reducers: {\n    addAllStock: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.allStock = payload;\n    }\n  }\n});\nexport const {\n  addAllStock\n} = inventorySlice.actions;\nexport const getAllStock = payload => dispatcher => {\n  return Services.getAllStock(payload).then(response => {\n    dispatcher(addAllStock(Array.isArray(response === null || response === void 0 ? void 0 : response.data) ? response.data : []));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response, _error$response$data;\n\n      return Promise.reject((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message);\n    }\n  });\n};\nexport const getBranchStocks = payload => dispatcher => {\n  return Services.getAllStockByBranch(payload).then(response => {\n    dispatcher(addAllStock(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response2, _error$response2$data;\n\n      return Promise.reject((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message);\n    }\n  });\n};\nexport const uploadStock = payload => dispatcher => {\n  return Services.uploadStock(payload).then(response => {}, error => {\n    if (error.response) {\n      var _error$response3, _error$response3$data;\n\n      return Promise.reject((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message);\n    }\n  });\n};\nexport const selectInventory = state => state.inventorydetail;\nexport default inventorySlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/Inventory/slice.js"],"names":["createSlice","Services","inventorySlice","name","initialState","allStock","reducers","addAllStock","state","payload","actions","getAllStock","dispatcher","then","response","Array","isArray","data","Promise","resolve","error","reject","message","getBranchStocks","getAllStockByBranch","uploadStock","selectInventory","inventorydetail","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,cAAc,GAAGF,WAAW,CAAC;AAC/BG,EAAAA,IAAI,EAAC,gBAD0B;AAE/BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE;AADA,GAFiB;AAK/BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AAC/BD,MAAAA,KAAK,CAACH,QAAN,GAAiBI,OAAjB;AACH;AAHK;AALqB,CAAD,CAAlC;AAcA,OAAO,MAAM;AAAEF,EAAAA;AAAF,IAAmBL,cAAc,CAACQ,OAAxC;AAGP,OAAO,MAAMC,WAAW,GAAIF,OAAD,IAAaG,UAAU,IAAI;AAClD,SAAOX,QAAQ,CAACU,WAAT,CAAqBF,OAArB,EAA8BI,IAA9B,CACHC,QAAQ,IAAI;AACRF,IAAAA,UAAU,CAACL,WAAW,CAACQ,KAAK,CAACC,OAAN,CAAcF,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAEG,IAAxB,IAAgCH,QAAQ,CAACG,IAAzC,GAAgD,EAAjD,CAAZ,CAAV;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBL,QAAQ,CAACG,IAAzB,CAAP;AACH,GAJE,EAKHG,KAAK,IAAI;AACL,QAAGA,KAAK,CAACN,QAAT,EAAkB;AAAA;;AACd,aAAOI,OAAO,CAACG,MAAR,oBAAeD,KAAK,CAACN,QAArB,4EAAe,gBAAgBG,IAA/B,yDAAe,qBAAsBK,OAArC,CAAP;AACH;AACJ,GATE,CAAP;AAWH,CAZM;AAeP,OAAO,MAAMC,eAAe,GAAId,OAAD,IAAaG,UAAU,IAAI;AACtD,SAAOX,QAAQ,CAACuB,mBAAT,CAA6Bf,OAA7B,EAAsCI,IAAtC,CACHC,QAAQ,IAAI;AACRF,IAAAA,UAAU,CAACL,WAAW,CAACO,QAAQ,CAACG,IAAV,CAAZ,CAAV;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBL,QAAQ,CAACG,IAAzB,CAAP;AACH,GAJE,EAKHG,KAAK,IAAI;AACL,QAAGA,KAAK,CAACN,QAAT,EAAkB;AAAA;;AACd,aAAOI,OAAO,CAACG,MAAR,qBAAeD,KAAK,CAACN,QAArB,8EAAe,iBAAgBG,IAA/B,0DAAe,sBAAsBK,OAArC,CAAP;AACH;AACJ,GATE,CAAP;AAWH,CAZM;AAcP,OAAO,MAAMG,WAAW,GAAIhB,OAAD,IAAaG,UAAU,IAAI;AAClD,SAAOX,QAAQ,CAACwB,WAAT,CAAqBhB,OAArB,EAA8BI,IAA9B,CACHC,QAAQ,IAAI,CACX,CAFE,EAGHM,KAAK,IAAI;AACL,QAAGA,KAAK,CAACN,QAAT,EAAkB;AAAA;;AACd,aAAOI,OAAO,CAACG,MAAR,qBAAeD,KAAK,CAACN,QAArB,8EAAe,iBAAgBG,IAA/B,0DAAe,sBAAsBK,OAArC,CAAP;AACH;AACJ,GAPE,CAAP;AASH,CAVM;AAYP,OAAO,MAAMI,eAAe,GAAGlB,KAAK,IAAIA,KAAK,CAACmB,eAAvC;AAGP,eAAezB,cAAc,CAAC0B,OAA9B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport Services from './services';\r\n\r\nconst inventorySlice = createSlice({\r\n    name:'inventorySlice',\r\n    initialState: {\r\n        allStock: [],\r\n    },\r\n    reducers: {\r\n        addAllStock: (state, {payload}) => {\r\n            state.allStock = payload;\r\n        },\r\n        \r\n    }\r\n});\r\n\r\n\r\nexport const { addAllStock }  = inventorySlice.actions;\r\n\r\n\r\nexport const getAllStock = (payload) => dispatcher => {\r\n    return Services.getAllStock(payload).then(\r\n        response => {\r\n            dispatcher(addAllStock(Array.isArray(response?.data) ? response.data : []));\r\n            return Promise.resolve(response.data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response?.data?.message); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport const getBranchStocks = (payload) => dispatcher => {\r\n    return Services.getAllStockByBranch(payload).then(\r\n        response => {\r\n            dispatcher(addAllStock(response.data));\r\n            return Promise.resolve(response.data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response?.data?.message); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const uploadStock = (payload) => dispatcher => {\r\n    return Services.uploadStock(payload).then(\r\n        response => {\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response?.data?.message);\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const selectInventory = state => state.inventorydetail\r\n\r\n\r\nexport default inventorySlice.reducer;"]},"metadata":{},"sourceType":"module"}