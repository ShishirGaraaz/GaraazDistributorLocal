{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\StockTransfer\\\\StatusComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Box, Button, Menu, MenuButton, Center, MenuList, MenuItem, Badge, Textarea } from '@chakra-ui/react';\nimport { useIntl } from 'react-intl';\nimport withToast from '../../HOCs/withToast';\nimport { getAllStockTranferRequest, updateStockTransferStatus } from './slice';\nimport messages from './messages';\nimport enums from '../../utils/enums';\nimport SimpleModal from '../../components/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatusComponent = withToast(_c = _s(_ref => {\n  _s();\n\n  let {\n    value,\n    notification,\n    onOpenCommentModal\n  } = _ref;\n  const intl = useIntl();\n  const auth = useSelector(state => state.auth);\n  const dispatcher = useDispatch();\n  const [loading, setLoading] = useState(false);\n\n  const canChangeStatus = status => {\n    const {\n      status: prevStatus\n    } = value;\n    return prevStatus === enums.REQUESTED && status === enums.APPROVED || prevStatus === enums.APPROVED && status === enums.READY_TO_DISPATCH || prevStatus === enums.READY_TO_DISPATCH && status === enums.IN_TRANSIT || prevStatus === enums.IN_TRANSIT && status === enums.DELIVERED;\n  };\n\n  const handleStatusChange = status => async () => {\n    /*  setLoading(true);\r\n    if (!canChangeStatus(status)) {\r\n    notification({\r\n      status: 'error',\r\n      title: 'Invalid status selection',\r\n      description: 'Please select the appropriate status',\r\n    });\r\n    setLoading(false);\r\n    return;\r\n    }\r\n    try {\r\n    await dispatcher(\r\n      updateStockTransferStatus({ auth, id: value.id, data: { status } }),\r\n    );\r\n    await dispatcher(getAllStockTranferRequest({ auth }));\r\n    setLoading(false);\r\n    notification({\r\n      status: 'success',\r\n      description: `Status was changed from ${value.status} to ${status}`,\r\n    });\r\n    } catch (error) {\r\n    setLoading(false);\r\n    notification({ status: 'error', description: `Please try again later` });\r\n    } */\n    if (!canChangeStatus(status)) {\n      notification({\n        status: 'error',\n        title: 'Invalid status selection',\n        description: 'Please select the appropriate status'\n      });\n      return;\n    }\n\n    onOpenCommentModal({\n      status,\n      id: value.id\n    });\n  };\n\n  const color = useMemo(() => {\n    if (value.status === enums.DELIVERED) {\n      return 'green';\n    } else if (value.status === enums.REQUESTED) {\n      return 'orange';\n    } else if (value.status === enums.APPROVED) {\n      return 'blue';\n    } else if (value.status === enums.READY_TO_DISPATCH) {\n      return 'purple';\n    } else if (value.status === enums.IN_TRANSIT) {\n      return 'red';\n    }\n  }, [value.status]);\n  return /*#__PURE__*/_jsxDEV(Menu, {\n    children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n      p: 0,\n      as: Button,\n      variant: \"ghost\",\n      children: /*#__PURE__*/_jsxDEV(Center, {\n        children: loading ? /*#__PURE__*/_jsxDEV(Box, {\n          textStyle: \"label\",\n          children: \"...loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Badge, {\n          colorScheme: color,\n          p: 2,\n          borderRadius: \"5\",\n          children: value.status.replace(/_/g, ' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), value.status !== enums.DELIVERED && /*#__PURE__*/_jsxDEV(MenuList, {\n      children: [value.status === enums.REQUESTED && /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: handleStatusChange(enums.APPROVED),\n        children: intl.formatMessage(messages.approved)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), value.status === enums.APPROVED && /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: handleStatusChange(enums.READY_TO_DISPATCH),\n        children: intl.formatMessage(messages.readyForDispatch)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), value.status === enums.READY_TO_DISPATCH && /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: handleStatusChange(enums.IN_TRANSIT),\n        children: intl.formatMessage(messages.inTransit)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), value.status === enums.IN_TRANSIT && /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: handleStatusChange(enums.DELIVERED),\n        children: intl.formatMessage(messages.delivered)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }, this);\n}, \"KIyPiQTQF5/SJm+rGPEDPDfCR/U=\", false, function () {\n  return [useIntl, useSelector, useDispatch];\n}));\n_c2 = StatusComponent;\nexport default StatusComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StatusComponent$withToast\");\n$RefreshReg$(_c2, \"StatusComponent\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/StockTransfer/StatusComponent.js"],"names":["React","useState","useMemo","useSelector","useDispatch","Box","Button","Menu","MenuButton","Center","MenuList","MenuItem","Badge","Textarea","useIntl","withToast","getAllStockTranferRequest","updateStockTransferStatus","messages","enums","SimpleModal","StatusComponent","value","notification","onOpenCommentModal","intl","auth","state","dispatcher","loading","setLoading","canChangeStatus","status","prevStatus","REQUESTED","APPROVED","READY_TO_DISPATCH","IN_TRANSIT","DELIVERED","handleStatusChange","title","description","id","color","replace","formatMessage","approved","readyForDispatch","inTransit","delivered"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  Center,\r\n  MenuList,\r\n  MenuItem,\r\n  Badge,\r\n  Textarea,\r\n} from '@chakra-ui/react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport withToast from '../../HOCs/withToast';\r\nimport { getAllStockTranferRequest, updateStockTransferStatus } from './slice';\r\nimport messages from './messages';\r\nimport enums from '../../utils/enums';\r\nimport SimpleModal from '../../components/Modal';\r\n\r\nconst StatusComponent = withToast(\r\n  ({ value, notification, onOpenCommentModal }) => {\r\n    const intl = useIntl();\r\n    const auth = useSelector((state) => state.auth);\r\n    const dispatcher = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const canChangeStatus = (status) => {\r\n      const { status: prevStatus } = value;\r\n      return (\r\n        (prevStatus === enums.REQUESTED && status === enums.APPROVED) ||\r\n        (prevStatus === enums.APPROVED && status === enums.READY_TO_DISPATCH) ||\r\n        (prevStatus === enums.READY_TO_DISPATCH &&\r\n          status === enums.IN_TRANSIT) ||\r\n        (prevStatus === enums.IN_TRANSIT && status === enums.DELIVERED)\r\n      );\r\n    };\r\n\r\n    const handleStatusChange = (status) => async () => {\r\n      /*  setLoading(true);\r\n\r\n    if (!canChangeStatus(status)) {\r\n      notification({\r\n        status: 'error',\r\n        title: 'Invalid status selection',\r\n        description: 'Please select the appropriate status',\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await dispatcher(\r\n        updateStockTransferStatus({ auth, id: value.id, data: { status } }),\r\n      );\r\n      await dispatcher(getAllStockTranferRequest({ auth }));\r\n      setLoading(false);\r\n      notification({\r\n        status: 'success',\r\n        description: `Status was changed from ${value.status} to ${status}`,\r\n      });\r\n    } catch (error) {\r\n      setLoading(false);\r\n      notification({ status: 'error', description: `Please try again later` });\r\n    } */\r\n\r\n      if (!canChangeStatus(status)) {\r\n        notification({\r\n          status: 'error',\r\n          title: 'Invalid status selection',\r\n          description: 'Please select the appropriate status',\r\n        });\r\n        return;\r\n      }\r\n\r\n      onOpenCommentModal({ status, id: value.id });\r\n    };\r\n\r\n    const color = useMemo(() => {\r\n      if (value.status === enums.DELIVERED) {\r\n        return 'green';\r\n      } else if (value.status === enums.REQUESTED) {\r\n        return 'orange';\r\n      } else if (value.status === enums.APPROVED) {\r\n        return 'blue';\r\n      } else if (value.status === enums.READY_TO_DISPATCH) {\r\n        return 'purple';\r\n      } else if (value.status === enums.IN_TRANSIT) {\r\n        return 'red';\r\n      }\r\n    }, [value.status]);\r\n    return (\r\n      <Menu>\r\n        <MenuButton p={0} as={Button} variant='ghost'>\r\n          <Center>\r\n            {loading ? (\r\n              <Box textStyle='label'>...loading</Box>\r\n            ) : (\r\n              <Badge colorScheme={color} p={2} borderRadius='5'>\r\n                {value.status.replace(/_/g, ' ')}\r\n              </Badge>\r\n            )}\r\n          </Center>\r\n        </MenuButton>\r\n       { value.status !== enums.DELIVERED && <MenuList>\r\n          {value.status === enums.REQUESTED && (\r\n            <MenuItem onClick={handleStatusChange(enums.APPROVED)}>\r\n              {intl.formatMessage(messages.approved)}\r\n            </MenuItem>\r\n          )}\r\n          {value.status === enums.APPROVED && (\r\n            <MenuItem onClick={handleStatusChange(enums.READY_TO_DISPATCH)}>\r\n              {intl.formatMessage(messages.readyForDispatch)}\r\n            </MenuItem>\r\n          )}\r\n          {value.status === enums.READY_TO_DISPATCH && (\r\n            <MenuItem onClick={handleStatusChange(enums.IN_TRANSIT)}>\r\n              {intl.formatMessage(messages.inTransit)}\r\n            </MenuItem>\r\n          )}\r\n          {value.status === enums.IN_TRANSIT && (\r\n            <MenuItem onClick={handleStatusChange(enums.DELIVERED)}>\r\n              {intl.formatMessage(messages.delivered)}\r\n            </MenuItem>\r\n          )}\r\n        </MenuList>}\r\n    \r\n      </Menu>\r\n    );\r\n  },\r\n);\r\n\r\nexport default StatusComponent;\r\n"]},"metadata":{},"sourceType":"module"}