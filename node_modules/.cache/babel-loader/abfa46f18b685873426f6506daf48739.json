{"ast":null,"code":"import { Util } from './Util.js';\nimport { SceneContext, HitContext } from './Context.js';\nimport { Konva } from './Global.js';\nimport { Factory } from './Factory.js';\nimport { getNumberValidator } from './Validators.js';\n\nvar _pixelRatio;\n\nfunction getDevicePixelRatio() {\n  if (_pixelRatio) {\n    return _pixelRatio;\n  }\n\n  var canvas = Util.createCanvasElement();\n  var context = canvas.getContext('2d');\n\n  _pixelRatio = function () {\n    var devicePixelRatio = Konva._global.devicePixelRatio || 1,\n        backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    return devicePixelRatio / backingStoreRatio;\n  }();\n\n  return _pixelRatio;\n}\n\nexport class Canvas {\n  constructor(config) {\n    this.pixelRatio = 1;\n    this.width = 0;\n    this.height = 0;\n    this.isCache = false;\n    var conf = config || {};\n    var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\n    this.pixelRatio = pixelRatio;\n    this._canvas = Util.createCanvasElement();\n    this._canvas.style.padding = '0';\n    this._canvas.style.margin = '0';\n    this._canvas.style.border = '0';\n    this._canvas.style.background = 'transparent';\n    this._canvas.style.position = 'absolute';\n    this._canvas.style.top = '0';\n    this._canvas.style.left = '0';\n  }\n\n  getContext() {\n    return this.context;\n  }\n\n  getPixelRatio() {\n    return this.pixelRatio;\n  }\n\n  setPixelRatio(pixelRatio) {\n    var previousRatio = this.pixelRatio;\n    this.pixelRatio = pixelRatio;\n    this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n  }\n\n  setWidth(width) {\n    this.width = this._canvas.width = width * this.pixelRatio;\n    this._canvas.style.width = width + 'px';\n\n    var pixelRatio = this.pixelRatio,\n        _context = this.getContext()._context;\n\n    _context.scale(pixelRatio, pixelRatio);\n  }\n\n  setHeight(height) {\n    this.height = this._canvas.height = height * this.pixelRatio;\n    this._canvas.style.height = height + 'px';\n\n    var pixelRatio = this.pixelRatio,\n        _context = this.getContext()._context;\n\n    _context.scale(pixelRatio, pixelRatio);\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  setSize(width, height) {\n    this.setWidth(width || 0);\n    this.setHeight(height || 0);\n  }\n\n  toDataURL(mimeType, quality) {\n    try {\n      return this._canvas.toDataURL(mimeType, quality);\n    } catch (e) {\n      try {\n        return this._canvas.toDataURL();\n      } catch (err) {\n        Util.error('Unable to get data URL. ' + err.message + ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n        return '';\n      }\n    }\n  }\n\n}\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\nexport class SceneCanvas extends Canvas {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 0,\n      height: 0\n    };\n    super(config);\n    this.context = new SceneContext(this);\n    this.setSize(config.width, config.height);\n  }\n\n}\nexport class HitCanvas extends Canvas {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 0,\n      height: 0\n    };\n    super(config);\n    this.hitCanvas = true;\n    this.context = new HitContext(this);\n    this.setSize(config.width, config.height);\n  }\n\n}","map":{"version":3,"sources":["../src/Canvas.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from './Util.js';\nimport { SceneContext, HitContext } from './Context.js';\nimport { Konva } from './Global.js';\nimport { Factory } from './Factory.js';\nimport { getNumberValidator } from './Validators.js';\nvar _pixelRatio;\nfunction getDevicePixelRatio() {\n    if (_pixelRatio) {\n        return _pixelRatio;\n    }\n    var canvas = Util.createCanvasElement();\n    var context = canvas.getContext('2d');\n    _pixelRatio = (function () {\n        var devicePixelRatio = Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||\n            context.mozBackingStorePixelRatio ||\n            context.msBackingStorePixelRatio ||\n            context.oBackingStorePixelRatio ||\n            context.backingStorePixelRatio ||\n            1;\n        return devicePixelRatio / backingStoreRatio;\n    })();\n    return _pixelRatio;\n}\nexport class Canvas {\n    constructor(config) {\n        this.pixelRatio = 1;\n        this.width = 0;\n        this.height = 0;\n        this.isCache = false;\n        var conf = config || {};\n        var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\n        this.pixelRatio = pixelRatio;\n        this._canvas = Util.createCanvasElement();\n        this._canvas.style.padding = '0';\n        this._canvas.style.margin = '0';\n        this._canvas.style.border = '0';\n        this._canvas.style.background = 'transparent';\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.top = '0';\n        this._canvas.style.left = '0';\n    }\n    getContext() {\n        return this.context;\n    }\n    getPixelRatio() {\n        return this.pixelRatio;\n    }\n    setPixelRatio(pixelRatio) {\n        var previousRatio = this.pixelRatio;\n        this.pixelRatio = pixelRatio;\n        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n    }\n    setWidth(width) {\n        this.width = this._canvas.width = width * this.pixelRatio;\n        this._canvas.style.width = width + 'px';\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\n        _context.scale(pixelRatio, pixelRatio);\n    }\n    setHeight(height) {\n        this.height = this._canvas.height = height * this.pixelRatio;\n        this._canvas.style.height = height + 'px';\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\n        _context.scale(pixelRatio, pixelRatio);\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    setSize(width, height) {\n        this.setWidth(width || 0);\n        this.setHeight(height || 0);\n    }\n    toDataURL(mimeType, quality) {\n        try {\n            return this._canvas.toDataURL(mimeType, quality);\n        }\n        catch (e) {\n            try {\n                return this._canvas.toDataURL();\n            }\n            catch (err) {\n                Util.error('Unable to get data URL. ' +\n                    err.message +\n                    ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n                return '';\n            }\n        }\n    }\n}\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\nexport class SceneCanvas extends Canvas {\n    constructor(config = { width: 0, height: 0 }) {\n        super(config);\n        this.context = new SceneContext(this);\n        this.setSize(config.width, config.height);\n    }\n}\nexport class HitCanvas extends Canvas {\n    constructor(config = { width: 0, height: 0 }) {\n        super(config);\n        this.hitCanvas = true;\n        this.context = new HitContext(this);\n        this.setSize(config.width, config.height);\n    }\n}\n//# sourceMappingURL=Canvas.js.map"]},"metadata":{},"sourceType":"module"}