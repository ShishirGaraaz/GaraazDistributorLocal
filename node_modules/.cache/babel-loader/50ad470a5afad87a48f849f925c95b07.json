{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n  var pixelSize = Math.ceil(this.pixelSize()),\n      width = imageData.width,\n      height = imageData.height,\n      x,\n      y,\n      i,\n      red,\n      green,\n      blue,\n      alpha,\n      nBinsX = Math.ceil(width / pixelSize),\n      nBinsY = Math.ceil(height / pixelSize),\n      xBinStart,\n      xBinEnd,\n      yBinStart,\n      yBinEnd,\n      xBin,\n      yBin,\n      pixelsInBin,\n      data = imageData.data;\n\n  if (pixelSize <= 0) {\n    Util.error('pixelSize value can not be <= 0');\n    return;\n  }\n\n  for (xBin = 0; xBin < nBinsX; xBin += 1) {\n    for (yBin = 0; yBin < nBinsY; yBin += 1) {\n      red = 0;\n      green = 0;\n      blue = 0;\n      alpha = 0;\n      xBinStart = xBin * pixelSize;\n      xBinEnd = xBinStart + pixelSize;\n      yBinStart = yBin * pixelSize;\n      yBinEnd = yBinStart + pixelSize;\n      pixelsInBin = 0;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          red += data[i + 0];\n          green += data[i + 1];\n          blue += data[i + 2];\n          alpha += data[i + 3];\n          pixelsInBin += 1;\n        }\n      }\n\n      red = red / pixelsInBin;\n      green = green / pixelsInBin;\n      blue = blue / pixelsInBin;\n      alpha = alpha / pixelsInBin;\n\n      for (x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n\n        for (y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n\n          i = (width * y + x) * 4;\n          data[i + 0] = red;\n          data[i + 1] = green;\n          data[i + 2] = blue;\n          data[i + 3] = alpha;\n        }\n      }\n    }\n  }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"sources":["../../src/filters/Pixelate.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Util } from '../Util.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nexport const Pixelate = function (imageData) {\n    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;\n    if (pixelSize <= 0) {\n        Util.error('pixelSize value can not be <= 0');\n        return;\n    }\n    for (xBin = 0; xBin < nBinsX; xBin += 1) {\n        for (yBin = 0; yBin < nBinsY; yBin += 1) {\n            red = 0;\n            green = 0;\n            blue = 0;\n            alpha = 0;\n            xBinStart = xBin * pixelSize;\n            xBinEnd = xBinStart + pixelSize;\n            yBinStart = yBin * pixelSize;\n            yBinEnd = yBinStart + pixelSize;\n            pixelsInBin = 0;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    red += data[i + 0];\n                    green += data[i + 1];\n                    blue += data[i + 2];\n                    alpha += data[i + 3];\n                    pixelsInBin += 1;\n                }\n            }\n            red = red / pixelsInBin;\n            green = green / pixelsInBin;\n            blue = blue / pixelsInBin;\n            alpha = alpha / pixelsInBin;\n            for (x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    i = (width * y + x) * 4;\n                    data[i + 0] = red;\n                    data[i + 1] = green;\n                    data[i + 2] = blue;\n                    data[i + 3] = alpha;\n                }\n            }\n        }\n    }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);\n//# sourceMappingURL=Pixelate.js.map"]},"metadata":{},"sourceType":"module"}