{"ast":null,"code":"import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n  return Array.from(string);\n}\nvar AUTO = 'auto',\n    CENTER = 'center',\n    JUSTIFY = 'justify',\n    CHANGE_KONVA = 'Change.konva',\n    CONTEXT_2D = '2d',\n    DASH = '-',\n    LEFT = 'left',\n    TEXT = 'text',\n    TEXT_UPPER = 'Text',\n    TOP = 'top',\n    BOTTOM = 'bottom',\n    MIDDLE = 'middle',\n    NORMAL = 'normal',\n    PX_SPACE = 'px ',\n    SPACE = ' ',\n    RIGHT = 'right',\n    WORD = 'word',\n    CHAR = 'char',\n    NONE = 'none',\n    ELLIPSIS = 'â€¦',\n    ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\n\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n\n    return family;\n  }).join(', ');\n}\n\nvar dummyContext;\n\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n\n  dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\n\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction _strokeFunc(context) {\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction checkDefaultFill(config) {\n  config = config || {};\n\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n\n  return config;\n}\n\nexport class Text extends Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n\n    for (var n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n\n    this._setTextData();\n  }\n\n  _sceneFunc(context) {\n    var textArr = this.textArr,\n        textArrLen = textArr.length;\n\n    if (!this.text()) {\n      return;\n    }\n\n    var padding = this.padding(),\n        fontSize = this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        verticalAlign = this.verticalAlign(),\n        alignY = 0,\n        align = this.align(),\n        totalWidth = this.getWidth(),\n        letterSpacing = this.letterSpacing(),\n        fill = this.fill(),\n        textDecoration = this.textDecoration(),\n        shouldUnderline = textDecoration.indexOf('underline') !== -1,\n        shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n        n;\n    var translateY = 0;\n    var translateY = lineHeightPx / 2;\n    var lineTranslateX = 0;\n    var lineTranslateY = 0;\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', MIDDLE);\n    context.setAttr('textAlign', LEFT);\n\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n\n    context.translate(padding, alignY + padding);\n\n    for (n = 0; n < textArrLen; n++) {\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      var obj = textArr[n],\n          text = obj.text,\n          width = obj.width,\n          lastLine = n !== textArrLen - 1,\n          spacesNumber,\n          oneWord,\n          lineWidth;\n      context.save();\n\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        context.moveTo(lineTranslateX, translateY + lineTranslateY);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n        context.lineWidth = fontSize / 15;\n        context.strokeStyle = fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (letterSpacing !== 0 || align === JUSTIFY) {\n        spacesNumber = text.split(' ').length - 1;\n        var array = stringToArray(text);\n\n        for (var li = 0; li < array.length; li++) {\n          var letter = array[li];\n\n          if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n\n      context.restore();\n\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n\n  _hitFunc(context) {\n    var width = this.getWidth(),\n        height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  setText(text) {\n    var str = Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n\n    this._setAttr(TEXT, str);\n\n    return this;\n  }\n\n  getWidth() {\n    var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n\n  getHeight() {\n    var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n\n  getTextWidth() {\n    return this.textWidth;\n  }\n\n  getTextHeight() {\n    Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n\n  measureSize(text) {\n    var _context = getDummyContext(),\n        fontSize = this.fontSize(),\n        metrics;\n\n    _context.save();\n\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n\n    _context.restore();\n\n    return {\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n\n  _addTextLine(line) {\n    if (this.align() === JUSTIFY) {\n      line = line.trim();\n    }\n\n    var width = this._getTextWidth(line);\n\n    return this.textArr.push({\n      text: line,\n      width: width\n    });\n  }\n\n  _getTextWidth(text) {\n    var letterSpacing = this.letterSpacing();\n    var length = text.length;\n    return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n  }\n\n  _setTextData() {\n    var lines = this.text().split('\\n'),\n        fontSize = +this.fontSize(),\n        textWidth = 0,\n        lineHeightPx = this.lineHeight() * fontSize,\n        width = this.attrs.width,\n        height = this.attrs.height,\n        fixedWidth = width !== AUTO && width !== undefined,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        maxHeightPx = height - padding * 2,\n        currentHeightPx = 0,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE,\n        wrapAtWord = wrap !== CHAR && shouldWrap,\n        shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n\n    for (var i = 0, max = lines.length; i < max; ++i) {\n      var line = lines[i];\n\n      var lineWidth = this._getTextWidth(line);\n\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          var low = 0,\n              high = line.length,\n              match = '',\n              matchWidth = 0;\n\n          while (low < high) {\n            var mid = low + high >>> 1,\n                substr = line.slice(0, mid + 1),\n                substrWidth = this._getTextWidth(substr) + additionalWidth;\n\n            if (substrWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n\n          if (match) {\n            if (wrapAtWord) {\n              var wrapIndex;\n              var nextChar = line[match.length];\n              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = match.length;\n              } else {\n                wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n              }\n\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = match.slice(0, low);\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n\n            match = match.trimRight();\n\n            this._addTextLine(match);\n\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n\n            if (!shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n              var lastLine = this.textArr[this.textArr.length - 1];\n\n              if (lastLine) {\n                if (shouldAddEllipsis) {\n                  var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n\n                  if (!haveSpace) {\n                    lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                  }\n\n                  this.textArr.splice(this.textArr.length - 1, 1);\n\n                  this._addTextLine(lastLine.text + ELLIPSIS);\n                }\n              }\n\n              break;\n            }\n\n            line = line.slice(low);\n            line = line.trimLeft();\n\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n      }\n\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n\n  getStrokeScaleEnabled() {\n    return true;\n  }\n\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n\n_registerNode(Text);\n\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"sources":["../../src/shapes/Text.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n    return Array.from(string);\n}\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({ text: line, width: width });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        if (!shouldWrap ||\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                            var lastLine = this.textArr[this.textArr.length - 1];\n                            if (lastLine) {\n                                if (shouldAddEllipsis) {\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n                                    if (!haveSpace) {\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                                    }\n                                    this.textArr.splice(this.textArr.length - 1, 1);\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\n                                }\n                            }\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\n//# sourceMappingURL=Text.js.map"]},"metadata":{},"sourceType":"module"}