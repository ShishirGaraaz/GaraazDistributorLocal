{"ast":null,"code":"function Workbook() {\n  if (!(this instanceof Workbook)) return new Workbook();\n  this.SheetNames = [];\n  this.Sheets = {};\n}\n\n_c = Workbook;\n\nconst download = (url, name) => {\n  let a = document.createElement('a');\n  a.href = url;\n  a.download = name;\n  a.click();\n  window.URL.revokeObjectURL(url);\n};\n\nfunction s2ab(s) {\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n\n  for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n\n  return buf;\n}\n\nconst downloadExcel = function (data) {\n  let fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'export.xlsx';\n  console.log(data);\n  import('xlsx').then(XLSX => {\n    const wb = new Workbook();\n    const ws = XLSX.utils.json_to_sheet(data);\n    wb.SheetNames.push('');\n    wb.Sheets[''] = ws;\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      bookSST: true,\n      type: 'binary'\n    });\n    let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {\n      type: 'application/octet-stream'\n    }));\n    download(url, fileName);\n  });\n};\n\nexport default downloadExcel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workbook\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/utils/downloadExcel.js"],"names":["Workbook","SheetNames","Sheets","download","url","name","a","document","createElement","href","click","window","URL","revokeObjectURL","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","downloadExcel","data","fileName","console","log","then","XLSX","wb","ws","utils","json_to_sheet","push","wbout","write","bookType","bookSST","type","createObjectURL","Blob"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAChB,MAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EACI,OAAO,IAAIA,QAAJ,EAAP;AAEJ,OAAKC,UAAL,GAAkB,EAAlB;AAEA,OAAKC,MAAL,GAAc,EAAd;AACH;;KAPQF,Q;;AAST,MAAMG,QAAQ,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC5B,MAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR;AACAF,EAAAA,CAAC,CAACG,IAAF,GAASL,GAAT;AACAE,EAAAA,CAAC,CAACH,QAAF,GAAaE,IAAb;AACAC,EAAAA,CAAC,CAACI,KAAF;AAEAC,EAAAA,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BT,GAA3B;AACH,CAPD;;AAUA,SAASU,IAAT,CAAcC,CAAd,EAAiB;AACb,QAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,CAAC,CAACG,MAAlB,CAAZ;AAEA,QAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeJ,GAAf,CAAb;;AAEA,OAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,KAAKN,CAAC,CAACG,MAAtB,EAA8B,EAAEG,CAAhC,EACIF,IAAI,CAACE,CAAD,CAAJ,GAAUN,CAAC,CAACO,UAAF,CAAaD,CAAb,IAAkB,IAA5B;;AAEJ,SAAOL,GAAP;AACH;;AAED,MAAMO,aAAa,GAAI,UAACC,IAAD,EAAoC;AAAA,MAA7BC,QAA6B,uEAAlB,aAAkB;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAO,MAAP,EAAeI,IAAf,CAAoBC,IAAI,IAAI;AACxB,UAAMC,EAAE,GAAG,IAAI9B,QAAJ,EAAX;AACA,UAAM+B,EAAE,GAAGF,IAAI,CAACG,KAAL,CAAWC,aAAX,CAAyBT,IAAzB,CAAX;AAEAM,IAAAA,EAAE,CAAC7B,UAAH,CAAciC,IAAd,CAAmB,EAAnB;AACAJ,IAAAA,EAAE,CAAC5B,MAAH,CAAU,EAAV,IAAgB6B,EAAhB;AAGA,UAAMI,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWN,EAAX,EAAe;AAACO,MAAAA,QAAQ,EAAC,MAAV;AAAkBC,MAAAA,OAAO,EAAC,IAA1B;AAAgCC,MAAAA,IAAI,EAAE;AAAtC,KAAf,CAAd;AAGA,QAAInC,GAAG,GAAGO,MAAM,CAACC,GAAP,CAAW4B,eAAX,CAA2B,IAAIC,IAAJ,CAAS,CAAC3B,IAAI,CAACqB,KAAD,CAAL,CAAT,EAAwB;AAACI,MAAAA,IAAI,EAAC;AAAN,KAAxB,CAA3B,CAAV;AAEApC,IAAAA,QAAQ,CAACC,GAAD,EAAMqB,QAAN,CAAR;AAEH,GAfD;AAgBH,CAlBD;;AAoBA,eAAeF,aAAf","sourcesContent":["function Workbook() {\r\n    if (!(this instanceof Workbook))\r\n        return new Workbook()\r\n\r\n    this.SheetNames = []\r\n\r\n    this.Sheets = {}\r\n}\r\n\r\nconst download = (url, name) => {\r\n    let a = document.createElement('a')\r\n    a.href = url\r\n    a.download = name\r\n    a.click()\r\n\r\n    window.URL.revokeObjectURL(url)\r\n}\r\n\r\n\r\nfunction s2ab(s) {\r\n    const buf = new ArrayBuffer(s.length)\r\n\r\n    const view = new Uint8Array(buf)\r\n\r\n    for (let i=0; i !== s.length; ++i)\r\n        view[i] = s.charCodeAt(i) & 0xFF\r\n\r\n    return buf\r\n}\r\n\r\nconst downloadExcel =  (data, fileName = 'export.xlsx') => {\r\n    console.log(data)\r\n    import('xlsx').then(XLSX => {\r\n        const wb = new Workbook()\r\n        const ws = XLSX.utils.json_to_sheet(data)\r\n\r\n        wb.SheetNames.push('')\r\n        wb.Sheets[''] = ws\r\n\r\n\r\n        const wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'binary'})\r\n\r\n\r\n        let url = window.URL.createObjectURL(new Blob([s2ab(wbout)], {type:'application/octet-stream'}))\r\n\r\n        download(url, fileName)\r\n        \r\n    })\r\n}\r\n\r\nexport default downloadExcel;"]},"metadata":{},"sourceType":"module"}