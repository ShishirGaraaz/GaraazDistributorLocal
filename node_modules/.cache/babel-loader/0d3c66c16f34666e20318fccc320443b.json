{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\PlaceOrder\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport ModifiedTableTop, { generateInput } from '../../components/TableTop/ModifiedTableTop';\nimport messages from './messages';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectGlobalState } from '../../globalSlice';\nimport { Box, Button, Flex } from '@chakra-ui/react';\nimport { StyledTable, TableRow } from '../OrderDetails/RequestOrder';\nimport { OrderOptions } from '../../components/OrderComponents/OrderOptions';\nimport SimpleModal from '../../components/Modal';\nimport DynamicTable from '../../components/DynamicTable';\nimport withToast from '../../HOCs/withToast';\nimport { isEmpty } from 'lodash';\nimport { createOrder, selectPlaceOrder } from './slice';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport { useHistory, Switch, Route, useRouteMatch } from 'react-router';\nimport PlaceOrderBulk from '../../components/PlaceOrderBulk/Loadable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaceOrder = props => {\n  _s();\n\n  var _selectedWorkshop$val, _workshops$data$find, _workshops$data$find2;\n\n  const intl = useIntl();\n  const {\n    bulkOrderItem\n  } = useSelector(selectPlaceOrder);\n  const auth = useSelector(state => state.auth);\n  const {\n    workshops,\n    distributor\n  } = useSelector(selectGlobalState);\n  const [orderItems, setOrderItems] = useState([{\n    SNo: 1,\n    description: '',\n    partNumber: '',\n    quantity: '',\n    price: ''\n  }]);\n  const [deliveryValue, setDeliveryValue] = useState(intl.formatMessage(messages.selfPickup));\n  const [paymentValue, setPaymentValue] = useState(intl.formatMessage(messages.cash));\n  const [isLoading, setLoading] = useState(false);\n  const [selectedWorkshop, setSelectedWorkshop] = useState({});\n  const [openModal, setOpenModal] = useState(false);\n  const dispatcher = useDispatch();\n  const history = useHistory();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const [isImported, setIsImported] = useState(false);\n  useEffect(() => {\n    if (bulkOrderItem.length) {\n      setOrderItems(bulkOrderItem);\n      setIsImported(true);\n    }\n  }, [bulkOrderItem]);\n  const columns = useMemo(() => [{\n    Header: 'SN',\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: 'Part Number',\n    accessor: 'partUUID'\n  }, {\n    Header: 'Part Name',\n    accessor: 'description'\n  }, {\n    Header: 'Quantity',\n    accessor: 'quantity'\n  }], []);\n\n  const handleTableTopChange = async (e, name) => {\n    setSelectedWorkshop(e);\n  };\n\n  const inputData = useMemo(() => {\n    const workshopOptions = [...workshops.data].map(workshop => ({\n      value: `${workshop.workshop._id} ${workshop.branch._id}`,\n      // we need to have access to the workshopId and branchId \n      label: `${workshop.name} (${workshop.code})`\n    }));\n    return [{\n      title: intl.formatMessage(messages.workshopName),\n      type: 'select',\n      placeholder: intl.formatMessage(messages.selectWorkshops),\n      fullWidth: true,\n      name: 'filterByBranch',\n      options: [{\n        label: 'None',\n        value: 'none'\n      }, ...workshopOptions]\n    }];\n  }, [workshops.data]);\n\n  const handleRowChange = (value, columnId, SNo) => {\n    if (columnId === 'delete') {\n      let currentOrderItems = [...orderItems];\n      currentOrderItems.splice(SNo - 1, 1);\n      setOrderItems(currentOrderItems);\n    } else {\n      var _selectedItem$price;\n\n      let selectedItem = [...orderItems].find(item => item.SNo === SNo);\n      selectedItem = { ...selectedItem,\n        [columnId]: columnId === 'partNumber' ? value.value : value,\n        description: columnId === 'partNumber' ? value.description : selectedItem.description,\n        price: columnId === 'partNumber' ? value.price : (_selectedItem$price = selectedItem.price) !== null && _selectedItem$price !== void 0 ? _selectedItem$price : 0,\n        partUUID: columnId === 'partNumber' ? value.label : selectedItem.partUUID,\n        isImported: false\n      };\n      setOrderItems(prevState => {\n        return prevState.map(item => {\n          if (item.SNo === SNo) {\n            return selectedItem;\n          }\n\n          return item;\n        });\n      });\n    }\n  };\n\n  const handleAddRow = () => {\n    setOrderItems(prevState => [...prevState, {\n      SNo: prevState.length + 1,\n      description: '',\n      partNumber: '',\n      quantity: ''\n    }]);\n    setIsImported(false);\n  };\n\n  const tableRowsArr = useMemo(() => {\n    return [...orderItems].map((item, index) => {\n      const data = { ...item,\n        isImported\n      };\n      return /*#__PURE__*/_jsxDEV(TableRow //key={item.partNumber}\n      , {\n        showPrice: true,\n        data: data,\n        onChange: handleRowChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this);\n    });\n  }, [orderItems, isImported]);\n  const deliverOptions = {\n    title: intl.formatMessage(messages.deliveryOptions),\n    options: [intl.formatMessage(messages.selfPickup), intl.formatMessage(messages.arrangeDelivery)]\n  };\n  const paymentOptions = {\n    title: intl.formatMessage(messages.paymentOptions),\n    options: [intl.formatMessage(messages.cash), intl.formatMessage(messages.onlinePayment), intl.formatMessage(messages.collectLater)]\n  };\n\n  const handlePlaceOrder = async () => {\n    try {\n      setLoading(true);\n      const items = [...orderItems].map(itm => ({\n        partId: itm.partNumber,\n        quantity: itm.quantity,\n        price: itm.price\n      }));\n      const [workshopId, branchId] = selectedWorkshop.value.split(' ');\n      const finalObject = {\n        items,\n        distributorId: distributor._id,\n        branchId: branchId,\n        workshopId: workshopId,\n        initiatorId: distributor.userId,\n        paymentOption: paymentValue,\n        deliveryOption: deliveryValue\n      };\n      dispatcher(createOrder({\n        data: finalObject,\n        auth\n      }));\n      setLoading(false);\n      setOpenModal(false);\n      setOrderItems([{\n        SNo: 1,\n        description: '',\n        partNumber: '',\n        quantity: '',\n        price: ''\n      }]);\n      setSelectedWorkshop({});\n      props.notification({\n        status: 'success',\n        title: 'Order Placed',\n        description: 'Order was successfully placed'\n      });\n    } catch (error) {\n      console.log(error);\n    } // setLoading(false);\n\n  };\n\n  console.log({\n    selectedWorkshop: (_selectedWorkshop$val = selectedWorkshop.value) === null || _selectedWorkshop$val === void 0 ? void 0 : _selectedWorkshop$val.split(' ')[0]\n  });\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        mb: 6,\n        width: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          isLoading: isLoading,\n          variant: \"normal\",\n          onClick: () => history.push(`${url}/add-bulk-order`),\n          children: \"+ Import File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModifiedTableTop, {\n        inputData: inputData,\n        onChange: handleTableTopChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrderOptions, {\n        onDeliveryOptionChange: setDeliveryValue,\n        onPaymentOptionChange: setPaymentValue,\n        deliveryValue: deliveryValue,\n        paymentValue: paymentValue,\n        deliverOptions: deliverOptions,\n        paymentOptions: paymentOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        border: \"1px solid\",\n        borderColor: \"gray.100\",\n        pb: 4,\n        children: [/*#__PURE__*/_jsxDEV(StyledTable, {\n          isLarge: window.innerWidth > 768,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"SNo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Part Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Part Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tableRowsArr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          width: \"100%\",\n          mt: 4,\n          pr: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleAddRow,\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        width: \"100%\",\n        mt: 4,\n        pr: 2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            // check if workshop is selected\n            if (isEmpty(selectedWorkshop)) {\n              props.notification({\n                status: 'error',\n                title: 'Invalid workshop',\n                description: 'Please select a workshop'\n              });\n              return;\n            } // check if item column is not empty\n\n\n            let invalidItem = false;\n            orderItems.forEach(item => {\n              if (!item.quantity || !item.partNumber) {\n                invalidItem = true;\n              }\n            });\n\n            if (invalidItem) {\n              props.notification({\n                status: 'error',\n                title: 'Invalid Item',\n                description: 'Please complete the item columns'\n              });\n              return;\n            }\n\n            setOpenModal(true);\n          },\n          width: {\n            base: '100%',\n            lg: '30%'\n          },\n          variant: \"normal\",\n          children: \"Place Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n        isLoading: isLoading,\n        title: \"Order Summary\",\n        size: \"full\",\n        onClose: () => setOpenModal(false),\n        isOpen: openModal,\n        okText: \"Confirm Order\",\n        onOk: () => handlePlaceOrder(),\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flexWrap: \"wrap\",\n          justifyContent: \"space-around\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            mr: \"3\",\n            mb: \"3\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Delivery Option:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"3\",\n              textStyle: \"normalBold\",\n              children: deliveryValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Payment Option:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"3\",\n              textStyle: \"normalBold\",\n              children: paymentValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            mr: \"3\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Workshop Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normalBold\",\n              ml: \"3\",\n              children: (_workshops$data$find = workshops.data.find(item => {\n                var _selectedWorkshop$val2;\n\n                return item.workshop._id === ((_selectedWorkshop$val2 = selectedWorkshop.value) === null || _selectedWorkshop$val2 === void 0 ? void 0 : _selectedWorkshop$val2.split(' ')[0]);\n              })) === null || _workshops$data$find === void 0 ? void 0 : _workshops$data$find.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Workshop Code:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"3\",\n              textStyle: \"normalBold\",\n              children: (_workshops$data$find2 = workshops.data.find(item => {\n                var _selectedWorkshop$val3;\n\n                return item.workshop._id === ((_selectedWorkshop$val3 = selectedWorkshop.value) === null || _selectedWorkshop$val3 === void 0 ? void 0 : _selectedWorkshop$val3.split(' ')[0]);\n              })) === null || _workshops$data$find2 === void 0 ? void 0 : _workshops$data$find2.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n          columns: columns,\n          data: orderItems,\n          fetchData: () => console.log('...fetching'),\n          skipPageReset: true,\n          hidePagination: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '30%'\n          },\n          display: \"flex\",\n          flexDirection: \"column\",\n          marginLeft: \"auto\",\n          alignItems: \"flex-end\",\n          mt: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Total Quantity: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"3\",\n              textStyle: \"normalBold\",\n              children: orderItems.reduce((prev, curr) => prev + parseInt(curr.quantity), 0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            mb: \"3\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              textStyle: \"normal\",\n              children: \"Total Amount: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"3\",\n              textStyle: \"normalBold\",\n              children: getMoneyFormat(orderItems.reduce((prev, curr) => prev + parseFloat(curr.price) * parseInt(curr.quantity), 0))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/add-bulk-order`,\n      children: /*#__PURE__*/_jsxDEV(PlaceOrderBulk, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaceOrder, \"Xluf+iqIFkZYsyQf+K+ARIFRJPs=\", false, function () {\n  return [useIntl, useSelector, useSelector, useSelector, useDispatch, useHistory, useRouteMatch];\n});\n\n_c = PlaceOrder;\nexport default _c2 = withToast(PlaceOrder);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlaceOrder\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/PlaceOrder/index.js"],"names":["React","useMemo","useState","useEffect","useIntl","ModifiedTableTop","generateInput","messages","useDispatch","useSelector","selectGlobalState","Box","Button","Flex","StyledTable","TableRow","OrderOptions","SimpleModal","DynamicTable","withToast","isEmpty","createOrder","selectPlaceOrder","getMoneyFormat","useHistory","Switch","Route","useRouteMatch","PlaceOrderBulk","PlaceOrder","props","intl","bulkOrderItem","auth","state","workshops","distributor","orderItems","setOrderItems","SNo","description","partNumber","quantity","price","deliveryValue","setDeliveryValue","formatMessage","selfPickup","paymentValue","setPaymentValue","cash","isLoading","setLoading","selectedWorkshop","setSelectedWorkshop","openModal","setOpenModal","dispatcher","history","url","path","isImported","setIsImported","length","columns","Header","accessor","Cell","allData","row","index","handleTableTopChange","e","name","inputData","workshopOptions","data","map","workshop","value","_id","branch","label","code","title","workshopName","type","placeholder","selectWorkshops","fullWidth","options","handleRowChange","columnId","currentOrderItems","splice","selectedItem","find","item","partUUID","prevState","handleAddRow","tableRowsArr","deliverOptions","deliveryOptions","arrangeDelivery","paymentOptions","onlinePayment","collectLater","handlePlaceOrder","items","itm","partId","workshopId","branchId","split","finalObject","distributorId","initiatorId","userId","paymentOption","deliveryOption","notification","status","error","console","log","push","window","innerWidth","invalidItem","forEach","base","lg","reduce","prev","curr","parseInt","parseFloat"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport ModifiedTableTop, {\r\n  generateInput,\r\n} from '../../components/TableTop/ModifiedTableTop';\r\nimport messages from './messages';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectGlobalState } from '../../globalSlice';\r\nimport { Box, Button, Flex } from '@chakra-ui/react';\r\nimport { StyledTable, TableRow } from '../OrderDetails/RequestOrder';\r\nimport { OrderOptions } from '../../components/OrderComponents/OrderOptions';\r\nimport SimpleModal from '../../components/Modal';\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport withToast from '../../HOCs/withToast';\r\nimport { isEmpty } from 'lodash';\r\nimport { createOrder, selectPlaceOrder } from './slice';\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\nimport { useHistory, Switch, Route, useRouteMatch } from 'react-router';\r\nimport PlaceOrderBulk from '../../components/PlaceOrderBulk/Loadable';\r\n\r\nconst PlaceOrder = (props) => {\r\n  const intl = useIntl();\r\n  const { bulkOrderItem } = useSelector(selectPlaceOrder);\r\n  const auth = useSelector((state) => state.auth);\r\n  const { workshops, distributor } = useSelector(selectGlobalState);\r\n  const [orderItems, setOrderItems] = useState([\r\n    { SNo: 1, description: '', partNumber: '', quantity: '', price: '' },\r\n  ]);\r\n  const [deliveryValue, setDeliveryValue] = useState(\r\n    intl.formatMessage(messages.selfPickup),\r\n  );\r\n  const [paymentValue, setPaymentValue] = useState(\r\n    intl.formatMessage(messages.cash),\r\n  );\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [selectedWorkshop, setSelectedWorkshop] = useState({});\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const dispatcher = useDispatch();\r\n  const history = useHistory();\r\n  const { url, path } = useRouteMatch();\r\n  const [isImported, setIsImported] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (bulkOrderItem.length) {\r\n      setOrderItems(bulkOrderItem);\r\n      setIsImported(true);\r\n    }\r\n  }, [bulkOrderItem]);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'SN',\r\n        accessor: 'sno',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: 'Part Number',\r\n        accessor: 'partUUID',\r\n      },\r\n      {\r\n        Header: 'Part Name',\r\n        accessor: 'description',\r\n      },\r\n      {\r\n        Header: 'Quantity',\r\n        accessor: 'quantity',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const handleTableTopChange = async (e, name) => {\r\n    setSelectedWorkshop(e);\r\n  };\r\n\r\n  const inputData = useMemo(() => {\r\n    const workshopOptions = [...workshops.data].map((workshop) => ({\r\n      value: `${workshop.workshop._id} ${workshop.branch._id}`, // we need to have access to the workshopId and branchId \r\n      label: `${workshop.name} (${workshop.code})`,\r\n    }));\r\n    return [\r\n      {\r\n        title: intl.formatMessage(messages.workshopName),\r\n        type: 'select',\r\n        placeholder: intl.formatMessage(messages.selectWorkshops),\r\n        fullWidth: true,\r\n        name: 'filterByBranch',\r\n        options: [{ label: 'None', value: 'none' }, ...workshopOptions],\r\n      },\r\n    ];\r\n  }, [workshops.data]);\r\n\r\n  const handleRowChange = (value, columnId, SNo) => {\r\n    if (columnId === 'delete') {\r\n    \r\n      let currentOrderItems = [...orderItems];\r\n      \r\n      currentOrderItems.splice(SNo - 1, 1);\r\n\r\n\r\n      setOrderItems(currentOrderItems);\r\n    } else {\r\n      let selectedItem = [...orderItems].find((item) => item.SNo === SNo);\r\n\r\n      selectedItem = {\r\n        ...selectedItem,\r\n        [columnId]: columnId === 'partNumber' ? value.value : value,\r\n        description:\r\n          columnId === 'partNumber'\r\n            ? value.description\r\n            : selectedItem.description,\r\n        price:\r\n          columnId === 'partNumber' ? value.price : selectedItem.price ?? 0,\r\n        partUUID:\r\n          columnId === 'partNumber' ? value.label : selectedItem.partUUID,\r\n          isImported: false\r\n      };\r\n\r\n      setOrderItems((prevState) => {\r\n        return prevState.map((item) => {\r\n          if (item.SNo === SNo) {\r\n            return selectedItem;\r\n          }\r\n          return item;\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAddRow = () => {\r\n    setOrderItems((prevState) => [\r\n      ...prevState,\r\n      {\r\n        SNo: prevState.length + 1,\r\n        description: '',\r\n        partNumber: '',\r\n        quantity: '',\r\n      },\r\n    ]);\r\n    setIsImported(false);\r\n  };\r\n\r\n  const tableRowsArr = useMemo(() => {\r\n  \r\n      return [...orderItems].map((item, index) => {\r\n        const data = {\r\n          ...item,\r\n          isImported\r\n        }\r\n        return (\r\n          <TableRow\r\n           //key={item.partNumber}\r\n            showPrice={true}\r\n            data={data}\r\n            onChange={handleRowChange}\r\n          />\r\n        );\r\n      });\r\n   \r\n  }, [orderItems, isImported]);\r\n\r\n  const deliverOptions = {\r\n    title: intl.formatMessage(messages.deliveryOptions),\r\n    options: [\r\n      intl.formatMessage(messages.selfPickup),\r\n      intl.formatMessage(messages.arrangeDelivery),\r\n    ],\r\n  };\r\n\r\n  const paymentOptions = {\r\n    title: intl.formatMessage(messages.paymentOptions),\r\n    options: [\r\n      intl.formatMessage(messages.cash),\r\n      intl.formatMessage(messages.onlinePayment),\r\n      intl.formatMessage(messages.collectLater),\r\n    ],\r\n  };\r\n\r\n  const handlePlaceOrder = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const items = [...orderItems].map((itm) => ({\r\n        partId: itm.partNumber,\r\n        quantity: itm.quantity,\r\n        price: itm.price,\r\n      }));\r\n\r\n      const [workshopId, branchId] = selectedWorkshop.value.split(' ');\r\n\r\n      const finalObject = {\r\n        items,\r\n        distributorId: distributor._id,\r\n        branchId: branchId,\r\n        workshopId: workshopId,\r\n        initiatorId: distributor.userId,\r\n        paymentOption: paymentValue,\r\n        deliveryOption: deliveryValue,\r\n      };\r\n\r\n\r\n      dispatcher(createOrder({ data: finalObject, auth }));\r\n      setLoading(false);\r\n      setOpenModal(false);\r\n      setOrderItems([\r\n        { SNo: 1, description: '', partNumber: '', quantity: '', price: '' },\r\n      ]);\r\n      setSelectedWorkshop({});\r\n      props.notification({\r\n        status: 'success',\r\n        title: 'Order Placed',\r\n        description: 'Order was successfully placed',\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // setLoading(false);\r\n  };\r\n\r\n  console.log({ selectedWorkshop : selectedWorkshop.value?.split(' ')[0] })\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path={path}>\r\n        <Box display='flex' justifyContent='flex-end' mb={6} width='100%'>\r\n          <Button\r\n            isLoading={isLoading}\r\n            variant='normal'\r\n            onClick={() => history.push(`${url}/add-bulk-order`)}\r\n          >\r\n            + Import File\r\n          </Button>\r\n        </Box>\r\n\r\n        <ModifiedTableTop\r\n          inputData={inputData}\r\n          onChange={handleTableTopChange}\r\n        />\r\n\r\n        <OrderOptions\r\n          onDeliveryOptionChange={setDeliveryValue}\r\n          onPaymentOptionChange={setPaymentValue}\r\n          deliveryValue={deliveryValue}\r\n          paymentValue={paymentValue}\r\n          deliverOptions={deliverOptions}\r\n          paymentOptions={paymentOptions}\r\n        />\r\n\r\n        <Box border='1px solid' borderColor='gray.100' pb={4}>\r\n          <StyledTable isLarge={window.innerWidth > 768}>\r\n            <thead>\r\n              <tr>\r\n                <th>SNo</th>\r\n                <th>Part Number</th>\r\n                <th>Part Name</th>\r\n                <th>Quantity</th>\r\n                <th>Price</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{tableRowsArr}</tbody>\r\n          </StyledTable>\r\n          <Box\r\n            display='flex'\r\n            justifyContent='flex-end'\r\n            width='100%'\r\n            mt={4}\r\n            pr={2}\r\n          >\r\n            <Button onClick={handleAddRow}>Add Row</Button>\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          justifyContent='flex-end'\r\n          width='100%'\r\n          mt={4}\r\n          pr={2}\r\n        >\r\n          <Button\r\n            onClick={() => {\r\n              // check if workshop is selected\r\n\r\n              if (isEmpty(selectedWorkshop)) {\r\n                props.notification({\r\n                  status: 'error',\r\n                  title: 'Invalid workshop',\r\n                  description: 'Please select a workshop',\r\n                });\r\n                return;\r\n              }\r\n\r\n              // check if item column is not empty\r\n              let invalidItem = false;\r\n              orderItems.forEach((item) => {\r\n                if (!item.quantity || !item.partNumber) {\r\n                  invalidItem = true;\r\n                }\r\n              });\r\n              if (invalidItem) {\r\n                props.notification({\r\n                  status: 'error',\r\n                  title: 'Invalid Item',\r\n                  description: 'Please complete the item columns',\r\n                });\r\n                return;\r\n              }\r\n\r\n              setOpenModal(true);\r\n            }}\r\n            width={{ base: '100%', lg: '30%' }}\r\n            variant='normal'\r\n          >\r\n            Place Order\r\n          </Button>\r\n        </Box>\r\n        <SimpleModal\r\n          isLoading={isLoading}\r\n          title='Order Summary'\r\n          size='full'\r\n          onClose={() => setOpenModal(false)}\r\n          isOpen={openModal}\r\n          okText='Confirm Order'\r\n          onOk={() => handlePlaceOrder()}\r\n        >\r\n          <Flex flexWrap='wrap' justifyContent='space-around'>\r\n            <Flex mr='3' mb='3'>\r\n              <Box textStyle='normal'>Delivery Option:</Box>\r\n              <Box ml='3' textStyle='normalBold'>\r\n                {deliveryValue}\r\n              </Box>\r\n            </Flex>\r\n            <Flex>\r\n              <Box textStyle='normal'>Payment Option:</Box>\r\n              <Box ml='3' textStyle='normalBold'>\r\n                {paymentValue}\r\n              </Box>\r\n            </Flex>\r\n            <Flex mr='3'>\r\n              <Box textStyle='normal'>Workshop Name:</Box>\r\n              <Box textStyle='normalBold' ml='3'>\r\n                {\r\n                  workshops.data.find((item) => item.workshop._id === selectedWorkshop.value?.split(' ')[0])\r\n                    ?.name\r\n                }\r\n              </Box>\r\n            </Flex>\r\n            <Flex>\r\n              <Box textStyle='normal'>Workshop Code:</Box>\r\n              <Box ml='3' textStyle='normalBold'>\r\n                {\r\n                  workshops.data.find((item) => item.workshop._id === selectedWorkshop.value?.split(' ')[0])\r\n                    ?.code\r\n                }\r\n              </Box>\r\n            </Flex>\r\n          </Flex>\r\n          <DynamicTable\r\n            columns={columns}\r\n            data={orderItems}\r\n            fetchData={() => console.log('...fetching')}\r\n            skipPageReset={true}\r\n            hidePagination\r\n          />\r\n          <Box\r\n            width={{ base: '100%', lg: '30%' }}\r\n            display='flex'\r\n            flexDirection='column'\r\n            marginLeft='auto'\r\n            alignItems='flex-end'\r\n            mt='6'\r\n          >\r\n            <Flex justifyContent='space-between' width='100%'>\r\n              <Box textStyle='normal'>Total Quantity: </Box>\r\n              <Box ml='3' textStyle='normalBold'>\r\n                {orderItems.reduce(\r\n                  (prev, curr) => prev + parseInt(curr.quantity),\r\n                  0,\r\n                )}\r\n              </Box>\r\n            </Flex>\r\n            <Flex mb='3' justifyContent='space-between' width='100%'>\r\n              <Box textStyle='normal'>Total Amount: </Box>\r\n              <Box ml='3' textStyle='normalBold'>\r\n                {getMoneyFormat(\r\n                  orderItems.reduce(\r\n                    (prev, curr) =>\r\n                      prev + parseFloat(curr.price) * parseInt(curr.quantity),\r\n                    0,\r\n                  ),\r\n                )}\r\n              </Box>\r\n            </Flex>\r\n          </Box>\r\n        </SimpleModal>\r\n      </Route>\r\n      <Route path={`${path}/add-bulk-order`}>\r\n        <PlaceOrderBulk />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default withToast(PlaceOrder);\r\n"]},"metadata":{},"sourceType":"module"}