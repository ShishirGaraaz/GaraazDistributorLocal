{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\OrderDetails\\\\BackOrder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useState } from 'react';\nimport { Box, Button } from '@chakra-ui/react';\nimport { useIntl } from 'react-intl';\nimport messages from './messages';\nimport { useSelector } from 'react-redux';\nimport { completeOrder } from './actions';\nimport { useHistory, useParams } from 'react-router-dom';\nimport withToast from '../../HOCs/withToast';\nimport UnavailablePartsScaffold from '../../components/OrderComponents/UnavailablePartScaffold';\nimport removeFromLocalStorage from '../../utils/removeFromLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackOrder = withToast(_c = _s(_ref => {\n  _s();\n\n  let {\n    notification,\n    ...props\n  } = _ref;\n  const intl = useIntl();\n  const {\n    orderDetails\n  } = useSelector(state => state.orderDetails);\n  const [tableData, setTableData] = useState([]);\n  const {\n    id\n  } = useParams();\n  const auth = useSelector(state => state.auth);\n  const history = useHistory();\n  useEffect(() => {\n    if (localStorage.partsUnavailable !== undefined) {\n      const data = JSON.parse(localStorage.partsUnavailable).map(item => ({ ...item,\n        availableQuantity: item.pendingQuantity\n      }));\n      setTableData(data);\n    }\n  }, []);\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.SNo),\n    accessor: 'SNo',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.partNumber),\n    accessor: 'partId'\n  }, {\n    Header: intl.formatMessage(messages.partDescription),\n    accessor: 'description',\n    Cell: () => 'coming soon'\n  }, {\n    Header: intl.formatMessage(messages.quantityOrdered),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.pendingQuantity),\n    accessor: 'pendingQuantity'\n  }, {\n    Header: intl.formatMessage(messages.availableQuantity),\n    accessor: 'availableQuantity'\n  }], [tableData]);\n\n  const handleCompleteOrder = async () => {\n    try {\n      await completeOrder({\n        auth,\n        orderId: id\n      });\n      notification({\n        status: 'success',\n        title: intl.formatMessage(messages.orderCompleted),\n        description: intl.formatMessage(messages.orderCompletedDescription)\n      });\n      removeFromLocalStorage();\n      history.replace('/orders');\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: intl.formatMessage(messages.errorOccurred)\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UnavailablePartsScaffold, {\n    orderNotCreated: false,\n    orderDetails: orderDetails,\n    columns: columns,\n    tableData: tableData,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      ml: \"auto\",\n      mt: 10,\n      mb: 5,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        ml: 3,\n        variant: \"normal\",\n        onClick: handleCompleteOrder,\n        children: intl.formatMessage(messages.completeOrder)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }, this);\n}, \"SD3mFD1uo7Lfpp/xPuaQTQUO3f8=\", false, function () {\n  return [useIntl, useSelector, useParams, useSelector, useHistory];\n}));\n_c2 = BackOrder;\nexport default BackOrder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BackOrder$withToast\");\n$RefreshReg$(_c2, \"BackOrder\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/OrderDetails/BackOrder.js"],"names":["React","useMemo","useEffect","useState","Box","Button","useIntl","messages","useSelector","completeOrder","useHistory","useParams","withToast","UnavailablePartsScaffold","removeFromLocalStorage","BackOrder","notification","props","intl","orderDetails","state","tableData","setTableData","id","auth","history","localStorage","partsUnavailable","undefined","data","JSON","parse","map","item","availableQuantity","pendingQuantity","columns","Header","formatMessage","SNo","accessor","Cell","allData","row","index","partNumber","partDescription","quantityOrdered","handleCompleteOrder","orderId","status","title","orderCompleted","description","orderCompletedDescription","replace","error","errorOccurred"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n} from '@chakra-ui/react';\r\nimport { useIntl } from 'react-intl';\r\nimport messages from './messages';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  completeOrder,\r\n} from './actions';\r\nimport {\r\n  useHistory,\r\n  useParams,\r\n} from 'react-router-dom';\r\nimport withToast from '../../HOCs/withToast';\r\nimport UnavailablePartsScaffold from '../../components/OrderComponents/UnavailablePartScaffold';\r\nimport removeFromLocalStorage from '../../utils/removeFromLocalStorage';\r\n\r\n\r\n\r\nconst BackOrder = withToast(({notification, ...props}) => {\r\n    const intl = useIntl();\r\n    const { orderDetails } = useSelector((state) => state.orderDetails);\r\n    const [tableData, setTableData] = useState([]);\r\n    const { id } = useParams();\r\n    const auth = useSelector((state) => state.auth);\r\n    const history = useHistory();\r\n  \r\n    useEffect(() => {\r\n      if (localStorage.partsUnavailable !== undefined) {\r\n        const data = JSON.parse(localStorage.partsUnavailable).map((item) => ({\r\n          ...item,\r\n          availableQuantity: item.pendingQuantity,\r\n        }));\r\n  \r\n        setTableData(data);\r\n      }\r\n    }, []);\r\n  \r\n    const columns = useMemo(\r\n      () => [\r\n        {\r\n          Header: intl.formatMessage(messages.SNo),\r\n          accessor: 'SNo',\r\n          Cell: (allData) => {\r\n            return <Box>{allData?.row?.index + 1}</Box>;\r\n          },\r\n        },\r\n        {\r\n          Header: intl.formatMessage(messages.partNumber),\r\n          accessor: 'partId',\r\n        },\r\n        {\r\n          Header: intl.formatMessage(messages.partDescription),\r\n          accessor: 'description',\r\n          Cell: () => 'coming soon',\r\n        },\r\n        {\r\n          Header: intl.formatMessage(messages.quantityOrdered),\r\n          accessor: 'quantity',\r\n        },\r\n        {\r\n          Header: intl.formatMessage(messages.pendingQuantity),\r\n          accessor: 'pendingQuantity',\r\n        },\r\n        {\r\n          Header: intl.formatMessage(messages.availableQuantity),\r\n          accessor: 'availableQuantity',\r\n        },\r\n      ],\r\n      [tableData],\r\n    );\r\n  \r\n    const handleCompleteOrder = async () => {\r\n      try {\r\n        await completeOrder({ auth, orderId: id });\r\n        notification({\r\n          status: 'success',\r\n          title: intl.formatMessage(messages.orderCompleted),\r\n          description: intl.formatMessage(messages.orderCompletedDescription),\r\n        });\r\n        removeFromLocalStorage();\r\n        history.replace('/orders');\r\n      } catch (error) {\r\n        notification({\r\n          status: 'error',\r\n          description: intl.formatMessage(messages.errorOccurred),\r\n        });\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <UnavailablePartsScaffold\r\n        orderNotCreated={false}\r\n        orderDetails={orderDetails}\r\n        columns={columns}\r\n        tableData={tableData}\r\n      >\r\n        <Box ml='auto' mt={10} mb={5}>\r\n          {/* <Button variant='cancle' onClick={() => props.onCancelOrder(enums.CANCEL_ORDER)}>Cancel Order</Button> */}\r\n          <Button ml={3} variant='normal' onClick={handleCompleteOrder}>\r\n            {intl.formatMessage(messages.completeOrder)}\r\n          </Button>\r\n        </Box>\r\n      </UnavailablePartsScaffold>\r\n    );\r\n  });\r\n\r\n  export default BackOrder;"]},"metadata":{},"sourceType":"module"}