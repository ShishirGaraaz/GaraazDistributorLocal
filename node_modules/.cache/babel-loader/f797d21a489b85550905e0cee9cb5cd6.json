{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\BusinessProfileForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { Input, Button, Select, Divider } from '@chakra-ui/react';\nimport { useIntl } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport { useSelector } from 'react-redux';\nimport { publicAxios as axios } from '../../axios';\nimport messages from './messages';\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\nimport _, { toUpper } from 'lodash';\nimport { Select as MultiSelect } from 'chakra-react-select';\nimport daysOption from '../../utils/daysOption';\nimport CustomInput from '../../utils/Input';\nimport InputScaffold from '../../utils/InputScaffold';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport { Box } from '@chakra-ui/react';\nimport { getBrands } from '../../containers/PartAddition/action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BusinessProfileForm = _ref => {\n  _s();\n\n  let {\n    setActiveStep,\n    distributor,\n    distributorData\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [businessProfile, setBusinessProfile] = useState({});\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth);\n  const intl = useIntl();\n  const [distributorId, setDistributorId] = useState('');\n  const [brands, setBrands] = useState([]);\n  const [selectedBrands, setSelectedBrands] = useState([]);\n  const [workingdays, setworkingdays] = useState([{\n    value: 'SUN',\n    label: 'Sunday'\n  }, {\n    value: 'MON',\n    label: 'Monday'\n  }, {\n    value: 'TUE',\n    label: 'Tuesday'\n  }, {\n    value: 'WED',\n    label: 'Wednesday'\n  }, {\n    value: 'FRI',\n    label: 'Friday'\n  }, {\n    value: 'THU',\n    label: 'Thursday'\n  }, {\n    value: 'SAT',\n    label: 'Saturday'\n  }]);\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onSubmit'\n  });\n\n  const getDirtibutorData = async () => {\n    try {\n      const data = await distributorData();\n      setDistributorId(data._id);\n\n      if (!isEmpty(data.business)) {\n        setBusinessProfile(data.business[0]);\n        dispatch(setDistributorInfo({ ...distributor,\n          business: true\n        }));\n      }\n    } catch (error) {\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  const getBrandsData = async () => {\n    try {\n      const data = await getBrands();\n      setBrands(data.filter(item => !item.isDeleted).map(item => ({\n        value: item._id,\n        label: item.name\n      })));\n    } catch (error) {\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  useEffect(() => {\n    getDirtibutorData();\n    getBrandsData();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(businessProfile)) {\n      setValue('businessName', get(businessProfile, 'businessName', ''));\n      setValue('businessLegalName', get(businessProfile, 'businessLegalName', ''));\n      setValue('businessEntityType', get(businessProfile, 'businessEntityType', ''));\n      setValue('businessAddress', get(businessProfile, 'businessAddress', ''));\n      setValue('operationalHoursFrom', get(businessProfile, 'operationalHours', '').split('-')[0]);\n      setValue('operationalHoursTo', get(businessProfile, 'operationalHours', '').split('-')[1]);\n      setValue('establishedYear', get(businessProfile, 'establishedYear', ''));\n      setValue('gstin', get(businessProfile, 'gstin', ''));\n      setValue('pan', get(businessProfile, 'pan', ''));\n      setValue('shortCode', get(businessProfile, 'shortCode', ''));\n      setworkingdays(JSON.parse(get(businessProfile, 'operationalDays', [])));\n\n      if (!_.isEmpty(brands) && Array.isArray(businessProfile === null || businessProfile === void 0 ? void 0 : businessProfile.brands)) {\n        var _ref2;\n\n        const previouslySelectedBrands = (_ref2 = [...businessProfile.brands]) === null || _ref2 === void 0 ? void 0 : _ref2.map(item => {\n          return brands.find(brand => brand.value === item);\n        });\n        setSelectedBrands(previouslySelectedBrands);\n        setValue('brands', previouslySelectedBrands);\n      }\n    }\n  }, [businessProfile, brands]);\n\n  const handleFormSubmit = async data => {\n    setLoading(true);\n    data.operationalHours = `${data.operationalHoursFrom}-${data.operationalHoursTo}`;\n    data.operationalDays = JSON.stringify(workingdays);\n    data.shortCode = toUpper(data.shortCode);\n    data.gstin = toUpper(data.gstin);\n    data.pan = toUpper(data.pan);\n    data.brands = [...selectedBrands].map(item => item.value);\n\n    try {\n      const api = `/distributors/${distributorId}/businesses`;\n\n      if (!isEmpty(businessProfile)) {\n        await axios.patch(api, { ...data\n        }, {\n          headers: {\n            Authorization: auth.authToken\n          }\n        });\n      } else {\n        await axios.post(api, { ...data\n        }, {\n          headers: {\n            Authorization: auth.authToken\n          }\n        });\n        dispatch(setDistributorInfo({ ...distributor,\n          business: true\n        }));\n      }\n\n      setActiveStep(2);\n      toast(intl.formatMessage(messages.businessProfileSaveSuccess));\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  const onReset = () => {\n    reset({}, {\n      keepDirty: false,\n      keepErrors: false,\n      keepValues: false\n    });\n  };\n\n  const companyTypes = useMemo(() => [intl.formatMessage(messages.privateCompany), intl.formatMessage(messages.publicCompany), intl.formatMessage(messages.soleProprietor), intl.formatMessage(messages.onePersonCompany), intl.formatMessage(messages.partnership), intl.formatMessage(messages.liabilityCompany)], []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.businessProfile)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"32%\",\n          label: messages.businessName,\n          inputName: \"businessName\",\n          inputType: \"text\",\n          isRequired: true,\n          errors: errors,\n          requiredLabel: messages.businessNameRequired,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"32%\",\n          label: messages.businessLegalName,\n          inputName: \"businessLegalName\",\n          inputType: \"text\",\n          isRequired: true,\n          errors: errors,\n          requiredLabel: messages.businessLegalNameRequired,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '32%'\n          },\n          mt: {\n            base: 6,\n            lg: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-full mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.entityType)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select entity type\",\n              ...register('businessEntityType', {\n                required: true\n              }),\n              children: companyTypes.map(entity => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: entity,\n                  children: entity\n                }, entity, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), errors && errors.businessEntityType && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.entityTypeRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        mt: {\n          base: 0,\n          lg: 6\n        },\n        mb: 6,\n        children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"32%\",\n          label: messages.gstin,\n          inputName: \"gstin\",\n          inputType: \"text\",\n          isRequired: true,\n          errors: errors,\n          requiredLabel: messages.gstinRequired,\n          register: register,\n          errMsg: messages.gstInvalid,\n          length: {\n            max: 15\n          },\n          maxVal: 15\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"32%\",\n          label: messages.pan,\n          length: {\n            min: 10,\n            max: 10\n          },\n          inputName: \"pan\",\n          inputType: \"text\",\n          isRequired: true,\n          errors: errors,\n          requiredLabel: messages.panRequired,\n          errMsg: messages.invalidPan,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '32%'\n          },\n          mt: {\n            base: 6,\n            lg: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-full mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.establishedYear)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select year\",\n              defaultValue: 2021,\n              ...register('establishedYear', {}),\n              children: _.range(1800, 3000, 1).map(year => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: year,\n                  children: year\n                }, year, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), errors && errors.establishedYear && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.establishedYearRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        size: \"md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        mt: 6,\n        mb: 6,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '48%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n            children: intl.formatMessage(messages.brands)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n            name: \"brands\",\n            placeholder: intl.formatMessage(messages.brands),\n            value: selectedBrands,\n            onChange: e => {\n              setSelectedBrands(e);\n            },\n            isMulti: true,\n            options: brands,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), errors && errors.brands && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-youtube-regular text-sm\",\n            children: intl.formatMessage(messages.brandRequired)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '48%'\n          },\n          mt: {\n            base: 6,\n            lg: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n            children: intl.formatMessage(messages.operationalHours)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              style: {\n                width: '47%'\n              },\n              type: \"time\",\n              defaultValue: \"10:00\",\n              placeholder: intl.formatMessage(messages.operationalHours),\n              ...register('operationalHoursFrom', {})\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              width: {\n                base: 'auto',\n                lg: '6%'\n              },\n              textAlign: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: intl.formatMessage(messages.operationalHourTo)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              defaultValue: \"18:00\",\n              style: {\n                width: '47%'\n              },\n              type: \"time\",\n              placeholder: intl.formatMessage(messages.operationalHours),\n              ...register('operationalHoursTo', {})\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), errors && errors.operationalHours && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.operationalHoursRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        size: \"md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        mt: 6,\n        mb: 6,\n        children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"48%\",\n          label: messages.shortCode,\n          length: {\n            min: 3,\n            max: 4\n          },\n          inputName: \"shortCode\",\n          inputType: \"text\",\n          isRequired: true,\n          errors: errors,\n          requiredLabel: messages.shortCodeRequired,\n          errMsg: messages.invalidshortCode,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '48%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n            children: intl.formatMessage(messages.operationalDays)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MultiSelect, {\n            name: \"operationalDays\",\n            placeholder: intl.formatMessage(messages.operationalDays),\n            value: workingdays,\n            onChange: e => {\n              setworkingdays(e);\n            },\n            isMulti: true,\n            options: daysOption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), errors && errors.operationalDays && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-youtube-regular text-sm\",\n            children: intl.formatMessage(messages.operationalDaysRequired)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ml: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(FormactionButtons, {\n          isLoading: loading,\n          saveLabel: messages.saveButton,\n          onReset: onReset,\n          cancleLabel: messages.cancelButtonLabe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BusinessProfileForm, \"2YlpisknI4Hibyx9f26k1KbV7e8=\", false, function () {\n  return [useDispatch, useSelector, useIntl, useForm];\n});\n\n_c = BusinessProfileForm;\nBusinessProfileForm.propTypes = {\n  setActiveStep: PropTypes.func,\n  distributor: PropTypes.object,\n  distributorData: PropTypes.func\n};\nexport default BusinessProfileForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BusinessProfileForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/BusinessProfileForm/index.js"],"names":["React","useEffect","useState","useMemo","PropTypes","useDispatch","useForm","Input","Button","Select","Divider","useIntl","toast","get","isEmpty","useSelector","publicAxios","axios","messages","setDistributorInfo","_","toUpper","MultiSelect","daysOption","CustomInput","InputScaffold","FormactionButtons","Box","getBrands","BusinessProfileForm","setActiveStep","distributor","distributorData","loading","setLoading","businessProfile","setBusinessProfile","dispatch","auth","state","intl","distributorId","setDistributorId","brands","setBrands","selectedBrands","setSelectedBrands","workingdays","setworkingdays","value","label","register","formState","errors","handleSubmit","reset","setValue","mode","getDirtibutorData","data","_id","business","error","formatMessage","somethingWentWrong","getBrandsData","filter","item","isDeleted","map","name","split","JSON","parse","Array","isArray","previouslySelectedBrands","find","brand","handleFormSubmit","operationalHours","operationalHoursFrom","operationalHoursTo","operationalDays","stringify","shortCode","gstin","pan","api","patch","headers","Authorization","authToken","post","businessProfileSaveSuccess","err","onReset","keepDirty","keepErrors","keepValues","companyTypes","privateCompany","publicCompany","soleProprietor","onePersonCompany","partnership","liabilityCompany","businessName","businessNameRequired","businessLegalName","businessLegalNameRequired","base","lg","entityType","required","entity","businessEntityType","entityTypeRequired","gstinRequired","gstInvalid","max","min","panRequired","invalidPan","establishedYear","range","year","establishedYearRequired","e","brandRequired","width","operationalHourTo","operationalHoursRequired","shortCodeRequired","invalidshortCode","operationalDaysRequired","saveButton","cancelButtonLabe","propTypes","func","object"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Input, Button, Select, Divider } from '@chakra-ui/react';\r\nimport { useIntl } from 'react-intl';\r\nimport toast from 'react-hot-toast';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { useSelector } from 'react-redux';\r\nimport { publicAxios as axios } from '../../axios';\r\nimport messages from './messages';\r\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\r\nimport _, { toUpper } from 'lodash';\r\nimport { Select as MultiSelect } from 'chakra-react-select';\r\nimport daysOption from '../../utils/daysOption';\r\nimport CustomInput from '../../utils/Input';\r\nimport InputScaffold from '../../utils/InputScaffold';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport { Box } from '@chakra-ui/react';\r\nimport {\r\n  getBrands,\r\n} from '../../containers/PartAddition/action';\r\n\r\n\r\n\r\n\r\n\r\nconst BusinessProfileForm = ({\r\n  setActiveStep,\r\n  distributor,\r\n  distributorData,\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [businessProfile, setBusinessProfile] = useState({});\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth);\r\n  const intl = useIntl();\r\n  const [distributorId, setDistributorId] = useState('');\r\n  const [brands, setBrands] = useState([]);\r\n  const [selectedBrands, setSelectedBrands] = useState([]);\r\n  const [workingdays, setworkingdays] = useState([\r\n    { value: 'SUN', label: 'Sunday' },\r\n    { value: 'MON', label: 'Monday' },\r\n    { value: 'TUE', label: 'Tuesday' },\r\n    { value: 'WED', label: 'Wednesday' },\r\n    { value: 'FRI', label: 'Friday' },\r\n    { value: 'THU', label: 'Thursday' },\r\n    { value: 'SAT', label: 'Saturday' },\r\n  ]);\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm({\r\n    mode: 'onSubmit',\r\n  });\r\n  const getDirtibutorData = async () => {\r\n    try {\r\n      const data = await distributorData();\r\n      setDistributorId(data._id);\r\n      if (!isEmpty(data.business)) {\r\n        setBusinessProfile(data.business[0]);\r\n        dispatch(setDistributorInfo({ ...distributor, business: true }));\r\n      }\r\n    } catch (error) {\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n  const getBrandsData = async () => {\r\n    try {\r\n      const data = await getBrands();\r\n      setBrands(data.filter(item => !item.isDeleted).map(item => ({value: item._id, label: item.name})));\r\n    } catch (error) {\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDirtibutorData();\r\n    getBrandsData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(businessProfile)) {\r\n      setValue('businessName', get(businessProfile, 'businessName', ''));\r\n      setValue(\r\n        'businessLegalName',\r\n        get(businessProfile, 'businessLegalName', ''),\r\n      );\r\n      setValue(\r\n        'businessEntityType',\r\n        get(businessProfile, 'businessEntityType', ''),\r\n      );\r\n      setValue('businessAddress', get(businessProfile, 'businessAddress', ''));\r\n      setValue(\r\n        'operationalHoursFrom',\r\n        get(businessProfile, 'operationalHours', '').split('-')[0],\r\n      );\r\n      setValue(\r\n        'operationalHoursTo',\r\n        get(businessProfile, 'operationalHours', '').split('-')[1],\r\n      );\r\n      setValue('establishedYear', get(businessProfile, 'establishedYear', ''));\r\n      setValue('gstin', get(businessProfile, 'gstin', ''));\r\n      setValue('pan', get(businessProfile, 'pan', ''));\r\n      setValue('shortCode', get(businessProfile, 'shortCode', ''));\r\n      setworkingdays(JSON.parse(get(businessProfile, 'operationalDays', [])));\r\n\r\n        if(!_.isEmpty(brands) && Array.isArray(businessProfile?.brands)){\r\n          const previouslySelectedBrands =  [...businessProfile.brands]?.map(item =>{ \r\n            return brands.find(brand => brand.value === item);\r\n          })\r\n          setSelectedBrands(previouslySelectedBrands);\r\n          setValue('brands',previouslySelectedBrands)\r\n        }\r\n     \r\n    }\r\n  }, [businessProfile, brands]);\r\n\r\n  \r\n  const handleFormSubmit = async (data) => {\r\n    setLoading(true);\r\n    data.operationalHours = `${data.operationalHoursFrom}-${data.operationalHoursTo}`;\r\n    data.operationalDays = JSON.stringify(workingdays);\r\n    data.shortCode = toUpper(data.shortCode);\r\n    data.gstin = toUpper(data.gstin);\r\n    data.pan = toUpper(data.pan);\r\n    data.brands = [...selectedBrands].map(item => item.value);\r\n    try {\r\n      const api = `/distributors/${distributorId}/businesses`;\r\n      if (!isEmpty(businessProfile)) {\r\n        await axios.patch(\r\n          api,\r\n          {\r\n            ...data,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: auth.authToken,\r\n            },\r\n          },\r\n        );\r\n      } else {\r\n        await axios.post(\r\n          api,\r\n          {\r\n            ...data,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: auth.authToken,\r\n            },\r\n          },\r\n        );\r\n        dispatch(setDistributorInfo({ ...distributor, business: true }));\r\n      }\r\n      setActiveStep(2);\r\n      toast(intl.formatMessage(messages.businessProfileSaveSuccess));\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n  const onReset = () => {\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n  };\r\n\r\n  const companyTypes = useMemo(() => [\r\n    intl.formatMessage(messages.privateCompany),\r\n    intl.formatMessage(messages.publicCompany),\r\n    intl.formatMessage(messages.soleProprietor),\r\n    intl.formatMessage(messages.onePersonCompany),\r\n    intl.formatMessage(messages.partnership),\r\n    intl.formatMessage(messages.liabilityCompany),\r\n  ],[])\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.businessProfile)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box display='flex' flexWrap='wrap' justifyContent='space-between'>\r\n          <InputScaffold\r\n            width='32%'\r\n            label={messages.businessName}\r\n            inputName='businessName'\r\n            inputType='text'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.businessNameRequired}\r\n            register={register}\r\n          />\r\n          <InputScaffold\r\n            width='32%'\r\n            label={messages.businessLegalName}\r\n            inputName='businessLegalName'\r\n            inputType='text'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.businessLegalNameRequired}\r\n            register={register}\r\n          />\r\n           <Box width={{ base: '100%', lg: '32%' }} mt={{ base: 6, lg: 0 }}>\r\n            <div className='relative w-full mb-3'>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.entityType)}\r\n              </label>\r\n              <Select\r\n                placeholder='Select entity type'\r\n                {...register('businessEntityType', {required: true})}\r\n              >\r\n                {companyTypes.map((entity) => {\r\n                  return (\r\n                    <option value={entity} key={entity}>\r\n                      {entity}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n              {errors && errors.businessEntityType && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.entityTypeRequired)}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          flexWrap='wrap'\r\n          justifyContent='space-between'\r\n          mt={{ base: 0, lg: 6 }}\r\n          mb={6}\r\n        >\r\n          <InputScaffold\r\n            width='32%'\r\n            label={messages.gstin}\r\n            inputName='gstin'\r\n            inputType='text'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.gstinRequired}\r\n            register={register}\r\n            errMsg={messages.gstInvalid}\r\n            length={{ max: 15 }}\r\n            maxVal={15}\r\n          />\r\n          <InputScaffold\r\n            width='32%'\r\n            label={messages.pan}\r\n            length={{ min: 10, max: 10 }}\r\n            inputName='pan'\r\n            inputType='text'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.panRequired}\r\n            errMsg={messages.invalidPan}\r\n            register={register}\r\n          />\r\n\r\n          <Box width={{ base: '100%', lg: '32%' }} mt={{ base: 6, lg: 0 }}>\r\n            <div className='relative w-full mb-3'>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.establishedYear)}\r\n              </label>\r\n              <Select\r\n                placeholder='Select year'\r\n                defaultValue={2021}\r\n                {...register('establishedYear', {})}\r\n              >\r\n                {_.range(1800, 3000, 1).map((year) => {\r\n                  return (\r\n                    <option value={year} key={year}>\r\n                      {year}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n              {errors && errors.establishedYear && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.establishedYearRequired)}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <Divider size='md' />\r\n        <Box\r\n          display='flex'\r\n          justifyContent='space-between'\r\n          flexWrap='wrap'\r\n          width='100%'\r\n          mt={6}\r\n          mb={6}\r\n        >\r\n          <Box width={{ base: '100%', lg: '48%' }}>\r\n            <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n            {intl.formatMessage(messages.brands)}\r\n            </label>\r\n\r\n            <MultiSelect\r\n              name='brands'\r\n              placeholder={intl.formatMessage(messages.brands)}\r\n              value={selectedBrands}\r\n              onChange={(e) => {\r\n                setSelectedBrands(e);\r\n              }}\r\n              isMulti\r\n              options={brands}\r\n              required\r\n            />\r\n            {errors && errors.brands && (\r\n              <span className='text-youtube-regular text-sm'>\r\n                {intl.formatMessage(messages.brandRequired)}\r\n              </span>\r\n            )}\r\n          </Box>\r\n\r\n          <Box width={{ base: '100%', lg: '48%' }} mt={{ base: 6, lg: 0 }}>\r\n            {/*  <div className=\"relative w-full mb-3\" style={{ display: \"flex\", flexDirection: \"column\" }}> */}\r\n            <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n              {intl.formatMessage(messages.operationalHours)}\r\n            </label>\r\n            <Box\r\n              width='100%'\r\n              display='flex'\r\n              justifyContent='flex-end'\r\n              alignItems='center'\r\n            >\r\n              <Input\r\n                style={{ width: '47%' }}\r\n                type='time'\r\n                defaultValue='10:00'\r\n                placeholder={intl.formatMessage(messages.operationalHours)}\r\n                {...register('operationalHoursFrom', {})}\r\n              />\r\n              <Box width={{ base: 'auto', lg: '6%' }} textAlign='center'>\r\n                <label>{intl.formatMessage(messages.operationalHourTo)}</label>\r\n              </Box>\r\n              <Input\r\n                defaultValue='18:00'\r\n                style={{ width: '47%' }}\r\n                type='time'\r\n                placeholder={intl.formatMessage(messages.operationalHours)}\r\n                {...register('operationalHoursTo', {})}\r\n              />\r\n              {errors && errors.operationalHours && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.operationalHoursRequired)}\r\n                </span>\r\n              )}\r\n            </Box>\r\n            {/*  </div> */}\r\n          </Box>\r\n        </Box>\r\n        <Divider size='md' />\r\n        <Box\r\n          display='flex'\r\n          flexWrap='wrap'\r\n          justifyContent='space-between'\r\n          mt={6}\r\n          mb={6}\r\n        >\r\n          <InputScaffold\r\n            width='48%'\r\n            label={messages.shortCode}\r\n            length={{ min: 3, max: 4 }}\r\n            inputName='shortCode'\r\n            inputType='text'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.shortCodeRequired}\r\n            errMsg={messages.invalidshortCode}\r\n            register={register}\r\n          />\r\n\r\n          <Box width={{ base: '100%', lg: '48%' }}>\r\n            <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n              {intl.formatMessage(messages.operationalDays)}\r\n            </label>\r\n\r\n            <MultiSelect\r\n              name='operationalDays'\r\n              placeholder={intl.formatMessage(messages.operationalDays)}\r\n              value={workingdays}\r\n              onChange={(e) => {\r\n                setworkingdays(e);\r\n              }}\r\n              isMulti\r\n              options={daysOption}\r\n            />\r\n            {errors && errors.operationalDays && (\r\n              <span className='text-youtube-regular text-sm'>\r\n                {intl.formatMessage(messages.operationalDaysRequired)}\r\n              </span>\r\n            )}\r\n          </Box>\r\n          \r\n          {/* <InputScaffold\r\n            width='68%'\r\n            label={messages.registeredAddress}\r\n            inputName='businessAddress'\r\n            inputType='textarea'\r\n            isRequired={true}\r\n            errors={errors}\r\n            requiredLabel={messages.registeredAddressRequired}\r\n            register={register}\r\n          /> */}\r\n        </Box>\r\n        <Box ml='auto'>\r\n         { <FormactionButtons\r\n            isLoading={loading}\r\n            saveLabel={messages.saveButton}\r\n            onReset={onReset}\r\n            cancleLabel={messages.cancelButtonLabe}\r\n          />}\r\n        </Box>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nBusinessProfileForm.propTypes = {\r\n  setActiveStep: PropTypes.func,\r\n  distributor: PropTypes.object,\r\n  distributorData: PropTypes.func,\r\n};\r\n\r\nexport default BusinessProfileForm;\r\n"]},"metadata":{},"sourceType":"module"}