{"ast":null,"code":"var _excluded = [\"color\"],\n    _excluded2 = [\"children\", \"styles\", \"components\", \"theme\", \"size\", \"colorScheme\", \"isDisabled\", \"isInvalid\", \"inputId\", \"tagVariant\", \"hasStickyGroupHeaders\", \"selectedOptionStyle\", \"selectedOptionColor\"];\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\n\nimport React, { cloneElement } from \"react\";\nimport { Flex, Tag, TagCloseButton, TagLabel, Divider, CloseButton, Center, Box, MenuIcon, Spinner, StylesProvider, useMultiStyleConfig, useStyles, useTheme, useColorModeValue, useFormControl, createIcon } from \"@chakra-ui/react\"; // Taken from the @chakra-ui/icons package to prevent needing it as a dependency\n// https://github.com/chakra-ui/chakra-ui/blob/main/packages/icons/src/ChevronDown.tsx\n\nvar ChevronDown = createIcon({\n  displayName: \"ChevronDownIcon\",\n  d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}); // Use the CheckIcon component from the chakra menu\n// https://github.com/chakra-ui/chakra-ui/blob/main/packages/menu/src/menu.tsx#L301\n\nvar CheckIcon = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\"\n}, props), /*#__PURE__*/React.createElement(\"polygon\", {\n  fill: \"currentColor\",\n  points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n})); // Custom styles for components which do not have a chakra equivalent\n\n\nvar chakraStyles = {\n  // When disabled, react-select sets the pointer-state to none which prevents\n  // the `not-allowed` cursor style from chakra from getting applied to the\n  // Control\n  container: provided => _objectSpread(_objectSpread({}, provided), {}, {\n    pointerEvents: \"auto\"\n  }),\n  input: provided => _objectSpread(_objectSpread({}, provided), {}, {\n    color: \"inherit\",\n    lineHeight: 1\n  }),\n  menu: provided => _objectSpread(_objectSpread({}, provided), {}, {\n    boxShadow: \"none\"\n  }),\n  valueContainer: (provided, _ref) => {\n    var {\n      selectProps: {\n        size\n      }\n    } = _ref;\n    var px = {\n      sm: \"0.75rem\",\n      md: \"1rem\",\n      lg: \"1rem\"\n    };\n    return _objectSpread(_objectSpread({}, provided), {}, {\n      padding: \"0.125rem \".concat(px[size])\n    });\n  },\n  loadingMessage: (provided, _ref2) => {\n    var {\n      selectProps: {\n        size\n      }\n    } = _ref2;\n    var fontSizes = {\n      sm: \"0.875rem\",\n      md: \"1rem\",\n      lg: \"1.125rem\"\n    };\n    var paddings = {\n      sm: \"6px 9px\",\n      md: \"8px 12px\",\n      lg: \"10px 15px\"\n    };\n    return _objectSpread(_objectSpread({}, provided), {}, {\n      fontSize: fontSizes[size],\n      padding: paddings[size]\n    });\n  },\n  // Add the chakra style for when a TagCloseButton has focus\n  multiValueRemove: (provided, _ref3) => {\n    var {\n      // @ts-ignore For some reason isFocused is not recognized as a prop here\n      // but it works\n      isFocused,\n      selectProps: {\n        multiValueRemoveFocusStyle\n      }\n    } = _ref3;\n    return isFocused ? multiValueRemoveFocusStyle : {};\n  },\n  singleValue: _ref4 => {\n    var {\n      color\n    } = _ref4,\n        provided = _objectWithoutProperties(_ref4, _excluded);\n\n    return provided;\n  },\n  control: () => ({}),\n  menuList: () => ({}),\n  option: () => ({}),\n  multiValue: () => ({}),\n  multiValueLabel: () => ({}),\n  group: () => ({})\n};\nvar chakraComponents = {\n  // Control components\n  Control: _ref5 => {\n    var {\n      children,\n      innerRef,\n      innerProps,\n      isDisabled,\n      isFocused,\n      selectProps: {\n        size,\n        isInvalid\n      }\n    } = _ref5;\n    var inputStyles = useMultiStyleConfig(\"Input\", {\n      size\n    });\n    var heights = {\n      sm: 8,\n      md: 10,\n      lg: 12\n    };\n    return /*#__PURE__*/React.createElement(StylesProvider, {\n      value: inputStyles\n    }, /*#__PURE__*/React.createElement(Flex, _extends({\n      ref: innerRef,\n      sx: _objectSpread(_objectSpread({}, inputStyles.field), {}, {\n        p: 0,\n        overflow: \"hidden\",\n        h: \"auto\",\n        minH: heights[size]\n      })\n    }, innerProps, {\n      \"data-focus\": isFocused ? true : undefined,\n      \"data-invalid\": isInvalid ? true : undefined,\n      \"data-disabled\": isDisabled ? true : undefined\n    }), children));\n  },\n  MultiValueContainer: _ref6 => {\n    var {\n      children,\n      innerRef,\n      innerProps,\n      data,\n      selectProps\n    } = _ref6;\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      ref: innerRef\n    }, innerProps, {\n      m: \"0.125rem\" // react-select Fixed Options example:\n      // https://react-select.com/home#fixed-options\n      ,\n      variant: data.variant || selectProps.tagVariant || (data.isFixed ? \"solid\" : \"subtle\"),\n      colorScheme: data.colorScheme || selectProps.colorScheme,\n      size: selectProps.size\n    }), children);\n  },\n  MultiValueLabel: _ref7 => {\n    var {\n      children,\n      innerRef,\n      innerProps\n    } = _ref7;\n    return /*#__PURE__*/React.createElement(TagLabel, _extends({\n      ref: innerRef\n    }, innerProps), children);\n  },\n  MultiValueRemove: _ref8 => {\n    var {\n      children,\n      innerRef,\n      innerProps,\n      data: {\n        isFixed\n      }\n    } = _ref8;\n\n    if (isFixed) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(TagCloseButton, _extends({\n      ref: innerRef\n    }, innerProps, {\n      tabIndex: -1\n    }), children);\n  },\n  IndicatorSeparator: _ref9 => {\n    var {\n      innerProps\n    } = _ref9;\n    return /*#__PURE__*/React.createElement(Divider, _extends({}, innerProps, {\n      orientation: \"vertical\",\n      opacity: \"1\"\n    }));\n  },\n  ClearIndicator: _ref10 => {\n    var {\n      innerProps,\n      selectProps: {\n        size\n      }\n    } = _ref10;\n    return /*#__PURE__*/React.createElement(CloseButton, _extends({}, innerProps, {\n      size: size,\n      mx: 2,\n      tabIndex: -1\n    }));\n  },\n  DropdownIndicator: _ref11 => {\n    var {\n      innerProps,\n      selectProps: {\n        size\n      }\n    } = _ref11;\n    var {\n      addon\n    } = useStyles();\n    var iconSizes = {\n      sm: 4,\n      md: 5,\n      lg: 6\n    };\n    var iconSize = iconSizes[size];\n    return /*#__PURE__*/React.createElement(Center, _extends({}, innerProps, {\n      sx: _objectSpread(_objectSpread({}, addon), {}, {\n        h: \"100%\",\n        borderRadius: 0,\n        borderWidth: 0,\n        cursor: \"pointer\"\n      })\n    }), /*#__PURE__*/React.createElement(ChevronDown, {\n      h: iconSize,\n      w: iconSize\n    }));\n  },\n  LoadingIndicator: _ref12 => {\n    var {\n      innerProps,\n      selectProps: {\n        size\n      }\n    } = _ref12;\n    var spinnerSizes = {\n      sm: \"xs\",\n      md: \"sm\",\n      lg: \"md\"\n    };\n    var spinnerSize = spinnerSizes[size];\n    return /*#__PURE__*/React.createElement(Spinner, _extends({\n      mr: 3\n    }, innerProps, {\n      size: spinnerSize\n    }));\n  },\n  // Menu components\n  Menu: _ref13 => {\n    var {\n      children,\n      innerProps,\n      innerRef,\n      // @ts-ignore `placement` is not recognized as a prop but it's essential\n      // for the menu placement (and it is passed)\n      placement,\n      selectProps: {\n        size\n      }\n    } = _ref13;\n    var menuStyles = useMultiStyleConfig(\"Menu\", {});\n    var chakraTheme = useTheme();\n    var borderRadii = {\n      sm: chakraTheme.radii.sm,\n      md: chakraTheme.radii.md,\n      lg: chakraTheme.radii.md\n    };\n    return /*#__PURE__*/React.createElement(Box, _extends({\n      ref: innerRef,\n      sx: _objectSpread(_objectSpread(_objectSpread({\n        position: \"absolute\"\n      }, placement === \"bottom\" && {\n        top: \"100%\"\n      }), placement === \"top\" && {\n        bottom: \"100%\"\n      }), {}, {\n        my: \"8px\",\n        w: \"100%\",\n        zIndex: 1,\n        overflow: \"hidden\",\n        rounded: borderRadii[size]\n      })\n    }, innerProps), /*#__PURE__*/React.createElement(StylesProvider, {\n      value: menuStyles\n    }, children));\n  },\n  MenuList: _ref14 => {\n    var {\n      innerRef,\n      children,\n      maxHeight,\n      selectProps: {\n        size\n      }\n    } = _ref14;\n    var {\n      list\n    } = useStyles();\n    var chakraTheme = useTheme();\n    var borderRadii = {\n      sm: chakraTheme.radii.sm,\n      md: chakraTheme.radii.md,\n      lg: chakraTheme.radii.md\n    };\n    return /*#__PURE__*/React.createElement(Box, {\n      sx: _objectSpread(_objectSpread({}, list), {}, {\n        maxH: \"\".concat(maxHeight, \"px\"),\n        overflowY: \"auto\",\n        borderRadius: borderRadii[size]\n      }),\n      ref: innerRef\n    }, children);\n  },\n  GroupHeading: _ref15 => {\n    var {\n      innerProps,\n      children,\n      selectProps: {\n        size,\n        hasStickyGroupHeaders\n      }\n    } = _ref15;\n    var {\n      groupTitle,\n      list: {\n        bg\n      }\n    } = useStyles();\n    var chakraTheme = useTheme();\n    var fontSizes = {\n      sm: chakraTheme.fontSizes.xs,\n      md: chakraTheme.fontSizes.sm,\n      lg: chakraTheme.fontSizes.md\n    };\n    var paddings = {\n      sm: \"0.4rem 0.8rem\",\n      md: \"0.5rem 1rem\",\n      lg: \"0.6rem 1.2rem\"\n    };\n    return /*#__PURE__*/React.createElement(Box, _extends({\n      sx: _objectSpread(_objectSpread({}, groupTitle), {}, {\n        fontSize: fontSizes[size],\n        p: paddings[size],\n        m: 0,\n        borderBottomWidth: hasStickyGroupHeaders ? \"1px\" : 0,\n        position: hasStickyGroupHeaders ? \"sticky\" : \"static\",\n        top: -2,\n        bg\n      })\n    }, innerProps), children);\n  },\n  Option: _ref16 => {\n    var {\n      innerRef,\n      innerProps,\n      children,\n      isFocused,\n      isDisabled,\n      isSelected,\n      selectProps: {\n        size,\n        isMulti,\n        hideSelectedOptions,\n        selectedOptionStyle,\n        selectedOptionColor\n      }\n    } = _ref16;\n    var {\n      item\n    } = useStyles();\n    var paddings = {\n      sm: \"0.3rem 0.6rem\",\n      md: \"0.4rem 0.8rem\",\n      lg: \"0.5rem 1rem\"\n    }; // Use the same selected color as the border of the select component\n    // https://github.com/chakra-ui/chakra-ui/blob/main/packages/theme/src/components/input.ts#L73\n\n    var selectedBg = useColorModeValue(\"\".concat(selectedOptionColor, \".500\"), \"\".concat(selectedOptionColor, \".300\"));\n    var selectedColor = useColorModeValue(\"white\", \"black\"); // Don't create exta space for the checkmark if using a multi select with\n    // options that dissapear when they're selected\n\n    var showCheckIcon = selectedOptionStyle === \"check\" && (!isMulti || hideSelectedOptions === false);\n    var shouldHighlight = selectedOptionStyle === \"color\" && isSelected;\n    return /*#__PURE__*/React.createElement(Flex, _extends({\n      role: \"button\",\n      sx: _objectSpread(_objectSpread(_objectSpread({}, item), {}, {\n        alignItems: \"center\",\n        w: \"100%\",\n        textAlign: \"start\",\n        fontSize: size,\n        p: paddings[size],\n        bg: isFocused ? item._focus.bg : \"transparent\"\n      }, shouldHighlight && {\n        bg: selectedBg,\n        color: selectedColor,\n        _active: {\n          bg: selectedBg\n        }\n      }), isDisabled && item._disabled),\n      ref: innerRef\n    }, innerProps, {\n      disabled: isDisabled ? true : undefined\n    }), showCheckIcon && /*#__PURE__*/React.createElement(MenuIcon, {\n      fontSize: \"0.8em\",\n      marginEnd: \"0.75rem\",\n      opacity: isSelected ? 1 : 0\n    }, /*#__PURE__*/React.createElement(CheckIcon, null)), children);\n  }\n};\n\nvar ChakraReactSelect = _ref17 => {\n  var _props$ariaInvalid;\n\n  var {\n    children,\n    styles = {},\n    components = {},\n    theme: _theme,\n    size = \"md\",\n    colorScheme = \"gray\",\n    isDisabled,\n    isInvalid,\n    inputId,\n    tagVariant = undefined,\n    hasStickyGroupHeaders = false,\n    selectedOptionStyle = \"color\",\n    selectedOptionColor = \"blue\"\n  } = _ref17,\n      props = _objectWithoutProperties(_ref17, _excluded2);\n\n  var chakraTheme = useTheme(); // Combine the props passed into the component with the props that can be set\n  // on a surrounding form control to get the values of `isDisabled` and\n  // `isInvalid`\n\n  var inputProps = useFormControl({\n    isDisabled,\n    isInvalid\n  }); // The chakra theme styles for TagCloseButton when focused\n\n  var closeButtonFocus = chakraTheme.components.Tag.baseStyle.closeButton._focus;\n  var multiValueRemoveFocusStyle = {\n    background: closeButtonFocus.bg,\n    boxShadow: chakraTheme.shadows[closeButtonFocus.boxShadow]\n  }; // The chakra UI global placeholder color\n  // https://github.com/chakra-ui/chakra-ui/blob/main/packages/theme/src/styles.ts#L13\n\n  var placeholderColor = useColorModeValue(chakraTheme.colors.gray[400], chakraTheme.colors.whiteAlpha[400]); // Ensure that the size used is one of the options, either `sm`, `md`, or `lg`\n\n  var realSize = size;\n  var sizeOptions = [\"sm\", \"md\", \"lg\"];\n\n  if (!sizeOptions.includes(size)) {\n    realSize = \"md\";\n  } // Ensure that the tag variant used is one of the options, either `subtle`,\n  // `solid`, or `outline` (or undefined)\n\n\n  var realTagVariant = tagVariant;\n  var tagVariantOptions = [\"subtle\", \"solid\", \"outline\"];\n\n  if (tagVariant !== undefined) {\n    if (!tagVariantOptions.includes(tagVariant)) {\n      realTagVariant = \"subtle\";\n    }\n  } // Ensure that the tag variant used is one of the options, either `subtle`,\n  // `solid`, or `outline` (or undefined)\n\n\n  var realSelectedOptionStyle = selectedOptionStyle;\n  var selectedOptionStyleOptions = [\"color\", \"check\"];\n\n  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {\n    realSelectedOptionStyle = \"color\";\n  } // Ensure that the color used for the selected options is a string\n\n\n  var realSelectedOptionColor = selectedOptionColor;\n\n  if (typeof selectedOptionColor !== \"string\") {\n    realSelectedOptionColor = \"blue\";\n  }\n\n  var select = /*#__PURE__*/cloneElement(children, _objectSpread(_objectSpread({\n    components: _objectSpread(_objectSpread({}, chakraComponents), components),\n    styles: _objectSpread(_objectSpread({}, chakraStyles), styles),\n    theme: baseTheme => {\n      var propTheme = {};\n\n      if (typeof _theme === \"function\") {\n        propTheme = _theme(baseTheme);\n      }\n\n      return _objectSpread(_objectSpread(_objectSpread({}, baseTheme), propTheme), {}, {\n        colors: _objectSpread(_objectSpread({}, baseTheme.colors), {}, {\n          neutral50: placeholderColor,\n          // placeholder text color\n          neutral40: placeholderColor\n        }, propTheme.colors),\n        spacing: _objectSpread(_objectSpread({}, baseTheme.spacing), propTheme.spacing)\n      });\n    },\n    colorScheme,\n    size: realSize,\n    tagVariant: realTagVariant,\n    selectedOptionStyle: realSelectedOptionStyle,\n    selectedOptionColor: realSelectedOptionColor,\n    multiValueRemoveFocusStyle,\n    // isDisabled and isInvalid can be set on the component\n    // or on a surrounding form control\n    isDisabled: inputProps.disabled,\n    isInvalid: !!inputProps[\"aria-invalid\"],\n    inputId: inputId || inputProps.id,\n    hasStickyGroupHeaders\n  }, props), {}, {\n    // aria-invalid can be passed to react-select, so we allow that to\n    // override the `isInvalid` prop\n    \"aria-invalid\": ((_props$ariaInvalid = props[\"aria-invalid\"]) !== null && _props$ariaInvalid !== void 0 ? _props$ariaInvalid : inputProps[\"aria-invalid\"]) ? true : undefined\n  }));\n  return select;\n};\n\nexport default ChakraReactSelect;","map":{"version":3,"sources":["../../src/chakra-react-select.tsx"],"names":["ChevronDown","createIcon","displayName","d","CheckIcon","props","chakraStyles","container","provided","pointerEvents","input","color","lineHeight","menu","boxShadow","valueContainer","selectProps","size","px","sm","md","lg","padding","loadingMessage","fontSizes","paddings","fontSize","multiValueRemove","multiValueRemoveFocusStyle","isFocused","singleValue","control","menuList","option","multiValue","multiValueLabel","group","chakraComponents","Control","isInvalid","inputStyles","useMultiStyleConfig","heights","p","overflow","h","minH","isDisabled","undefined","MultiValueContainer","innerRef","data","MultiValueLabel","innerProps","MultiValueRemove","isFixed","IndicatorSeparator","ClearIndicator","DropdownIndicator","addon","useStyles","iconSizes","iconSize","borderRadius","borderWidth","cursor","LoadingIndicator","spinnerSizes","spinnerSize","Menu","menuStyles","chakraTheme","useTheme","borderRadii","position","placement","top","bottom","my","w","zIndex","rounded","MenuList","list","maxH","overflowY","GroupHeading","hasStickyGroupHeaders","bg","m","borderBottomWidth","Option","selectedOptionColor","item","selectedBg","useColorModeValue","selectedColor","showCheckIcon","selectedOptionStyle","hideSelectedOptions","shouldHighlight","alignItems","textAlign","_active","isSelected","ChakraReactSelect","styles","components","theme","colorScheme","tagVariant","inputProps","useFormControl","closeButtonFocus","background","placeholderColor","realSize","sizeOptions","realTagVariant","tagVariantOptions","realSelectedOptionStyle","selectedOptionStyleOptions","realSelectedOptionColor","select","cloneElement","baseTheme","propTheme","colors","neutral50","neutral40","spacing","inputId"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport React, { cloneElement, ReactElement } from \"react\";\nimport {\n  Flex,\n  Tag,\n  TagCloseButton,\n  TagLabel,\n  Divider,\n  CloseButton,\n  Center,\n  Box,\n  MenuIcon,\n  Spinner,\n  PropsOf,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n  useTheme,\n  useColorModeValue,\n  useFormControl,\n  createIcon,\n} from \"@chakra-ui/react\";\nimport {\n  ChakraSelectProps,\n  Size,\n  Theme,\n  TagVariant,\n  SelectedOptionStyle,\n  RecursiveCSSObject,\n  SxProps,\n  SizeProps,\n  OptionalTheme,\n} from \"./types\";\n\n// Taken from the @chakra-ui/icons package to prevent needing it as a dependency\n// https://github.com/chakra-ui/chakra-ui/blob/main/packages/icons/src/ChevronDown.tsx\nconst ChevronDown = createIcon({\n  displayName: \"ChevronDownIcon\",\n  d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\",\n});\n\n// Use the CheckIcon component from the chakra menu\n// https://github.com/chakra-ui/chakra-ui/blob/main/packages/menu/src/menu.tsx#L301\nconst CheckIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\" {...props}>\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n);\n\n// Custom styles for components which do not have a chakra equivalent\nconst chakraStyles: ChakraSelectProps[\"styles\"] = {\n  // When disabled, react-select sets the pointer-state to none which prevents\n  // the `not-allowed` cursor style from chakra from getting applied to the\n  // Control\n  container: (provided) => ({\n    ...provided,\n    pointerEvents: \"auto\",\n  }),\n  input: (provided) => ({\n    ...provided,\n    color: \"inherit\",\n    lineHeight: 1,\n  }),\n  menu: (provided) => ({\n    ...provided,\n    boxShadow: \"none\",\n  }),\n  valueContainer: (provided, { selectProps: { size } }) => {\n    const px: SizeProps = {\n      sm: \"0.75rem\",\n      md: \"1rem\",\n      lg: \"1rem\",\n    };\n\n    return {\n      ...provided,\n      padding: `0.125rem ${px[size as Size]}`,\n    };\n  },\n  loadingMessage: (provided, { selectProps: { size } }) => {\n    const fontSizes: SizeProps = {\n      sm: \"0.875rem\",\n      md: \"1rem\",\n      lg: \"1.125rem\",\n    };\n\n    const paddings: SizeProps = {\n      sm: \"6px 9px\",\n      md: \"8px 12px\",\n      lg: \"10px 15px\",\n    };\n\n    return {\n      ...provided,\n      fontSize: fontSizes[size as Size],\n      padding: paddings[size as Size],\n    };\n  },\n  // Add the chakra style for when a TagCloseButton has focus\n  multiValueRemove: (\n    provided,\n    {\n      // @ts-ignore For some reason isFocused is not recognized as a prop here\n      // but it works\n      isFocused,\n      selectProps: { multiValueRemoveFocusStyle },\n    }\n  ) => (isFocused ? multiValueRemoveFocusStyle : {}),\n  singleValue: ({ color, ...provided }) => provided,\n  control: () => ({}),\n  menuList: () => ({}),\n  option: () => ({}),\n  multiValue: () => ({}),\n  multiValueLabel: () => ({}),\n  group: () => ({}),\n};\n\nconst chakraComponents: ChakraSelectProps[\"components\"] = {\n  // Control components\n  Control: ({\n    children,\n    innerRef,\n    innerProps,\n    isDisabled,\n    isFocused,\n    selectProps: { size, isInvalid },\n  }) => {\n    const inputStyles = useMultiStyleConfig(\"Input\", { size });\n\n    const heights: SizeProps = {\n      sm: 8,\n      md: 10,\n      lg: 12,\n    };\n\n    return (\n      <StylesProvider value={inputStyles}>\n        <Flex\n          ref={innerRef}\n          sx={{\n            ...inputStyles.field,\n            p: 0,\n            overflow: \"hidden\",\n            h: \"auto\",\n            minH: heights[size as Size],\n          }}\n          {...innerProps}\n          data-focus={isFocused ? true : undefined}\n          data-invalid={isInvalid ? true : undefined}\n          data-disabled={isDisabled ? true : undefined}\n        >\n          {children}\n        </Flex>\n      </StylesProvider>\n    );\n  },\n  MultiValueContainer: ({\n    children,\n    innerRef,\n    innerProps,\n    data,\n    selectProps,\n  }) => (\n    <Tag\n      ref={innerRef}\n      {...innerProps}\n      m=\"0.125rem\"\n      // react-select Fixed Options example:\n      // https://react-select.com/home#fixed-options\n      variant={\n        data.variant ||\n        selectProps.tagVariant ||\n        (data.isFixed ? \"solid\" : \"subtle\")\n      }\n      colorScheme={data.colorScheme || selectProps.colorScheme}\n      size={selectProps.size}\n    >\n      {children}\n    </Tag>\n  ),\n  MultiValueLabel: ({ children, innerRef, innerProps }) => (\n    <TagLabel ref={innerRef} {...innerProps}>\n      {children}\n    </TagLabel>\n  ),\n  MultiValueRemove: ({ children, innerRef, innerProps, data: { isFixed } }) => {\n    if (isFixed) {\n      return null;\n    }\n\n    return (\n      <TagCloseButton ref={innerRef} {...innerProps} tabIndex={-1}>\n        {children}\n      </TagCloseButton>\n    );\n  },\n  IndicatorSeparator: ({ innerProps }) => (\n    <Divider {...innerProps} orientation=\"vertical\" opacity=\"1\" />\n  ),\n  ClearIndicator: ({ innerProps, selectProps: { size } }) => (\n    <CloseButton {...innerProps} size={size} mx={2} tabIndex={-1} />\n  ),\n  DropdownIndicator: ({ innerProps, selectProps: { size } }) => {\n    const { addon } = useStyles();\n\n    const iconSizes: SizeProps = {\n      sm: 4,\n      md: 5,\n      lg: 6,\n    };\n    const iconSize = iconSizes[size as Size];\n\n    return (\n      <Center\n        {...innerProps}\n        sx={{\n          ...addon,\n          h: \"100%\",\n          borderRadius: 0,\n          borderWidth: 0,\n          cursor: \"pointer\",\n        }}\n      >\n        <ChevronDown h={iconSize} w={iconSize} />\n      </Center>\n    );\n  },\n  LoadingIndicator: ({ innerProps, selectProps: { size } }) => {\n    const spinnerSizes: SizeProps = {\n      sm: \"xs\",\n      md: \"sm\",\n      lg: \"md\",\n    };\n\n    const spinnerSize = spinnerSizes[size as Size];\n\n    return <Spinner mr={3} {...innerProps} size={spinnerSize} />;\n  },\n  // Menu components\n  Menu: ({\n    children,\n    innerProps,\n    innerRef,\n    // @ts-ignore `placement` is not recognized as a prop but it's essential\n    // for the menu placement (and it is passed)\n    placement,\n    selectProps: { size },\n  }) => {\n    const menuStyles = useMultiStyleConfig(\"Menu\", {});\n\n    const chakraTheme = useTheme();\n    const borderRadii: SizeProps = {\n      sm: chakraTheme.radii.sm,\n      md: chakraTheme.radii.md,\n      lg: chakraTheme.radii.md,\n    };\n\n    return (\n      <Box\n        ref={innerRef}\n        sx={{\n          position: \"absolute\",\n          ...(placement === \"bottom\" && { top: \"100%\" }),\n          ...(placement === \"top\" && { bottom: \"100%\" }),\n          my: \"8px\",\n          w: \"100%\",\n          zIndex: 1,\n          overflow: \"hidden\",\n          rounded: borderRadii[size as Size],\n        }}\n        {...innerProps}\n      >\n        <StylesProvider value={menuStyles}>{children}</StylesProvider>\n      </Box>\n    );\n  },\n  MenuList: ({ innerRef, children, maxHeight, selectProps: { size } }) => {\n    const { list } = useStyles();\n\n    const chakraTheme = useTheme();\n    const borderRadii: SizeProps = {\n      sm: chakraTheme.radii.sm,\n      md: chakraTheme.radii.md,\n      lg: chakraTheme.radii.md,\n    };\n\n    return (\n      <Box\n        sx={{\n          ...list,\n          maxH: `${maxHeight}px`,\n          overflowY: \"auto\",\n          borderRadius: borderRadii[size as Size],\n        }}\n        ref={innerRef}\n      >\n        {children}\n      </Box>\n    );\n  },\n  GroupHeading: ({\n    innerProps,\n    children,\n    selectProps: { size, hasStickyGroupHeaders },\n  }) => {\n    const {\n      groupTitle,\n      list: { bg },\n    } = useStyles();\n\n    const chakraTheme = useTheme();\n    const fontSizes: SizeProps = {\n      sm: chakraTheme.fontSizes.xs,\n      md: chakraTheme.fontSizes.sm,\n      lg: chakraTheme.fontSizes.md,\n    };\n    const paddings: SizeProps = {\n      sm: \"0.4rem 0.8rem\",\n      md: \"0.5rem 1rem\",\n      lg: \"0.6rem 1.2rem\",\n    };\n\n    return (\n      <Box\n        sx={{\n          ...groupTitle,\n          fontSize: fontSizes[size as Size],\n          p: paddings[size as Size],\n          m: 0,\n          borderBottomWidth: hasStickyGroupHeaders ? \"1px\" : 0,\n          position: hasStickyGroupHeaders ? \"sticky\" : \"static\",\n          top: -2,\n          bg,\n        }}\n        {...innerProps}\n      >\n        {children}\n      </Box>\n    );\n  },\n  Option: ({\n    innerRef,\n    innerProps,\n    children,\n    isFocused,\n    isDisabled,\n    isSelected,\n    selectProps: {\n      size,\n      isMulti,\n      hideSelectedOptions,\n      selectedOptionStyle,\n      selectedOptionColor,\n    },\n  }) => {\n    const { item } = useStyles();\n\n    const paddings: SizeProps = {\n      sm: \"0.3rem 0.6rem\",\n      md: \"0.4rem 0.8rem\",\n      lg: \"0.5rem 1rem\",\n    };\n\n    // Use the same selected color as the border of the select component\n    // https://github.com/chakra-ui/chakra-ui/blob/main/packages/theme/src/components/input.ts#L73\n    const selectedBg = useColorModeValue(\n      `${selectedOptionColor}.500`,\n      `${selectedOptionColor}.300`\n    );\n    const selectedColor = useColorModeValue(\"white\", \"black\");\n\n    // Don't create exta space for the checkmark if using a multi select with\n    // options that dissapear when they're selected\n    const showCheckIcon: boolean =\n      selectedOptionStyle === \"check\" &&\n      (!isMulti || hideSelectedOptions === false);\n\n    const shouldHighlight: boolean =\n      selectedOptionStyle === \"color\" && isSelected;\n\n    return (\n      <Flex\n        role=\"button\"\n        sx={{\n          ...item,\n          alignItems: \"center\",\n          w: \"100%\",\n          textAlign: \"start\",\n          fontSize: size,\n          p: paddings[size as Size],\n          bg: isFocused\n            ? (item as RecursiveCSSObject<SxProps>)._focus.bg\n            : \"transparent\",\n          ...(shouldHighlight && {\n            bg: selectedBg,\n            color: selectedColor,\n            _active: { bg: selectedBg },\n          }),\n          ...(isDisabled && (item as RecursiveCSSObject<SxProps>)._disabled),\n        }}\n        ref={innerRef}\n        {...innerProps}\n        disabled={isDisabled ? true : undefined}\n      >\n        {showCheckIcon && (\n          <MenuIcon\n            fontSize=\"0.8em\"\n            marginEnd=\"0.75rem\"\n            opacity={isSelected ? 1 : 0}\n          >\n            <CheckIcon />\n          </MenuIcon>\n        )}\n        {children}\n      </Flex>\n    );\n  },\n};\n\nconst ChakraReactSelect = ({\n  children,\n  styles = {},\n  components = {},\n  theme,\n  size = \"md\",\n  colorScheme = \"gray\",\n  isDisabled,\n  isInvalid,\n  inputId,\n  tagVariant = undefined as TagVariant,\n  hasStickyGroupHeaders = false as boolean,\n  selectedOptionStyle = \"color\" as SelectedOptionStyle,\n  selectedOptionColor = \"blue\",\n  ...props\n}: ChakraSelectProps): ReactElement => {\n  const chakraTheme = useTheme();\n\n  // Combine the props passed into the component with the props that can be set\n  // on a surrounding form control to get the values of `isDisabled` and\n  // `isInvalid`\n  const inputProps = useFormControl({ isDisabled, isInvalid });\n\n  // The chakra theme styles for TagCloseButton when focused\n  const closeButtonFocus =\n    chakraTheme.components.Tag.baseStyle.closeButton._focus;\n  const multiValueRemoveFocusStyle = {\n    background: closeButtonFocus.bg,\n    boxShadow: chakraTheme.shadows[closeButtonFocus.boxShadow],\n  };\n\n  // The chakra UI global placeholder color\n  // https://github.com/chakra-ui/chakra-ui/blob/main/packages/theme/src/styles.ts#L13\n  const placeholderColor = useColorModeValue(\n    chakraTheme.colors.gray[400],\n    chakraTheme.colors.whiteAlpha[400]\n  );\n\n  // Ensure that the size used is one of the options, either `sm`, `md`, or `lg`\n  let realSize: Size = size;\n  const sizeOptions: Size[] = [\"sm\", \"md\", \"lg\"];\n  if (!sizeOptions.includes(size)) {\n    realSize = \"md\";\n  }\n\n  // Ensure that the tag variant used is one of the options, either `subtle`,\n  // `solid`, or `outline` (or undefined)\n  let realTagVariant: TagVariant = tagVariant;\n  const tagVariantOptions: TagVariant[] = [\"subtle\", \"solid\", \"outline\"];\n  if (tagVariant !== undefined) {\n    if (!tagVariantOptions.includes(tagVariant)) {\n      realTagVariant = \"subtle\";\n    }\n  }\n\n  // Ensure that the tag variant used is one of the options, either `subtle`,\n  // `solid`, or `outline` (or undefined)\n  let realSelectedOptionStyle: SelectedOptionStyle = selectedOptionStyle;\n  const selectedOptionStyleOptions: SelectedOptionStyle[] = [\"color\", \"check\"];\n  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {\n    realSelectedOptionStyle = \"color\";\n  }\n\n  // Ensure that the color used for the selected options is a string\n  let realSelectedOptionColor: string = selectedOptionColor;\n  if (typeof selectedOptionColor !== \"string\") {\n    realSelectedOptionColor = \"blue\";\n  }\n\n  const select = cloneElement(children, {\n    components: {\n      ...chakraComponents,\n      ...components,\n    },\n    styles: {\n      ...chakraStyles,\n      ...styles,\n    },\n    theme: (baseTheme: Theme) => {\n      let propTheme: OptionalTheme = {};\n      if (typeof theme === \"function\") {\n        propTheme = theme(baseTheme);\n      }\n\n      return {\n        ...baseTheme,\n        ...propTheme,\n        colors: {\n          ...baseTheme.colors,\n          neutral50: placeholderColor, // placeholder text color\n          neutral40: placeholderColor, // noOptionsMessage color\n          ...propTheme.colors,\n        },\n        spacing: {\n          ...baseTheme.spacing,\n          ...propTheme.spacing,\n        },\n      };\n    },\n    colorScheme,\n    size: realSize,\n    tagVariant: realTagVariant,\n    selectedOptionStyle: realSelectedOptionStyle,\n    selectedOptionColor: realSelectedOptionColor,\n    multiValueRemoveFocusStyle,\n    // isDisabled and isInvalid can be set on the component\n    // or on a surrounding form control\n    isDisabled: inputProps.disabled,\n    isInvalid: !!inputProps[\"aria-invalid\"],\n    inputId: inputId || inputProps.id,\n    hasStickyGroupHeaders,\n    ...props,\n    // aria-invalid can be passed to react-select, so we allow that to\n    // override the `isInvalid` prop\n    \"aria-invalid\":\n      props[\"aria-invalid\"] ?? inputProps[\"aria-invalid\"] ? true : undefined,\n  });\n\n  return select;\n};\n\nexport default ChakraReactSelect;\n"]},"metadata":{},"sourceType":"module"}