{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\LocationDetailsForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Select } from '@chakra-ui/react';\nimport { useIntl } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport { useDispatch, useSelector } from 'react-redux';\nimport messages from './messages';\nimport { publicAxios as axios } from '../../axios';\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\nimport { isUndefined } from 'lodash';\nimport { getStates, getCities } from './action';\nimport CustomInput from '../../utils/Input';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport { useHistory } from 'react-router';\nimport { Box } from '@chakra-ui/react';\nimport InputScaffold from '../../utils/InputScaffold';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LocationDetailsForm = _ref => {\n  _s();\n\n  let {\n    setActiveStep,\n    distributor,\n    currentBranch,\n    distributorData,\n    getBranchDetails,\n    currentWorkshop,\n    onFormSubmit\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [States, setStates] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [state, setState] = useState();\n  const [city, setCity] = useState('');\n  const [distributorId, setDistributorId] = useState('');\n  const auth = useSelector(state => state.auth);\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [locationDetails, setLocationDetails] = useState({});\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue,\n    watch\n  } = useForm({\n    mode: 'onSubmit'\n  });\n  const history = useHistory();\n\n  const fetchData = async () => {\n    if (distributor) {\n      const data = ({} = await distributorData());\n      setDistributorId(data._id);\n      if (!isEmpty(data.business)) setValue('addressLine1', data.business[0].businessAddress || '');\n\n      if (!isEmpty(data.location)) {\n        setLocationDetails(data.location[0]);\n        dispatch(setDistributorInfo({ ...distributor,\n          location: true\n        }));\n      }\n    } else if (currentBranch) {\n      if (!isEmpty(currentBranch) && !isUndefined(currentBranch._id)) {\n        const {\n          location\n        } = await getBranchDetails(currentBranch._id);\n        setLocationDetails(location[0]);\n      } else if (!isUndefined(currentBranch) && !isEmpty(currentBranch.location)) {\n        setLocationDetails(currentBranch.location[0]);\n      }\n    } else if (currentWorkshop) {\n      setLocationDetails(currentWorkshop);\n    }\n  };\n\n  useEffect(() => {\n    let componentMounted = true;\n    fetchData();\n    componentMounted = false;\n  }, []);\n\n  const getCitiesData = async () => {\n    try {\n      const selectedState = States.filter(stat => stat.name === state);\n      setCities(await getCities(selectedState[0].iso2));\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    getCitiesData();\n  }, [state, States]);\n\n  const getStatesData = async () => {\n    try {\n      setStates(await getStates());\n    } catch (error) {\n      setCities([]);\n      toast(intl.formatMessage(messages.stateError));\n    }\n  };\n\n  useEffect(() => {\n    if (isEmpty(locationDetails)) {\n      getStatesData();\n    } else {\n      setValue('addressLine1', get(locationDetails, 'addressLine1', ''));\n      setValue('addressLine2', get(locationDetails, 'addressLine2', ''));\n      setValue('legalEntityName', get(locationDetails, 'legalEntityName', ''));\n      setValue('city', get(locationDetails, 'city', ''));\n      setCity(get(locationDetails, 'city', ''));\n      setValue('state', get(locationDetails, 'state', ''));\n      setState(get(locationDetails, 'state', ''));\n      setValue('countryCode', get(locationDetails, 'countryCode', ''));\n      setValue('pinCode', get(locationDetails, 'pinCode', ''));\n      setValue('latitude', get(locationDetails, 'latitude', ''));\n      setValue('longitude', get(locationDetails, 'longitude', ''));\n    }\n  }, [locationDetails]);\n\n  const handleFormSubmit = async Data => {\n    setLoading(true);\n\n    try {\n      if (history.location.pathname === '/workshop/add' || !isUndefined(currentWorkshop)) onFormSubmit(Data, 2);else {\n        const api = history.location.pathname === '/distributor' ? `/distributors/${distributorId}/locations` : `/branches/${currentBranch._id}/locations`;\n        Data.countryCode = '+91';\n        Data.country = 'India';\n\n        if (!isEmpty(locationDetails)) {\n          await axios.patch(api, Data, {\n            headers: {\n              Authorization: auth.authToken\n            }\n          });\n        } else {\n          await axios.post(api, { ...Data\n          }, {\n            headers: {\n              Authorization: auth.authToken\n            }\n          });\n\n          if (distributor) {\n            dispatch(setDistributorInfo({ ...distributor,\n              location: true\n            }));\n          }\n        }\n\n        toast(intl.formatMessage(messages.locationDetailsSaveSuccess));\n        setActiveStep(prevStep => prevStep + 1);\n      }\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  const onReset = () => {\n    reset({}, {\n      keepDirty: false,\n      keepErrors: false,\n      keepValues: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.locationDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.addressLine1,\n            inputName: \"addressLine1\",\n            inputType: \"text\",\n            isRequired: true,\n            errors: errors,\n            requiredLabel: messages.addressLine1Required,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.addressLine2,\n            inputName: \"addressLine2\",\n            inputType: \"text\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.addressLine2Required,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          my: {\n            base: 0,\n            lg: 6\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.pinCode,\n            inputName: \"pinCode\",\n            inputType: \"number\",\n            length: {\n              min: 6,\n              max: 6\n            },\n            errMsg: messages.invalidPinCode,\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.pinCodeRequired,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: {\n              base: '100%',\n              lg: '48%'\n            },\n            mt: {\n              base: 6,\n              lg: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.state)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, { ...register('state', {\n                required: true\n              }),\n              value: state,\n              placeholder: \"Select State\",\n              onChange: async e => {\n                setCities([]);\n                setState(e.target.value);\n                setValue('state', e.target.value);\n              },\n              children: States.map(state => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: state.name,\n                  children: state.name\n                }, state.iso2, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), errors && errors.state && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.stateRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          flexWrap: \"wrap\",\n          mb: 6,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            width: {\n              base: '100%',\n              lg: '48%'\n            },\n            mt: {\n              base: 6,\n              lg: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.city)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: city,\n              ...register('city', {\n                required: true\n              }),\n              placeholder: \"Select City\",\n              onChange: e => {\n                setCity(e.target.value);\n              },\n              children: cities.map(city => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: city.name,\n                  children: city.name\n                }, city.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), errors && errors.city && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.cityRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n            width: \"48%\",\n            label: messages.country,\n            inputName: \"country\",\n            value: \"India\",\n            isReadOnly: true,\n            inputType: \"text\",\n            isRequired: false,\n            errors: errors,\n            requiredLabel: messages.addressLine2Required,\n            register: register\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormactionButtons, {\n      isLoading: loading,\n      saveLabel: messages.saveButtonText,\n      onReset: onReset,\n      cancleLabel: messages.cancelButtonLabe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LocationDetailsForm, \"GSEJgoW8K+CWP1UtN1b3WRs7iZ0=\", false, function () {\n  return [useSelector, useIntl, useDispatch, useForm, useHistory];\n});\n\n_c = LocationDetailsForm;\nLocationDetailsForm.propTypes = {\n  locationDetails: PropTypes.object,\n  setLocationId: PropTypes.func,\n  setActiveStep: PropTypes.func,\n  distributor: PropTypes.object,\n  currentBranch: PropTypes.object,\n  distributorData: PropTypes.func,\n  getBranchDetails: PropTypes.func\n};\nexport default LocationDetailsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationDetailsForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/LocationDetailsForm/index.js"],"names":["React","useEffect","useState","PropTypes","useForm","Select","useIntl","toast","get","isEmpty","useDispatch","useSelector","messages","publicAxios","axios","setDistributorInfo","isUndefined","getStates","getCities","CustomInput","FormactionButtons","useHistory","Box","InputScaffold","LocationDetailsForm","setActiveStep","distributor","currentBranch","distributorData","getBranchDetails","currentWorkshop","onFormSubmit","loading","setLoading","States","setStates","cities","setCities","state","setState","city","setCity","distributorId","setDistributorId","auth","intl","dispatch","locationDetails","setLocationDetails","register","formState","errors","handleSubmit","reset","setValue","watch","mode","history","fetchData","data","_id","business","businessAddress","location","componentMounted","getCitiesData","selectedState","filter","stat","name","iso2","error","getStatesData","formatMessage","stateError","handleFormSubmit","Data","pathname","api","countryCode","country","patch","headers","Authorization","authToken","post","locationDetailsSaveSuccess","prevStep","err","somethingWentWrong","onReset","keepDirty","keepErrors","keepValues","addressLine1","addressLine1Required","addressLine2","addressLine2Required","base","lg","pinCode","min","max","invalidPinCode","pinCodeRequired","required","e","target","value","map","stateRequired","cityRequired","saveButtonText","cancelButtonLabe","propTypes","object","setLocationId","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Select } from '@chakra-ui/react';\r\nimport { useIntl } from 'react-intl';\r\nimport toast from 'react-hot-toast';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport messages from './messages';\r\nimport { publicAxios as axios } from '../../axios';\r\nimport { setDistributorInfo } from '../../containers/DistributerInfo/actions';\r\nimport { isUndefined } from 'lodash';\r\nimport { getStates, getCities } from './action';\r\nimport CustomInput from '../../utils/Input';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport { useHistory } from 'react-router';\r\nimport { Box } from '@chakra-ui/react';\r\nimport InputScaffold from '../../utils/InputScaffold';\r\n\r\nconst LocationDetailsForm = ({\r\n  setActiveStep,\r\n  distributor,\r\n  currentBranch,\r\n  distributorData,\r\n  getBranchDetails,\r\n  currentWorkshop,\r\n  onFormSubmit,\r\n}) => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [States, setStates] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [state, setState] = useState();\r\n  const [city, setCity] = useState('');\r\n  const [distributorId, setDistributorId] = useState('');\r\n  const auth = useSelector((state) => state.auth);\r\n  const intl = useIntl();\r\n  const dispatch = useDispatch();\r\n  const [locationDetails, setLocationDetails] = useState({});\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    watch,\r\n  } = useForm({ mode: 'onSubmit' });\r\n  const history = useHistory();\r\n\r\n  const fetchData = async () => {\r\n    if (distributor) {\r\n      const data = ({} = await distributorData());\r\n      setDistributorId(data._id);\r\n      if (!isEmpty(data.business))\r\n        setValue('addressLine1', data.business[0].businessAddress || '');\r\n      if (!isEmpty(data.location)) {\r\n        setLocationDetails(data.location[0]);\r\n        dispatch(setDistributorInfo({ ...distributor, location: true }));\r\n      }\r\n    } else if (currentBranch) {\r\n      if (!isEmpty(currentBranch) && !isUndefined(currentBranch._id)) {\r\n        const { location } = await getBranchDetails(currentBranch._id);\r\n        setLocationDetails(location[0]);\r\n      } else if (\r\n        !isUndefined(currentBranch) &&\r\n        !isEmpty(currentBranch.location)\r\n      ) {\r\n        setLocationDetails(currentBranch.location[0]);\r\n      }\r\n    } else if (currentWorkshop) {\r\n      setLocationDetails(currentWorkshop);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let componentMounted = true;\r\n    fetchData();\r\n    componentMounted = false;\r\n  }, []);\r\n\r\n  const getCitiesData = async () => {\r\n    try {\r\n      const selectedState = States.filter((stat) => stat.name === state);\r\n      setCities(await getCities(selectedState[0].iso2));\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCitiesData();\r\n  }, [state, States]);\r\n\r\n  const getStatesData = async () => {\r\n    try {\r\n      setStates(await getStates());\r\n    } catch (error) {\r\n      setCities([]);\r\n      toast(intl.formatMessage(messages.stateError));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(locationDetails)) {\r\n      getStatesData();\r\n    } else {\r\n      setValue('addressLine1', get(locationDetails, 'addressLine1', ''));\r\n      setValue('addressLine2', get(locationDetails, 'addressLine2', ''));\r\n      setValue('legalEntityName', get(locationDetails, 'legalEntityName', ''));\r\n      setValue('city', get(locationDetails, 'city', ''));\r\n      setCity(get(locationDetails, 'city', ''));\r\n      setValue('state', get(locationDetails, 'state', ''));\r\n      setState(get(locationDetails, 'state', ''));\r\n      setValue('countryCode', get(locationDetails, 'countryCode', ''));\r\n      setValue('pinCode', get(locationDetails, 'pinCode', ''));\r\n      setValue('latitude', get(locationDetails, 'latitude', ''));\r\n      setValue('longitude', get(locationDetails, 'longitude', ''));\r\n    }\r\n  }, [locationDetails]);\r\n\r\n  const handleFormSubmit = async (Data) => {\r\n    setLoading(true);\r\n    try {\r\n      if (\r\n        history.location.pathname === '/workshop/add' ||\r\n        !isUndefined(currentWorkshop)\r\n      )\r\n        onFormSubmit(Data, 2);\r\n      else {\r\n        const api =\r\n          history.location.pathname === '/distributor'\r\n            ? `/distributors/${distributorId}/locations`\r\n            : `/branches/${currentBranch._id}/locations`;\r\n        Data.countryCode = '+91';\r\n        Data.country = 'India';\r\n        if (!isEmpty(locationDetails)) {\r\n          await axios.patch(api, Data, {\r\n            headers: {\r\n              Authorization: auth.authToken,\r\n            },\r\n          });\r\n        } else {\r\n          await axios.post(\r\n            api,\r\n            {\r\n              ...Data,\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: auth.authToken,\r\n              },\r\n            },\r\n          );\r\n          if (distributor) {\r\n            dispatch(setDistributorInfo({ ...distributor, location: true }));\r\n          }\r\n        }\r\n        toast(intl.formatMessage(messages.locationDetailsSaveSuccess));\r\n        setActiveStep((prevStep) => prevStep + 1);\r\n      }\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n  const onReset = () => {\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.locationDetails)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap'>\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.addressLine1}\r\n              inputName='addressLine1'\r\n              inputType='text'\r\n              isRequired={true}\r\n              errors={errors}\r\n              requiredLabel={messages.addressLine1Required}\r\n              register={register}\r\n            />\r\n            <InputScaffold\r\n              width='48%'\r\n              label={messages.addressLine2}\r\n              inputName='addressLine2'\r\n              inputType='text'\r\n              isRequired={false}\r\n              errors={errors}\r\n              requiredLabel={messages.addressLine2Required}\r\n              register={register}\r\n            />\r\n          </Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap' my={{base: 0, lg:6}}>\r\n          <InputScaffold\r\n             width='48%'\r\n            label={messages.pinCode}\r\n            inputName='pinCode'\r\n            inputType='number'\r\n            length={{ min: 6, max: 6 }}\r\n            errMsg={messages.invalidPinCode}\r\n            isRequired={false}\r\n            errors={errors}\r\n            requiredLabel={messages.pinCodeRequired}\r\n            register={register}\r\n          />\r\n          <Box width={{base: '100%', lg:'48%'}} mt={{base: 6, lg: 0}}>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.state)}\r\n              </label>\r\n              <Select\r\n                {...register('state', { required: true })}\r\n                value={state}\r\n                placeholder='Select State'\r\n                onChange={async (e) => {\r\n                  setCities([]);\r\n                  setState(e.target.value);\r\n                  setValue('state', e.target.value);\r\n                }}\r\n              >\r\n                {States.map((state) => {\r\n                  return (\r\n                    <option value={state.name} key={state.iso2}>\r\n                      {state.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n              {errors && errors.state && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.stateRequired)}\r\n                </span>\r\n              )}\r\n          </Box>\r\n          </Box>\r\n          <Box display='flex' justifyContent='space-between' flexWrap='wrap' mb={6}>\r\n          <Box  width={{base: '100%', lg:'48%'}} mt={{base: 6, lg: 0}}>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.city)}\r\n              </label>\r\n              <Select\r\n                value={city}\r\n                {...register('city', { required: true })}\r\n                placeholder='Select City'\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              >\r\n                {cities.map((city) => {\r\n                  return (\r\n                    <option value={city.name} key={city.name}>\r\n                      {city.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n\r\n              {errors && errors.city && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.cityRequired)}\r\n                </span>\r\n              )}\r\n          </Box>\r\n          <InputScaffold\r\n            width='48%'\r\n            label={messages.country}\r\n            inputName='country'\r\n            value='India'\r\n            isReadOnly={true}\r\n            inputType='text'\r\n            isRequired={false}\r\n            errors={errors}\r\n            requiredLabel={messages.addressLine2Required}\r\n            register={register}\r\n          />\r\n          </Box>\r\n        </Box>\r\n      </div>\r\n      <FormactionButtons\r\n        isLoading={loading}\r\n        saveLabel={messages.saveButtonText}\r\n        onReset={onReset}\r\n        cancleLabel={messages.cancelButtonLabe}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nLocationDetailsForm.propTypes = {\r\n  locationDetails: PropTypes.object,\r\n  setLocationId: PropTypes.func,\r\n  setActiveStep: PropTypes.func,\r\n  distributor: PropTypes.object,\r\n  currentBranch: PropTypes.object,\r\n  distributorData: PropTypes.func,\r\n  getBranchDetails: PropTypes.func,\r\n};\r\n\r\nexport default LocationDetailsForm;\r\n"]},"metadata":{},"sourceType":"module"}