{"ast":null,"code":"/* eslint-disable no-return-assign */\n\n/* eslint-disable no-underscore-dangle */\nimport { ResizeObserver as Polyfill } from '@juggle/resize-observer';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\nimport useLatest from '@react-hook/latest';\nimport rafSchd from 'raf-schd';\nconst ResizeObserver = typeof window !== 'undefined' && 'ResizeObserver' in window ? // @ts-ignore\nwindow.ResizeObserver : Polyfill;\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n *\n * @param target A React ref created by `useRef()` or an HTML element\n * @param callback Invoked with a single `ResizeObserverEntry` any time\n *   the `target` resizes\n */\n\nfunction _ref() {}\n\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n  useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target && 'current' in target ? target.current : target;\n    if (!targetEl) return _ref;\n\n    function cb(entry, observer) {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    }\n\n    resizeObserver.subscribe(targetEl, cb);\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver.unsubscribe(targetEl, cb);\n    };\n  }, [target, resizeObserver, storedCallback]);\n  return resizeObserver.observer;\n}\n\nfunction createResizeObserver() {\n  const callbacks = new Map();\n  const observer = new ResizeObserver(rafSchd((entries, obs) => {\n    for (let i = 0; i < entries.length; i++) {\n      const cbs = callbacks.get(entries[i].target);\n      cbs === null || cbs === void 0 ? void 0 : cbs.forEach(cb => cb(entries[i], obs));\n    }\n  }));\n  return {\n    observer,\n\n    subscribe(target, callback) {\n      var _callbacks$get;\n\n      observer.observe(target);\n      const cbs = (_callbacks$get = callbacks.get(target)) !== null && _callbacks$get !== void 0 ? _callbacks$get : [];\n      cbs.push(callback);\n      callbacks.set(target, cbs);\n    },\n\n    unsubscribe(target, callback) {\n      var _callbacks$get2;\n\n      const cbs = (_callbacks$get2 = callbacks.get(target)) !== null && _callbacks$get2 !== void 0 ? _callbacks$get2 : [];\n\n      if (cbs.length === 1) {\n        observer.unobserve(target);\n        callbacks.delete(target);\n        return;\n      }\n\n      const cbIndex = cbs.indexOf(callback);\n      if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n      callbacks.set(target, cbs);\n    }\n\n  };\n}\n\nlet _resizeObserver;\n\nconst getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\n\nexport default useResizeObserver;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/node_modules/@react-hook/resize-observer/dist/module/index.js"],"names":["ResizeObserver","Polyfill","useLayoutEffect","useLatest","rafSchd","window","_ref","useResizeObserver","target","callback","resizeObserver","getResizeObserver","storedCallback","didUnsubscribe","targetEl","current","cb","entry","observer","subscribe","unsubscribe","createResizeObserver","callbacks","Map","entries","obs","i","length","cbs","get","forEach","_callbacks$get","observe","push","set","_callbacks$get2","unobserve","delete","cbIndex","indexOf","splice","_resizeObserver"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\n\n/* eslint-disable no-underscore-dangle */\nimport { ResizeObserver as Polyfill } from '@juggle/resize-observer';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\nimport useLatest from '@react-hook/latest';\nimport rafSchd from 'raf-schd';\nconst ResizeObserver = typeof window !== 'undefined' && 'ResizeObserver' in window ? // @ts-ignore\nwindow.ResizeObserver : Polyfill;\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n *\n * @param target A React ref created by `useRef()` or an HTML element\n * @param callback Invoked with a single `ResizeObserverEntry` any time\n *   the `target` resizes\n */\n\nfunction _ref() {}\n\nfunction useResizeObserver(target, callback) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n  useLayoutEffect(() => {\n    let didUnsubscribe = false;\n    const targetEl = target && 'current' in target ? target.current : target;\n    if (!targetEl) return _ref;\n\n    function cb(entry, observer) {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    }\n\n    resizeObserver.subscribe(targetEl, cb);\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver.unsubscribe(targetEl, cb);\n    };\n  }, [target, resizeObserver, storedCallback]);\n  return resizeObserver.observer;\n}\n\nfunction createResizeObserver() {\n  const callbacks = new Map();\n  const observer = new ResizeObserver(rafSchd((entries, obs) => {\n    for (let i = 0; i < entries.length; i++) {\n      const cbs = callbacks.get(entries[i].target);\n      cbs === null || cbs === void 0 ? void 0 : cbs.forEach(cb => cb(entries[i], obs));\n    }\n  }));\n  return {\n    observer,\n\n    subscribe(target, callback) {\n      var _callbacks$get;\n\n      observer.observe(target);\n      const cbs = (_callbacks$get = callbacks.get(target)) !== null && _callbacks$get !== void 0 ? _callbacks$get : [];\n      cbs.push(callback);\n      callbacks.set(target, cbs);\n    },\n\n    unsubscribe(target, callback) {\n      var _callbacks$get2;\n\n      const cbs = (_callbacks$get2 = callbacks.get(target)) !== null && _callbacks$get2 !== void 0 ? _callbacks$get2 : [];\n\n      if (cbs.length === 1) {\n        observer.unobserve(target);\n        callbacks.delete(target);\n        return;\n      }\n\n      const cbIndex = cbs.indexOf(callback);\n      if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n      callbacks.set(target, cbs);\n    }\n\n  };\n}\n\nlet _resizeObserver;\n\nconst getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\n\nexport default useResizeObserver;"]},"metadata":{},"sourceType":"module"}