{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Services from './services';\nexport const dashboardSlice = createSlice({\n  name: 'dashboardSlice',\n  initialState: {\n    stats: {}\n  },\n  reducers: {\n    addStats: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.stats = { ...state.stats,\n        ...payload\n      };\n    }\n  }\n});\nexport const {\n  addStats\n} = dashboardSlice.actions;\nexport const getInventoryStat = payload => dispatcher => {\n  return Services.getInventoryStat(payload).then(response => {\n    dispatcher(addStats(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response$data;\n\n      return Promise.reject((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errMsg);\n    }\n  });\n};\nexport const getSalesStat = payload => dispatcher => {\n  return Services.getSalesStat(payload).then(response => {\n    dispatcher(addStats(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response$data2;\n\n      return Promise.reject((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.errMsg);\n    }\n  });\n};\nexport const getCollectionStat = payload => dispatcher => {\n  return Services.getCollectionsStat(payload).then(response => {\n    dispatcher(addStats(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response$data3;\n\n      return Promise.reject((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.errMsg);\n    }\n  });\n};\nexport const getOutstandingStat = payload => dispatcher => {\n  return Services.getOutstandingStat(payload).then(response => {\n    dispatcher(addStats(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response$data4;\n\n      return Promise.reject((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.errMsg);\n    }\n  });\n};\nexport const getOrderStat = payload => dispatcher => {\n  return Services.getOrderStat(payload).then(response => {\n    dispatcher(addStats(response.data));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      var _error$response$data5;\n\n      return Promise.reject((_error$response$data5 = error.response.data) === null || _error$response$data5 === void 0 ? void 0 : _error$response$data5.errMsg);\n    }\n  });\n};\nexport const selectDashboardState = state => state.dashboard;\nexport default dashboardSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/Dashboard/slice.js"],"names":["createSlice","Services","dashboardSlice","name","initialState","stats","reducers","addStats","state","payload","actions","getInventoryStat","dispatcher","then","response","data","Promise","resolve","error","reject","errMsg","getSalesStat","getCollectionStat","getCollectionsStat","getOutstandingStat","getOrderStat","selectDashboardState","dashboard","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport Services from './services';\r\n\r\nexport const dashboardSlice = createSlice({\r\n    name: 'dashboardSlice',\r\n    initialState: {\r\n        stats : {}\r\n    },\r\n    reducers: {\r\n       addStats: (state, {payload}) => {\r\n           state.stats = {...state.stats, ...payload}\r\n       }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nexport const { addStats } = dashboardSlice.actions;\r\n\r\n\r\n\r\nexport const getInventoryStat =  payload => dispatcher => {\r\n    return Services.getInventoryStat(payload).then(\r\n        response => {\r\n            dispatcher(addStats(response.data));\r\n            return Promise.resolve(response.data)\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data?.errMsg)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getSalesStat =  payload => dispatcher => {\r\n    return Services.getSalesStat(payload).then(\r\n        response => {\r\n            dispatcher(addStats(response.data));\r\n            return Promise.resolve(response.data)\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data?.errMsg)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getCollectionStat =  payload => dispatcher => {\r\n    return Services.getCollectionsStat(payload).then(\r\n        response => {\r\n            dispatcher(addStats(response.data));\r\n            return Promise.resolve(response.data)\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data?.errMsg)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getOutstandingStat =  payload => dispatcher => {\r\n    return Services.getOutstandingStat(payload).then(\r\n        response => {\r\n            dispatcher(addStats(response.data));\r\n            return Promise.resolve(response.data)\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data?.errMsg)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getOrderStat =  payload => dispatcher => {\r\n    return Services.getOrderStat(payload).then(\r\n        response => {\r\n            dispatcher(addStats(response.data));\r\n            return Promise.resolve(response.data)\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data?.errMsg)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const selectDashboardState = state => state.dashboard;\r\n\r\n\r\n export default dashboardSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}