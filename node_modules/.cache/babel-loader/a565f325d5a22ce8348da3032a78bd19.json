{"ast":null,"code":"import _, { capitalize, upperCase } from 'lodash';\nimport { getBrands, getCategories } from '../../containers/PartAddition/action';\nimport { requiredFields } from './constants';\nexport const sheetValidation = async (sheetData, data, acceptedPartsOnboardingHeaders) => {\n  const [brands, categories] = await Promise.all([await getBrands(), await getCategories()]);\n  const brandsName = brands.map(brand => brand.name);\n  const categoriesName = categories.map(cate => cate.category);\n  const taxSlab = [5, 12, 18, 28];\n  const optionNumbersFields = [\"Selling Price\", \"Pack Quantity\", \"Pack Size\"];\n  const mandatoryNumberFields = [\"MRP\", \"HSN Code\"];\n  const defaultCategory = await categories.filter(cat => cat.category === \"All Parts\");\n  const missingFields = {\n    singleField: [],\n    other: []\n  };\n  const inValidData = [];\n  const validData = [];\n  sheetData.forEach(async row => {\n    const mappedRow = {};\n    let isInvalid = false;\n    acceptedPartsOnboardingHeaders.forEach(header => {\n      if (requiredFields.includes(header) && row[data[header]] === '') {\n        isInvalid = true;\n        missingFields.singleField.push(header);\n      } else if (header === \"Tax Slab\" && !taxSlab.includes(row[data[header]])) {\n        mappedRow.taxSlab = 'invalid';\n        isInvalid = true;\n        missingFields.other.push(`${header} must be 5, 12, 18 or 28`);\n      } else if (mandatoryNumberFields.includes(header) && typeof row[data[header]] !== \"number\") {\n        mappedRow[_.camelCase(header)] = \"invalid\";\n        isInvalid = true;\n        missingFields.other.push(`${header} must be numbers`);\n      } else if (optionNumbersFields.includes(header) && row[data[header]] !== \"\" && typeof row[data[header]] !== \"number\") {\n        mappedRow[_.camelCase(header)] = \"invalid\";\n        isInvalid = true;\n        missingFields.other.push(`${header} must be numbers`);\n      } else if (header === \"Brand\") {\n        if (brandsName.includes(row[data[header]])) {\n          const brnd = brands.filter(brand => brand.name === row[data[header]]);\n          mappedRow.manufacturerId = brnd[0]._id;\n          mappedRow.brand = row[data[header]];\n        } else {\n          mappedRow.manufacturerId = \"invalid\";\n          mappedRow.brand = \"invalid\";\n          isInvalid = true;\n        }\n      }\n      /* else if (header === \"Part Category\" && row[data[header]]) {\r\n      if (categoriesName.includes(row[data[header]])) {\r\n        const cate = categories.filter(cat => cat.category === row[data[header]]);\r\n        mappedRow.categoryId = cate[0]._id;\r\n      } else {\r\n        mappedRow.categoryId = defaultCategory[0]?._id || \"invalid\"\r\n        mappedRow.category = defaultCategory[0]?._id || \"invalid\"\r\n        isInvalid = true\r\n      }\r\n      } */\n      else if (header === 'Origin') {\n        mappedRow[_.camelCase(header)] = upperCase(row[data[header]]);\n      } else {\n        mappedRow[_.camelCase(header)] = row[data[header]];\n      }\n    });\n    /*  return {data:mappedRow, missingFields} */\n\n    if (isInvalid) {\n      inValidData.push({\n        data: mappedRow,\n        missingFields\n      });\n    } else {\n      mappedRow.partType = capitalize(mappedRow.partType);\n      validData.push({\n        data: mappedRow,\n        missingFields\n      });\n    }\n\n    isInvalid = false;\n  });\n  return {\n    inValidData,\n    validData\n  };\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/PartBulk/helper.js"],"names":["_","capitalize","upperCase","getBrands","getCategories","requiredFields","sheetValidation","sheetData","data","acceptedPartsOnboardingHeaders","brands","categories","Promise","all","brandsName","map","brand","name","categoriesName","cate","category","taxSlab","optionNumbersFields","mandatoryNumberFields","defaultCategory","filter","cat","missingFields","singleField","other","inValidData","validData","forEach","row","mappedRow","isInvalid","header","includes","push","camelCase","brnd","manufacturerId","_id","partType"],"mappings":"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","sourcesContent":["import _, { capitalize, upperCase } from 'lodash';\r\nimport { getBrands, getCategories } from '../../containers/PartAddition/action';\r\nimport { requiredFields } from './constants';\r\n\r\n\r\nexport const sheetValidation = async (sheetData, data, acceptedPartsOnboardingHeaders) => {\r\n\r\n  const [brands, categories] = await Promise.all([await getBrands(), await getCategories()])\r\n  const brandsName = brands.map(brand => brand.name)\r\n  const categoriesName = categories.map(cate => cate.category)\r\n\r\n  const taxSlab = [5, 12, 18, 28];\r\n  const optionNumbersFields = [\"Selling Price\", \"Pack Quantity\", \"Pack Size\"]\r\n  const mandatoryNumberFields = [\"MRP\", \"HSN Code\"]\r\n  const defaultCategory = await categories.filter(cat => cat.category === \"All Parts\");\r\n\r\n  const missingFields = {singleField: [], other: []};\r\n    const inValidData = [];\r\n    const validData = [];\r\n\r\n    sheetData.forEach(async (row) => {\r\n    const mappedRow = {};\r\n    let isInvalid =  false;\r\n    acceptedPartsOnboardingHeaders.forEach((header) => {\r\n      if (requiredFields.includes(header) && row[data[header]] === '') {\r\n        isInvalid = true;\r\n        missingFields.singleField.push(header);\r\n      }else if (header === \"Tax Slab\" && !taxSlab.includes(row[data[header]])) {\r\n        mappedRow.taxSlab = 'invalid';\r\n        isInvalid = true;\r\n        missingFields.other.push(`${header} must be 5, 12, 18 or 28`);\r\n      }\r\n      else if (mandatoryNumberFields.includes(header) && typeof (row[data[header]]) !== \"number\") {\r\n        mappedRow[_.camelCase(header)] = \"invalid\";\r\n        isInvalid = true;\r\n        missingFields.other.push(`${header} must be numbers`);\r\n      } else if (optionNumbersFields.includes(header) && row[data[header]] !== \"\" && typeof row[data[header]] !== \"number\") {\r\n        mappedRow[_.camelCase(header)] = \"invalid\";\r\n        isInvalid = true;\r\n        missingFields.other.push(`${header} must be numbers`);\r\n      }\r\n      else if (header === \"Brand\") {\r\n        if (brandsName.includes(row[data[header]])) {\r\n          const brnd = brands.filter(brand => brand.name === row[data[header]]);\r\n          mappedRow.manufacturerId = brnd[0]._id;\r\n          mappedRow.brand = row[data[header]]\r\n        } else {\r\n          mappedRow.manufacturerId = \"invalid\";\r\n          mappedRow.brand = \"invalid\";\r\n         isInvalid = true;\r\n        }\r\n      } /* else if (header === \"Part Category\" && row[data[header]]) {\r\n        if (categoriesName.includes(row[data[header]])) {\r\n          const cate = categories.filter(cat => cat.category === row[data[header]]);\r\n          mappedRow.categoryId = cate[0]._id;\r\n        } else {\r\n          mappedRow.categoryId = defaultCategory[0]?._id || \"invalid\"\r\n          mappedRow.category = defaultCategory[0]?._id || \"invalid\"\r\n          isInvalid = true\r\n        }\r\n      } */ else if(header === 'Origin'){\r\n        mappedRow[_.camelCase(header)] = upperCase(row[data[header]]);\r\n      }else {\r\n        mappedRow[_.camelCase(header)] = row[data[header]];\r\n      }\r\n\r\n     \r\n    });\r\n  \r\n   /*  return {data:mappedRow, missingFields} */\r\n\r\n   if(isInvalid){\r\n    inValidData.push({ data: mappedRow, missingFields })\r\n  }else {\r\n    mappedRow.partType = capitalize(mappedRow.partType)\r\n    validData.push({ data: mappedRow, missingFields })\r\n  }\r\n  isInvalid= false;\r\n\r\n  })\r\n\r\n  return { inValidData, validData };\r\n}"]},"metadata":{},"sourceType":"module"}