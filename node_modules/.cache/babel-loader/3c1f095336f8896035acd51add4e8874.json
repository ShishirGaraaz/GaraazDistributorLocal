{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\ManufacturingDetailsForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { useSelector } from 'react-redux';\nimport messages from './messages';\nimport { isEmpty, get, isUndefined } from 'lodash';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport { Select as SearchSelect } from 'chakra-react-select';\nimport CustomSelect from '../../utils/Select';\nimport { partTypes } from './constants';\nimport { patchPart, getBrands, getPart } from '../../containers/PartAddition/action';\nimport { Box } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ManufacturingDetailsForm = _ref => {\n  _s();\n\n  let {\n    setActiveStep,\n    setCurrentPart,\n    currentPart = {},\n    isEdit\n  } = _ref;\n  const intl = useIntl();\n  const auth = useSelector(state => state.auth);\n  const [brands, setBrands] = useState([]);\n  const [selectedBrand, setSelectedBrand] = useState('');\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onSubmit'\n  });\n\n  const getBrandsData = async () => {\n    try {\n      const data = await getBrands();\n      setBrands(data);\n    } catch (error) {\n      toast(intl.formatMessage(messages.somethingWentWrong));\n    }\n  };\n\n  useEffect(() => {\n    getBrandsData();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(currentPart)) {\n      var _currentPart$brand$va, _currentPart$brand, _currentPart$partmast, _currentPart$brand$la, _currentPart$brand2, _currentPart$partmast2;\n\n      setValue('brand', get(currentPart, 'brand', {}));\n      setSelectedBrand({\n        value: (_currentPart$brand$va = (_currentPart$brand = currentPart.brand) === null || _currentPart$brand === void 0 ? void 0 : _currentPart$brand.value) !== null && _currentPart$brand$va !== void 0 ? _currentPart$brand$va : currentPart === null || currentPart === void 0 ? void 0 : (_currentPart$partmast = currentPart.partmaster.manufacturer[0]) === null || _currentPart$partmast === void 0 ? void 0 : _currentPart$partmast._id,\n        label: (_currentPart$brand$la = (_currentPart$brand2 = currentPart.brand) === null || _currentPart$brand2 === void 0 ? void 0 : _currentPart$brand2.label) !== null && _currentPart$brand$la !== void 0 ? _currentPart$brand$la : currentPart === null || currentPart === void 0 ? void 0 : (_currentPart$partmast2 = currentPart.partmaster.manufacturer[0]) === null || _currentPart$partmast2 === void 0 ? void 0 : _currentPart$partmast2.name\n      });\n\n      if (isEdit) {\n        var _currentPart$partmast3;\n\n        setValue('partType', get(currentPart, 'partType', (_currentPart$partmast3 = currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster.partType) !== null && _currentPart$partmast3 !== void 0 ? _currentPart$partmast3 : ''));\n      } else {\n        setValue('partType', get(currentPart, 'partType', ''));\n      }\n    }\n  }, [currentPart]);\n\n  const handleFormSubmit = async data => {\n    if (isUndefined(currentPart === null || currentPart === void 0 ? void 0 : currentPart.partmaster) || isUndefined(currentPart._id)) {\n      setCurrentPart({ ...currentPart,\n        ...data\n      });\n    } else {\n      setCurrentPart(currentPart);\n    }\n\n    setActiveStep(2);\n  };\n\n  const onReset = () => {\n    setSelectedBrand({});\n    reset({}, {\n      keepDirty: false,\n      keepErrors: false,\n      keepValues: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.manufacturingDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        mb: 6,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"48%\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n            children: intl.formatMessage(messages.brand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SearchSelect, {\n            isDisabled: isEdit,\n            style: {\n              width: 320\n            },\n            ...register('brand', {\n              required: 'true'\n            }),\n            value: selectedBrand,\n            onChange: e => {\n              setValue('brand', e);\n              setSelectedBrand(e);\n            },\n            options: brands.map(brand => {\n              return {\n                value: brand._id,\n                label: `${brand.name}`\n              };\n            }),\n            placeholder: \"Select Brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), errors && errors.brand && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-youtube-regular text-sm\",\n            children: intl.formatMessage(messages.brandRequired)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n          isDisabled: isEdit,\n          width: \"48%\",\n          register: register,\n          errors: errors,\n          inputName: \"partType\",\n          label: messages.partType,\n          placeHolder: messages.selectPartType,\n          options: partTypes,\n          required: false,\n          valueField: \"value\",\n          labelField: \"name\",\n          defaultValue: \"Oil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormactionButtons, {\n        saveLabel: messages.saveButtonLabel,\n        onReset: onReset,\n        cancleLabel: messages.cancelButtonLabe\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ManufacturingDetailsForm, \"KE0Imua3zrybt73XxFAcSTUe5yY=\", false, function () {\n  return [useIntl, useSelector, useForm];\n});\n\n_c = ManufacturingDetailsForm;\nManufacturingDetailsForm.propTypes = {\n  setActiveStep: PropTypes.func,\n  setCurrentPart: PropTypes.func,\n  currentPart: PropTypes.object\n};\nexport default ManufacturingDetailsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManufacturingDetailsForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/ManufacturingDetailsForm/index.js"],"names":["React","useEffect","useState","PropTypes","useForm","useIntl","toast","useSelector","messages","isEmpty","get","isUndefined","FormactionButtons","Select","SearchSelect","CustomSelect","partTypes","patchPart","getBrands","getPart","Box","ManufacturingDetailsForm","setActiveStep","setCurrentPart","currentPart","isEdit","intl","auth","state","brands","setBrands","selectedBrand","setSelectedBrand","register","formState","errors","handleSubmit","reset","setValue","mode","getBrandsData","data","error","formatMessage","somethingWentWrong","value","brand","partmaster","manufacturer","_id","label","name","partType","handleFormSubmit","onReset","keepDirty","keepErrors","keepValues","manufacturingDetails","width","required","e","map","brandRequired","selectPartType","saveButtonLabel","cancelButtonLabe","propTypes","func","object"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useIntl } from 'react-intl';\r\nimport toast from 'react-hot-toast';\r\nimport { useSelector } from 'react-redux';\r\nimport messages from './messages';\r\nimport { isEmpty, get, isUndefined } from 'lodash';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport { Select as SearchSelect } from 'chakra-react-select';\r\nimport CustomSelect from '../../utils/Select';\r\nimport { partTypes } from './constants';\r\nimport {\r\n  patchPart,\r\n  getBrands,\r\n  getPart,\r\n} from '../../containers/PartAddition/action';\r\nimport { Box } from '@chakra-ui/react';\r\n\r\nconst ManufacturingDetailsForm = ({\r\n  setActiveStep,\r\n  setCurrentPart,\r\n  currentPart = {},\r\n  isEdit,\r\n}) => {\r\n  const intl = useIntl();\r\n  const auth = useSelector((state) => state.auth);\r\n  const [brands, setBrands] = useState([]);\r\n  const [selectedBrand, setSelectedBrand] = useState('');\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm({\r\n    mode: 'onSubmit',\r\n  });\r\n  const getBrandsData = async () => {\r\n    try {\r\n      const data = await getBrands();\r\n      setBrands(data);\r\n    } catch (error) {\r\n      toast(intl.formatMessage(messages.somethingWentWrong));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrandsData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(currentPart)) {\r\n      setValue('brand', get(currentPart, 'brand', {}));\r\n      setSelectedBrand({\r\n        value:\r\n          currentPart.brand?.value ??\r\n          currentPart?.partmaster.manufacturer[0]?._id,\r\n        label:\r\n          currentPart.brand?.label ??\r\n          currentPart?.partmaster.manufacturer[0]?.name,\r\n      });\r\n      if (isEdit) {\r\n        setValue(\r\n          'partType',\r\n          get(currentPart, 'partType', currentPart?.partmaster.partType ?? ''),\r\n        );\r\n      } else {\r\n        setValue('partType', get(currentPart, 'partType', ''));\r\n      }\r\n    }\r\n  }, [currentPart]);\r\n\r\n  const handleFormSubmit = async (data) => {\r\n    if (\r\n      isUndefined(currentPart?.partmaster) ||\r\n      isUndefined(currentPart._id)\r\n    ) {\r\n      setCurrentPart({...currentPart, ...data});\r\n    } else {\r\n      setCurrentPart(currentPart);\r\n    \r\n    }\r\n    setActiveStep(2);\r\n  };\r\n  const onReset = () => {\r\n    setSelectedBrand({});\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.manufacturingDetails)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box display='flex' justifyContent='space-between' mb={6}>\r\n          <Box width='48%'>\r\n            <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n              {intl.formatMessage(messages.brand)}\r\n            </label>\r\n            <SearchSelect\r\n              isDisabled={isEdit}\r\n              style={{\r\n                width: 320,\r\n              }}\r\n              {...register('brand', { required: 'true' })}\r\n              value={selectedBrand}\r\n              onChange={(e) => {\r\n                setValue('brand', e);\r\n                setSelectedBrand(e);\r\n              }}\r\n              options={brands.map((brand) => {\r\n                return { value: brand._id, label: `${brand.name}` };\r\n              })}\r\n              placeholder='Select Brand'\r\n            />\r\n            {errors && errors.brand && (\r\n              <span className='text-youtube-regular text-sm'>\r\n                {intl.formatMessage(messages.brandRequired)}\r\n              </span>\r\n            )}\r\n          </Box>\r\n          <CustomSelect\r\n            isDisabled={isEdit}\r\n            width='48%'\r\n            register={register}\r\n            errors={errors}\r\n            inputName='partType'\r\n            label={messages.partType}\r\n            placeHolder={messages.selectPartType}\r\n            options={partTypes}\r\n            required={false}\r\n            valueField='value'\r\n            labelField='name'\r\n            defaultValue='Oil'\r\n          />\r\n        </Box>\r\n        <FormactionButtons\r\n          saveLabel={messages.saveButtonLabel}\r\n          onReset={onReset}\r\n          cancleLabel={messages.cancelButtonLabe}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nManufacturingDetailsForm.propTypes = {\r\n  setActiveStep: PropTypes.func,\r\n  setCurrentPart: PropTypes.func,\r\n  currentPart: PropTypes.object,\r\n};\r\n\r\nexport default ManufacturingDetailsForm;\r\n"]},"metadata":{},"sourceType":"module"}