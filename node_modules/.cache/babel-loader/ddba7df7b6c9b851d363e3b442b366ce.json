{"ast":null,"code":"import _ from 'lodash';\nimport excelDateToJs from '../../utils/excelDateToJs';\nimport moment from 'moment';\nexport const xlTimeToJSTime = xlTime => {\n  if (xlTime) {\n    let basenumber = xlTime * 24;\n    let hour = Math.floor(basenumber).toString();\n\n    if (hour.length < 2) {\n      hour = '0' + hour;\n    }\n\n    var minute = Math.round(basenumber % 1 * 60).toString();\n\n    if (minute.length < 2) {\n      minute = '0' + minute;\n    }\n\n    let Timestring = hour + ':' + minute + ':00';\n    return Timestring;\n  }\n\n  return '';\n};\nexport const sheetValidation = (sheetData, auth, data, acceptedBranchOnboardingHeaders) => {\n  try {\n    const missingFields = [];\n    const inValidData = [];\n    const validData = [];\n    sheetData.forEach(row => {\n      const mappedRow = {};\n      let isInvalid = false;\n      acceptedBranchOnboardingHeaders.forEach(header => {\n        try {\n          if (header === 'Date') {\n            const jsDate = moment(excelDateToJs(row[data[header]])).format('YYYY-MM-DD');\n            mappedRow[_.camelCase(header)] = jsDate;\n          } else {\n            mappedRow[_.camelCase(header)] = row[data[header]];\n          }\n        } catch (error) {\n          mappedRow[_.camelCase(header)] = '';\n          isInvalid = true;\n          mappedRow.isInvalid = true;\n          missingFields.push(header);\n        }\n      });\n\n      if (isInvalid) {\n        inValidData.push({\n          data: mappedRow,\n          missingFields\n        });\n      } else {\n        validData.push({\n          data: mappedRow,\n          missingFields\n        });\n      }\n\n      isInvalid = false;\n    });\n    return {\n      inValidData,\n      validData\n    };\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/AccountBulk/helper.js"],"names":["_","excelDateToJs","moment","xlTimeToJSTime","xlTime","basenumber","hour","Math","floor","toString","length","minute","round","Timestring","sheetValidation","sheetData","auth","data","acceptedBranchOnboardingHeaders","missingFields","inValidData","validData","forEach","row","mappedRow","isInvalid","header","jsDate","format","camelCase","error","push"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;AACxC,MAAIA,MAAJ,EAAY;AACV,QAAIC,UAAU,GAAGD,MAAM,GAAG,EAA1B;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,EAAuBI,QAAvB,EAAX;;AACA,QAAIH,IAAI,CAACI,MAAL,GAAc,CAAlB,EAAqB;AACnBJ,MAAAA,IAAI,GAAG,MAAMA,IAAb;AACD;;AAED,QAAIK,MAAM,GAAGJ,IAAI,CAACK,KAAL,CAAYP,UAAU,GAAG,CAAd,GAAmB,EAA9B,EAAkCI,QAAlC,EAAb;;AACA,QAAIE,MAAM,CAACD,MAAP,GAAgB,CAApB,EAAuB;AACrBC,MAAAA,MAAM,GAAG,MAAMA,MAAf;AACD;;AACD,QAAIE,UAAU,GAAGP,IAAI,GAAG,GAAP,GAAaK,MAAb,GAAsB,KAAvC;AACA,WAAOE,UAAP;AACD;;AAED,SAAO,EAAP;AACD,CAjBM;AAqBP,OAAO,MAAMC,eAAe,GAAG,CAC7BC,SAD6B,EAE7BC,IAF6B,EAG7BC,IAH6B,EAI7BC,+BAJ6B,KAK1B;AAEH,MAAI;AACF,UAAMC,aAAa,GAAG,EAAtB;AACA,UAAMC,WAAW,GAAG,EAApB;AACA,UAAMC,SAAS,GAAG,EAAlB;AACCN,IAAAA,SAAS,CAACO,OAAV,CAAmBC,GAAD,IAAS;AAC1B,YAAMC,SAAS,GAAG,EAAlB;AACA,UAAIC,SAAS,GAAI,KAAjB;AAEAP,MAAAA,+BAA+B,CAACI,OAAhC,CAAyCI,MAAD,IAAY;AAClD,YAAI;AACF,cAAIA,MAAM,KAAK,MAAf,EAAuB;AACrB,kBAAMC,MAAM,GAAGzB,MAAM,CAACD,aAAa,CAACsB,GAAG,CAACN,IAAI,CAACS,MAAD,CAAL,CAAJ,CAAd,CAAN,CAAyCE,MAAzC,CACb,YADa,CAAf;AAGAJ,YAAAA,SAAS,CAACxB,CAAC,CAAC6B,SAAF,CAAYH,MAAZ,CAAD,CAAT,GAAiCC,MAAjC;AACD,WALD,MAKM;AACJH,YAAAA,SAAS,CAACxB,CAAC,CAAC6B,SAAF,CAAYH,MAAZ,CAAD,CAAT,GAAiCH,GAAG,CAACN,IAAI,CAACS,MAAD,CAAL,CAApC;AACD;AAEF,SAVD,CAUE,OAAOI,KAAP,EAAc;AACdN,UAAAA,SAAS,CAACxB,CAAC,CAAC6B,SAAF,CAAYH,MAAZ,CAAD,CAAT,GAAiC,EAAjC;AACAD,UAAAA,SAAS,GAAG,IAAZ;AACAD,UAAAA,SAAS,CAACC,SAAV,GAAsB,IAAtB;AACAN,UAAAA,aAAa,CAACY,IAAd,CAAmBL,MAAnB;AACD;AACF,OAjBD;;AAmBA,UAAGD,SAAH,EAAa;AACXL,QAAAA,WAAW,CAACW,IAAZ,CAAiB;AAAEd,UAAAA,IAAI,EAAEO,SAAR;AAAmBL,UAAAA;AAAnB,SAAjB;AACD,OAFD,MAEM;AACJE,QAAAA,SAAS,CAACU,IAAV,CAAe;AAAEd,UAAAA,IAAI,EAAEO,SAAR;AAAmBL,UAAAA;AAAnB,SAAf;AACD;;AAEDM,MAAAA,SAAS,GAAE,KAAX;AACD,KA9BA;AA+BD,WAAO;AAACL,MAAAA,WAAD;AAAcC,MAAAA;AAAd,KAAP;AAED,GArCD,CAqCE,OAAOS,KAAP,EAAc;AAEd,WAAOA,KAAP;AACD;AACF,CAhDM","sourcesContent":["import _ from 'lodash';\r\nimport excelDateToJs from '../../utils/excelDateToJs';\r\nimport moment from 'moment';\r\n\r\nexport const xlTimeToJSTime = (xlTime) => {\r\n  if (xlTime) {\r\n    let basenumber = xlTime * 24;\r\n    let hour = Math.floor(basenumber).toString();\r\n    if (hour.length < 2) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    var minute = Math.round((basenumber % 1) * 60).toString();\r\n    if (minute.length < 2) {\r\n      minute = '0' + minute;\r\n    }\r\n    let Timestring = hour + ':' + minute + ':00';\r\n    return Timestring;\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\n\r\n\r\nexport const sheetValidation = (\r\n  sheetData,\r\n  auth,\r\n  data,\r\n  acceptedBranchOnboardingHeaders,\r\n) => {\r\n\r\n  try {\r\n    const missingFields = [];\r\n    const inValidData = [];\r\n    const validData = [];\r\n     sheetData.forEach((row) => {\r\n      const mappedRow = {};\r\n      let isInvalid =  false;\r\n\r\n      acceptedBranchOnboardingHeaders.forEach((header) => {\r\n        try {\r\n          if (header === 'Date') {\r\n            const jsDate = moment(excelDateToJs(row[data[header]])).format(\r\n              'YYYY-MM-DD',\r\n            );\r\n            mappedRow[_.camelCase(header)] = jsDate;\r\n          }else {\r\n            mappedRow[_.camelCase(header)] = row[data[header]];\r\n          } \r\n         \r\n        } catch (error) {\r\n          mappedRow[_.camelCase(header)] = '';\r\n          isInvalid = true;\r\n          mappedRow.isInvalid = true;\r\n          missingFields.push(header);\r\n        }\r\n      });\r\n\r\n      if(isInvalid){\r\n        inValidData.push({ data: mappedRow, missingFields })\r\n      }else {\r\n        validData.push({ data: mappedRow, missingFields })\r\n      }\r\n\r\n      isInvalid= false;\r\n    });\r\n    return {inValidData, validData}\r\n\r\n  } catch (error) {\r\n    \r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}