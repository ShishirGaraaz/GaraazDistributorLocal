{"ast":null,"code":"import _, { isUndefined, toUpper } from 'lodash';\nimport { publicAxios as axios } from '../../axios';\nimport { getEmployeeDesignations } from '../EmployeeList/actions';\nexport const sheetValidation = async (sheetData, acceptedEmployeeOnboardingHeaders, data, auth, requiredFields) => {\n  let invalidCount = 0;\n  const branches = await getBranches(auth);\n  const designation = Object.values((await getEmployeeDesignations(auth)).data);\n  return sheetData.map(row => {\n    const mappedRow = {};\n    acceptedEmployeeOnboardingHeaders.forEach(header => {\n      if (header === 'Mobile Number') {\n        if (`${row[data[header]]}`.length === 10 && typeof row[data[header]] === 'number') {\n          mappedRow[_.camelCase(header)] = `91${row[data[header]]}`;\n        } else {\n          invalidCount++;\n          mappedRow.mobileNumber = `_${row[data[header]]}`;\n        }\n      } else if (header === 'Branch Code') {\n        const inputBranchCode = row[data[header]];\n\n        if (branches.map(e => toUpper(e.branchCode).trim()).includes(toUpper(inputBranchCode).trim())) {\n          mappedRow.branchCode = toUpper(inputBranchCode);\n          mappedRow.branchId = branches.find(e => toUpper(e.branchCode).trim() === toUpper(inputBranchCode).trim())._id;\n        }\n\n        if (isUndefined(mappedRow.branchId)) {\n          invalidCount++;\n          mappedRow.branchName = `_${row[data[header]]}`;\n          mappedRow.branchId = 'invalid';\n        }\n      } else if (header === 'Designation' && !designation.map(des => des.toLowerCase()).includes(`${row[data[header]]}`.toLowerCase())) {\n        invalidCount++;\n        mappedRow.designation = `_${row[data[header]]}`;\n      } else {\n        if (requiredFields.includes(header) && (!row[data[header]] || row[data[header]] === '' || row[data[header]] === '__Empty')) {\n          invalidCount++;\n          mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\n        } else if (row[data[header]]) {\n          mappedRow[_.camelCase(header)] = header === 'Designation' ? row[data[header]].toUpperCase() : row[data[header]];\n        }\n      }\n    });\n    mappedRow.isInvalid = invalidCount > 0 ? true : false;\n    return mappedRow;\n  });\n};\nexport const getBranches = async auth => {\n  try {\n    const {\n      data\n    } = await axios.get('/branches', {\n      headers: {\n        Authorization: auth.authToken\n      }\n    });\n    return data;\n  } catch (error) {\n    return [];\n  }\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/EmployeeAddition/helper.js"],"names":["_","isUndefined","toUpper","publicAxios","axios","getEmployeeDesignations","sheetValidation","sheetData","acceptedEmployeeOnboardingHeaders","data","auth","requiredFields","invalidCount","branches","getBranches","designation","Object","values","map","row","mappedRow","forEach","header","length","camelCase","mobileNumber","inputBranchCode","e","branchCode","trim","includes","branchId","find","_id","branchName","des","toLowerCase","toUpperCase","isInvalid","get","headers","Authorization","authToken","error"],"mappings":"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","sourcesContent":["import _, { isUndefined, toUpper } from 'lodash';\r\nimport { publicAxios as axios } from '../../axios';\r\nimport { getEmployeeDesignations } from '../EmployeeList/actions';\r\n\r\nexport const sheetValidation = async (\r\n  sheetData,\r\n  acceptedEmployeeOnboardingHeaders,\r\n  data,\r\n  auth,\r\n  requiredFields,\r\n) => {\r\n  let invalidCount = 0;\r\n  const branches = await getBranches(auth);\r\n  const designation = Object.values((await getEmployeeDesignations(auth)).data);\r\n\r\n\r\n  return sheetData.map((row) => {\r\n    const mappedRow = {};\r\n    acceptedEmployeeOnboardingHeaders.forEach((header) => {\r\n      if (header === 'Mobile Number') {\r\n        if (\r\n          `${row[data[header]]}`.length === 10 &&\r\n          typeof row[data[header]] === 'number'\r\n        ) {\r\n          mappedRow[_.camelCase(header)] = `91${row[data[header]]}`;\r\n        } else {\r\n          invalidCount++;\r\n          mappedRow.mobileNumber = `_${row[data[header]]}`;\r\n        \r\n        }\r\n      } else if (header === 'Branch Code') {\r\n        const inputBranchCode = row[data[header]];\r\n\r\n        if (\r\n          branches\r\n            .map((e) => toUpper(e.branchCode).trim())\r\n            .includes(toUpper(inputBranchCode).trim())\r\n        ) {\r\n          mappedRow.branchCode = toUpper(inputBranchCode);\r\n          mappedRow.branchId = branches.find(\r\n            (e) =>\r\n              toUpper(e.branchCode).trim() ===\r\n              toUpper(inputBranchCode).trim(),\r\n          )._id;\r\n        }\r\n\r\n        if (isUndefined(mappedRow.branchId)) {\r\n          invalidCount++;\r\n          mappedRow.branchName = `_${row[data[header]]}`;\r\n          mappedRow.branchId = 'invalid';\r\n   \r\n        }\r\n      } else if (\r\n        header === 'Designation' &&\r\n        !designation\r\n          .map((des) => des.toLowerCase())\r\n          .includes(`${row[data[header]]}`.toLowerCase())\r\n      ) {\r\n        invalidCount++;\r\n        mappedRow.designation = `_${row[data[header]]}`;\r\n\r\n      } else {\r\n        if (\r\n          requiredFields.includes(header) &&\r\n          (!row[data[header]] || row[data[header]] === '' || row[data[header]] === '__Empty')\r\n        ) {\r\n          invalidCount++;\r\n          mappedRow[_.camelCase(header)] = `_${row[data[header]]}`;\r\n\r\n        } else if (row[data[header]]) {\r\n          mappedRow[_.camelCase(header)] = header === 'Designation' ? row[data[header]].toUpperCase() : row[data[header]];\r\n        }\r\n   \r\n      }\r\n    });\r\n    mappedRow.isInvalid = invalidCount > 0 ? true : false;\r\n    return mappedRow;\r\n  });\r\n};\r\n\r\nexport const getBranches = async (auth) => {\r\n  try {\r\n    const { data } = await axios.get('/branches', {\r\n      headers: {\r\n        Authorization: auth.authToken,\r\n      },\r\n    });\r\n    return data;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}