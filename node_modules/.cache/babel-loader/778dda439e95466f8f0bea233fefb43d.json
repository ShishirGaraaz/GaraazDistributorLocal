{"ast":null,"code":"import { isEmpty, isUndefined } from \"lodash\";\nimport { publicAxios as axios } from \"../../axios\";\nimport { api } from \"./constants\";\nexport const getPart = async (auth, partid) => {\n  const {\n    data\n  } = await axios.get(`${api.GET_PART}/${partid}`, {\n    headers: {\n      Authorization: auth.authToken\n    }\n  });\n  delete data.part.distributorId;\n  return data.part;\n};\nexport const addPart = async (auth, payload) => {\n  var _payload$brand, _payload$media, _payload$origin, _payload$packSize, _payload$packQuantity, _payload$description, _payload$partType;\n\n  if (payload.isMedia) {\n    const {\n      data\n    } = await axios.post(api.ADD_MEDIA, payload.uploadMedia, {\n      headers: {\n        Authorization: auth.authToken\n      }\n    });\n    payload.media = data.map(med => med.path);\n  }\n\n  const newPayload = {\n    manufacturerId: (_payload$brand = payload.brand) === null || _payload$brand === void 0 ? void 0 : _payload$brand.value,\n    category: payload.category,\n    rootPartNumber: payload.rootPartNumber,\n    sellingPrice: payload.sellingPrice,\n    partNumber: payload.partNumber,\n    partName: payload.partName,\n    mrp: payload.mrp,\n    hsnCode: payload.hsnCode,\n    taxSlab: payload.taxSlab,\n    media: (_payload$media = payload.media) !== null && _payload$media !== void 0 ? _payload$media : [],\n    origin: (_payload$origin = payload.origin) !== null && _payload$origin !== void 0 ? _payload$origin : \"OEM\",\n    packSize: (_payload$packSize = payload.packSize) !== null && _payload$packSize !== void 0 ? _payload$packSize : \"\",\n    packQuantity: (_payload$packQuantity = payload.packQuantity) !== null && _payload$packQuantity !== void 0 ? _payload$packQuantity : \"\",\n    description: (_payload$description = payload.description) !== null && _payload$description !== void 0 ? _payload$description : payload.partNumber,\n    notes: payload.notes,\n    partType: (_payload$partType = payload.partType) !== null && _payload$partType !== void 0 ? _payload$partType : null\n  };\n\n  if (payload.saleStatus) {\n    newPayload.saleStatus = payload.saleStatus;\n  }\n\n  if (payload.status) {\n    newPayload.status = payload.status;\n  }\n\n  const {\n    data\n  } = await axios.post(api.ADD_PART, {\n    parts: [newPayload]\n  }, {\n    headers: {\n      Authorization: auth.authToken\n    }\n  });\n\n  for (const key in data) {\n    if (data[key] == null) {\n      delete data[key];\n    }\n  }\n\n  return data;\n};\nexport const patchPart = async (auth, payload) => {\n  if (!payload.sellingPrice) {\n    payload.sellingPrice = payload.mrp;\n  }\n\n  if (payload.isMedia) {\n    const {\n      data\n    } = await axios.post(api.ADD_MEDIA, payload.uploadMedia, {\n      headers: {\n        Authorization: auth.authToken\n      }\n    });\n    payload.media.push(...data.map(imgpath => imgpath.path));\n  }\n\n  const {\n    _id,\n    ...data\n  } = payload;\n  await axios.patch(`${api.PATCH_PART}/${payload._id}`, data, {\n    headers: {\n      Authorization: auth.authToken\n    }\n  });\n};\nexport const getBrands = async () => {\n  const {\n    data\n  } = await axios.get(api.GET_BRANDS, {});\n  return data;\n};\nexport const getCategories = async () => {\n  const {\n    data\n  } = await axios.get(api.GET_CATEGORIES);\n  return data;\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/PartAddition/action.js"],"names":["isEmpty","isUndefined","publicAxios","axios","api","getPart","auth","partid","data","get","GET_PART","headers","Authorization","authToken","part","distributorId","addPart","payload","isMedia","post","ADD_MEDIA","uploadMedia","media","map","med","path","newPayload","manufacturerId","brand","value","category","rootPartNumber","sellingPrice","partNumber","partName","mrp","hsnCode","taxSlab","origin","packSize","packQuantity","description","notes","partType","saleStatus","status","ADD_PART","parts","key","patchPart","push","imgpath","_id","patch","PATCH_PART","getBrands","GET_BRANDS","getCategories","GET_CATEGORIES"],"mappings":"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","sourcesContent":["import { isEmpty, isUndefined } from \"lodash\";\r\nimport { publicAxios as axios } from \"../../axios\";\r\nimport { api } from \"./constants\";\r\n\r\nexport const getPart = async (auth, partid) => {\r\n  const { data } = await axios.get(`${api.GET_PART}/${partid}`, {\r\n    headers: {\r\n      Authorization: auth.authToken,\r\n    },\r\n  });\r\n  delete (data.part.distributorId)\r\n  return data.part\r\n}\r\n\r\nexport const addPart = async (auth, payload) => {\r\n  if (payload.isMedia) {\r\n    const { data } = await axios.post(api.ADD_MEDIA, payload.uploadMedia, {\r\n      headers: {\r\n        Authorization: auth.authToken,\r\n      },\r\n    });\r\n    payload.media = data.map(med => med.path)\r\n  }\r\n\r\n  const newPayload = {\r\n    manufacturerId: payload.brand?.value,\r\n    category: payload.category,\r\n    rootPartNumber: payload.rootPartNumber,\r\n    sellingPrice: payload.sellingPrice,\r\n    partNumber: payload.partNumber,\r\n    partName: payload.partName,\r\n    mrp: payload.mrp,\r\n    hsnCode: payload.hsnCode,\r\n    taxSlab: payload.taxSlab,\r\n    media: payload.media ?? [],\r\n    origin: payload.origin ?? \"OEM\",\r\n    packSize: payload.packSize ?? \"\",\r\n    packQuantity: payload.packQuantity ?? \"\",\r\n    description: payload.description ?? payload.partNumber,\r\n    notes: payload.notes,\r\n    partType: payload.partType ?? null,\r\n  };\r\n\r\n\r\n    if(payload.saleStatus){\r\n      newPayload.saleStatus = payload.saleStatus;\r\n    }\r\n\r\n    if(payload.status){\r\n      newPayload.status = payload.status;\r\n    }\r\n\r\n  \r\n   const { data } = await axios.post(api.ADD_PART,{parts:[newPayload]}, {\r\n    headers: {\r\n      Authorization: auth.authToken,\r\n\r\n    },\r\n  })\r\n  for (const key in data) {\r\n    if (data[key] == null) {\r\n      delete data[key]\r\n    }\r\n  }\r\n  return data \r\n}\r\nexport const patchPart = async (auth, payload) => {\r\n  if (!payload.sellingPrice) {\r\n    payload.sellingPrice = payload.mrp\r\n  }\r\n\r\n\r\n  if (payload.isMedia) {\r\n    const { data } = await axios.post(api.ADD_MEDIA, payload.uploadMedia, {\r\n      headers: {\r\n        Authorization: auth.authToken,\r\n      },\r\n    });\r\n    payload.media.push(...data.map(imgpath => imgpath.path))\r\n  }\r\n  const {_id, ...data} = payload;\r\n  await axios.patch(`${api.PATCH_PART}/${payload._id}`, data, {\r\n    headers: {\r\n      Authorization: auth.authToken,\r\n    },\r\n  })\r\n}\r\n\r\nexport const getBrands = async () => {\r\n  const { data } = await axios.get(api.GET_BRANDS, {});\r\n  return data;\r\n}\r\nexport const getCategories = async () => {\r\n  const { data } = await axios.get(api.GET_CATEGORIES)\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}