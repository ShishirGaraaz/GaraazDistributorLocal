{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\CollectionsAccount\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport DynamicTable from '../../components/DynamicTable';\nimport { useIntl } from 'react-intl';\nimport { Box, Link } from '@chakra-ui/react';\nimport ModifiedTableTop from '../../components/TableTop/ModifiedTableTop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport { useRouteMatch, Switch, Route, Link as ReactLink } from 'react-router-dom';\nimport { selectCollectionsAcct, fetchAllCollections } from './slice';\nimport messages from './messages';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport WorkshopCollections from './workshopCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputData = [{\n  title: 'Account detail search',\n  type: 'text',\n  placeholder: '',\n  name: 'searchAccount'\n}, {\n  title: 'Group by',\n  type: 'select',\n  placeholder: 'Select option',\n  name: 'groupBy',\n  options: [{\n    value: 'none',\n    label: 'None'\n  }, {\n    value: 'branch',\n    label: 'Branch'\n  }, {\n    value: 'salesRep',\n    label: 'Sales Rep'\n  }, {\n    value: 'workshopType',\n    label: 'Workshop Type'\n  }]\n}, {\n  title: 'Date',\n  type: 'date',\n  placeholder: 'Enter order No',\n  name: 'searchAccount'\n}];\n\nconst Collections = props => {\n  _s();\n\n  const [inputValues, setInputValue] = useState({\n    start: moment().startOf('month').format('YYYY-MM-DD'),\n    end: moment().add(1, 'days').format('YYYY-MM-DD')\n  });\n  const intl = useIntl();\n  const [isLoading, setIsLoading] = useState(false);\n  const auth = useSelector(state => state.auth);\n  const {\n    collectionsAcctList\n  } = useSelector(selectCollectionsAcct);\n  const dispatcher = useDispatch();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const [tableLoading, setTableLoading] = useState(false);\n  useEffect(() => {\n    (async () => {\n      setTableLoading(true);\n      await dispatcher(fetchAllCollections({\n        auth,\n        params: {}\n      }));\n      setTableLoading(false);\n    })();\n  }, []);\n  const inputData = useMemo(() => [{\n    title: intl.formatMessage(messages.accountDetailSearch),\n    type: 'text',\n    placeholder: '',\n    name: 'searchAccount'\n  }, {\n    title: intl.formatMessage(messages.groupBy),\n    type: 'select',\n    placeholder: 'Select option',\n    name: 'groupBy',\n    options: [{\n      value: 'none',\n      label: 'None'\n    }, {\n      value: 'branch',\n      label: intl.formatMessage(messages.branch)\n    }, {\n      value: 'salesRep',\n      label: intl.formatMessage(messages.salesRep)\n    }, {\n      value: 'workshopType',\n      label: intl.formatMessage(messages.workshopType)\n    }]\n  }, {\n    title: intl.formatMessage(messages.date),\n    type: 'date',\n    placeholder: 'Enter order No',\n    name: ['start', 'end'],\n    defaultValue: [moment().startOf('month').format('YYYY-MM-DD'), moment().format('YYYY-MM-DD')]\n  }], []);\n  const columns = useMemo(() => [{\n    Header: 'S. No',\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Workshop Name',\n    accessor: 'workshopName',\n    Cell: allData => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        as: ReactLink,\n        to: `${url}/${allData.row.original.workshopId}/collections`,\n        children: allData.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Workshop Code',\n    accessor: 'code'\n  }, {\n    Header: 'Workshop Type',\n    accessor: 'workshopType'\n  }, {\n    Header: 'Branch',\n    accessor: 'branch'\n  }, {\n    Header: 'Sales Representative',\n    accessor: 'salesRep'\n  }, {\n    Header: 'Total Collection',\n    accessor: 'collections',\n    Cell: _ref => {\n      let {\n        value\n      } = _ref;\n      return getMoneyFormat(value);\n    }\n  }], []);\n  const groupedByBranchColumn = useMemo(() => [{\n    Header: 'S. No',\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row2;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row2 = allData.row) === null || _allData$row2 === void 0 ? void 0 : _allData$row2.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Branch Name',\n    accessor: 'branchName'\n  }, {\n    Header: 'Total Customers',\n    accessor: 'customers',\n    Cell: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: value === null || value === void 0 ? void 0 : value.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Total Collection',\n    accessor: 'collections',\n    Cell: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return getMoneyFormat(value);\n    }\n  }], []);\n  const groupedBySalesColumn = useMemo(() => [{\n    Header: 'S. No',\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row3;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row3 = allData.row) === null || _allData$row3 === void 0 ? void 0 : _allData$row3.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Sales Representative',\n    accessor: 'salesRep'\n  }, {\n    Header: 'Total Customers',\n    accessor: 'customers',\n    Cell: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: value === null || value === void 0 ? void 0 : value.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Total Collection',\n    accessor: 'collections',\n    Cell: _ref5 => {\n      let {\n        value\n      } = _ref5;\n      return getMoneyFormat(value);\n    }\n  }], []);\n  const groupedByCustomerColumn = useMemo(() => [{\n    Header: 'S. No',\n    accessor: 'sno',\n    Cell: allData => {\n      var _allData$row4;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row4 = allData.row) === null || _allData$row4 === void 0 ? void 0 : _allData$row4.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Workshop Type',\n    accessor: 'workshopType'\n  }, {\n    Header: 'Total Customers',\n    accessor: 'customers',\n    Cell: _ref6 => {\n      let {\n        value\n      } = _ref6;\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: value === null || value === void 0 ? void 0 : value.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 22\n      }, this);\n    }\n  }, {\n    Header: 'Total Collection',\n    accessor: 'collections',\n    Cell: _ref7 => {\n      let {\n        value\n      } = _ref7;\n      return getMoneyFormat(value);\n    }\n  }], []);\n\n  const handleTableTopChange = async (e, name) => {\n    setTableLoading(true);\n    let value = e.hasOwnProperty('target') ? e.target.value : e;\n\n    if (name === 'start') {\n      value = moment(value).format('YYYY-MM-DD');\n    } else if (name === 'end') {\n      value = moment(value).add(1, 'days').format('YYYY-MM-DD');\n    }\n\n    setInputValue(prevState => ({ ...prevState,\n      [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n    }));\n\n    try {\n      await dispatcher(fetchAllCollections({\n        auth,\n        params: { ...inputValues,\n          [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n        }\n      }));\n      setTableLoading(false);\n    } catch (error) {\n      setTableLoading(false);\n    }\n  };\n\n  const activeColumn = useMemo(() => {\n    return (inputValues === null || inputValues === void 0 ? void 0 : inputValues.groupBy) === 'branch' ? groupedByBranchColumn : (inputValues === null || inputValues === void 0 ? void 0 : inputValues.groupBy) === 'salesRep' ? groupedBySalesColumn : (inputValues === null || inputValues === void 0 ? void 0 : inputValues.groupBy) === 'workshopType' ? groupedByCustomerColumn : columns;\n  }, [inputValues === null || inputValues === void 0 ? void 0 : inputValues.groupBy]);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        minHeight: \"80vh\",\n        children: [/*#__PURE__*/_jsxDEV(ModifiedTableTop, {\n          inputData: inputData,\n          onChange: handleTableTopChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n          columns: activeColumn,\n          data: collectionsAcctList,\n          fetchData: () => console.log('...fetching'),\n          skipPageReset: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${path}/:id/collections`,\n      children: /*#__PURE__*/_jsxDEV(WorkshopCollections, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Collections, \"Fq8T4MhZ/oCAXtx+9r94C/QLB6Y=\", false, function () {\n  return [useIntl, useSelector, useSelector, useDispatch, useRouteMatch];\n});\n\n_c = Collections;\nexport default Collections;\n\nvar _c;\n\n$RefreshReg$(_c, \"Collections\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/CollectionsAccount/index.js"],"names":["React","useMemo","useState","useEffect","DynamicTable","useIntl","Box","Link","ModifiedTableTop","useSelector","useDispatch","moment","useRouteMatch","Switch","Route","ReactLink","selectCollectionsAcct","fetchAllCollections","messages","getMoneyFormat","WorkshopCollections","inputData","title","type","placeholder","name","options","value","label","Collections","props","inputValues","setInputValue","start","startOf","format","end","add","intl","isLoading","setIsLoading","auth","state","collectionsAcctList","dispatcher","url","path","tableLoading","setTableLoading","params","formatMessage","accountDetailSearch","groupBy","branch","salesRep","workshopType","date","defaultValue","columns","Header","accessor","Cell","allData","row","index","original","workshopId","groupedByBranchColumn","length","groupedBySalesColumn","groupedByCustomerColumn","handleTableTopChange","e","hasOwnProperty","target","prevState","error","activeColumn","console","log"],"mappings":"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","sourcesContent":["import React, { useMemo , useState, useEffect} from 'react';\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport { useIntl } from 'react-intl';\r\nimport { Box, Link} from '@chakra-ui/react';\r\nimport ModifiedTableTop from '../../components/TableTop/ModifiedTableTop';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { useRouteMatch, Switch, Route, Link as ReactLink} from 'react-router-dom';\r\nimport { selectCollectionsAcct, fetchAllCollections } from './slice';\r\nimport messages from './messages'\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\nimport WorkshopCollections from './workshopCollection';\r\n\r\nconst inputData = [ \r\n    {\r\n    title: 'Account detail search',\r\n    type: 'text',\r\n    placeholder: '',\r\n    name: 'searchAccount'\r\n  },\r\n  {\r\n    title: 'Group by',\r\n    type: 'select',\r\n    placeholder: 'Select option',\r\n    name:'groupBy',\r\n    options:  [\r\n      {\r\n        value: 'none',\r\n        label: 'None',\r\n      },\r\n      {\r\n        value: 'branch',\r\n        label: 'Branch',\r\n      },\r\n      {\r\n        value: 'salesRep',\r\n        label: 'Sales Rep'\r\n      },\r\n      {\r\n        value: 'workshopType',\r\n        label: 'Workshop Type'\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'Date',\r\n    type: 'date',\r\n    placeholder: 'Enter order No',\r\n    name: 'searchAccount'\r\n  },\r\n  ];\r\n\r\n\r\nconst Collections = (props) => {\r\n  const [inputValues, setInputValue] = useState({\r\n    start: moment().startOf('month').format('YYYY-MM-DD'),\r\n    end: moment().add(1, 'days').format('YYYY-MM-DD'),\r\n  });\r\n  const intl = useIntl();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const auth = useSelector((state) => state.auth);\r\n  const { collectionsAcctList } = useSelector(selectCollectionsAcct);\r\n  const dispatcher = useDispatch();\r\n  const { url, path } = useRouteMatch();\r\n  const [tableLoading, setTableLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setTableLoading(true);\r\n      await dispatcher(\r\n        fetchAllCollections({ auth, params: { } }),\r\n      );\r\n      setTableLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n\r\n\r\n  const inputData = useMemo(() =>  [\r\n    {\r\n      title: intl.formatMessage(messages.accountDetailSearch),\r\n      type: 'text',\r\n      placeholder: '',\r\n      name: 'searchAccount',\r\n    },\r\n    {\r\n      title: intl.formatMessage(messages.groupBy),\r\n      type: 'select',\r\n      placeholder: 'Select option',\r\n      name: 'groupBy',\r\n      options: [\r\n        {\r\n          value: 'none',\r\n          label: 'None',\r\n        },\r\n        {\r\n          value: 'branch',\r\n          label: intl.formatMessage(messages.branch),\r\n        },\r\n        {\r\n          value: 'salesRep',\r\n          label: intl.formatMessage(messages.salesRep),\r\n        },\r\n        {\r\n          value: 'workshopType',\r\n          label: intl.formatMessage(messages.workshopType),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: intl.formatMessage(messages.date),\r\n      type: 'date',\r\n      placeholder: 'Enter order No',\r\n      name: ['start', 'end'],\r\n      defaultValue: [moment().startOf('month').format('YYYY-MM-DD'), moment().format('YYYY-MM-DD')]\r\n    },\r\n  ], [])\r\n\r\n\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n          {\r\n            Header: 'S. No',\r\n            accessor: 'sno',\r\n            Cell: (allData) => {\r\n              return <Box>{allData?.row?.index + 1}</Box>;\r\n            },\r\n          },\r\n          {\r\n            Header: 'Workshop Name',\r\n            accessor: 'workshopName',\r\n            Cell: (allData) => {\r\n              return <Link as={ReactLink} to={`${url}/${allData.row.original.workshopId}/collections`}>{allData.value}</Link>\r\n             }  \r\n          },\r\n          {\r\n            Header: 'Workshop Code',\r\n            accessor: 'code',\r\n          },\r\n          {\r\n            Header: 'Workshop Type',\r\n            accessor: 'workshopType',\r\n          },\r\n          {\r\n            Header: 'Branch',\r\n            accessor: 'branch',\r\n          },\r\n          {\r\n            Header: 'Sales Representative',\r\n            accessor: 'salesRep',\r\n          },\r\n          {\r\n            Header: 'Total Collection',\r\n            accessor: 'collections',\r\n            Cell: ({value}) => getMoneyFormat(value)\r\n          },\r\n\r\n        ],\r\n        [],\r\n      );\r\n\r\n      const groupedByBranchColumn = useMemo(\r\n        () => [\r\n          {\r\n            Header: 'S. No',\r\n            accessor: 'sno',\r\n            Cell: (allData) => {\r\n              return <Box>{allData?.row?.index + 1}</Box>;\r\n            },\r\n\r\n          },\r\n          {\r\n            Header: 'Branch Name',\r\n            accessor: 'branchName',\r\n          },\r\n          {\r\n            Header: 'Total Customers',\r\n            accessor: 'customers',\r\n            Cell: ({ value }) => {\r\n              return <Box>{value?.length}</Box>;\r\n            },\r\n          },\r\n          {\r\n            Header: 'Total Collection',\r\n            accessor: 'collections',\r\n            Cell: ({value}) => getMoneyFormat(value)\r\n          },\r\n        \r\n        ],\r\n        [],\r\n      );\r\n\r\n\r\n      const groupedBySalesColumn = useMemo(\r\n        () => [\r\n          {\r\n            Header: 'S. No',\r\n            accessor: 'sno',\r\n            Cell: (allData) => {\r\n              return <Box>{allData?.row?.index + 1}</Box>;\r\n            },\r\n          },\r\n          {\r\n            Header: 'Sales Representative',\r\n            accessor: 'salesRep',\r\n          },\r\n          {\r\n            Header: 'Total Customers',\r\n            accessor: 'customers',\r\n            Cell: ({ value }) => {\r\n              return <Box>{value?.length}</Box>;\r\n            },\r\n          },\r\n\r\n          {\r\n            Header: 'Total Collection',\r\n            accessor: 'collections',\r\n            Cell: ({value}) => getMoneyFormat(value)\r\n          },\r\n\r\n        ],\r\n        [],\r\n      );\r\n      const groupedByCustomerColumn = useMemo(\r\n        () => [\r\n          {\r\n            Header: 'S. No',\r\n            accessor: 'sno',\r\n            Cell: (allData) => {\r\n              return <Box>{allData?.row?.index + 1}</Box>;\r\n            },\r\n          },\r\n          {\r\n            Header: 'Workshop Type',\r\n            accessor: 'workshopType',\r\n          },\r\n          {\r\n            Header: 'Total Customers',\r\n            accessor: 'customers',\r\n            Cell: ({ value }) => {\r\n              return <Box>{value?.length}</Box>;\r\n            },\r\n          },\r\n          {\r\n            Header: 'Total Collection',\r\n            accessor: 'collections',\r\n            Cell: ({value}) => getMoneyFormat(value)\r\n          },\r\n        ],\r\n        [],\r\n      );\r\n\r\n\r\n\r\n      const handleTableTopChange = async (e, name) => {\r\n        setTableLoading(true);\r\n        let value = e.hasOwnProperty('target') ? e.target.value : e;\r\n        if (name === 'start') {\r\n          value = moment(value).format('YYYY-MM-DD');\r\n        } else if (name === 'end'){\r\n          value = moment(value).add(1, 'days').format('YYYY-MM-DD');\r\n        }\r\n    \r\n        setInputValue((prevState) => ({\r\n          ...prevState,\r\n          [name]:\r\n            typeof value !== 'object'\r\n              ? value\r\n              : value.value === 'none'\r\n              ? ''\r\n              : value.value,\r\n        }));\r\n    \r\n        try {\r\n          await dispatcher(\r\n            fetchAllCollections({\r\n              auth,\r\n              params: {\r\n                ...inputValues,\r\n                [name]:\r\n                  typeof value !== 'object'\r\n                    ? value\r\n                    : value.value === 'none'\r\n                    ? ''\r\n                    : value.value,\r\n              },\r\n            }),\r\n          );\r\n    \r\n          setTableLoading(false);\r\n        } catch (error) {\r\n          setTableLoading(false);\r\n        }\r\n      };\r\n\r\n      const activeColumn = useMemo(() => {\r\n        return inputValues?.groupBy === 'branch'\r\n          ? groupedByBranchColumn\r\n          : inputValues?.groupBy === 'salesRep'\r\n          ? groupedBySalesColumn\r\n          : inputValues?.groupBy === 'workshopType'\r\n          ? groupedByCustomerColumn\r\n          : columns;\r\n      }, [inputValues?.groupBy]);\r\n\r\n    return (\r\n      <Switch>\r\n        <Route exact path={path}>\r\n        <Box minHeight='80vh'>\r\n            <ModifiedTableTop inputData={inputData} onChange={handleTableTopChange}/>\r\n            <DynamicTable\r\n              columns={activeColumn}\r\n              data={collectionsAcctList}\r\n              fetchData={() => console.log('...fetching')}\r\n              skipPageReset={true}\r\n            />\r\n        </Box>\r\n        </Route>\r\n        <Route exact path={`${path}/:id/collections`}>\r\n          <WorkshopCollections/>\r\n        </Route >\r\n            \r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Collections;"]},"metadata":{},"sourceType":"module"}