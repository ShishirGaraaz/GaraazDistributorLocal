{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\components\\\\PaymentDetailForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\nimport CustomInput from '../../utils/Input';\nimport toast from 'react-hot-toast';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport messages from './messages';\nimport FormactionButtons from '../../utils/FormactionButtons';\nimport CustomSelect from '../../utils/Select';\nimport { paymentTerms } from './constants';\nimport { Box, Select } from '@chakra-ui/react';\nimport InputScaffold from '../../utils/InputScaffold';\nimport { selectGlobalState } from '../../globalSlice';\nimport { useSelector } from 'react-redux';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentTermsForm = _ref => {\n  _s();\n\n  let {\n    currentWorkshop,\n    onFormSubmit\n  } = _ref;\n  const [paymentDetails, setPaymentDetails] = useState({});\n  const [loading, setLoading] = useState(false);\n  const {\n    branches\n  } = useSelector(selectGlobalState);\n  const [branchesSelectValue, setBranchesSelectValue] = useState([]);\n  const [selectedBranch, setSelectedBranch] = useState({});\n  const intl = useIntl();\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onSubmit'\n  });\n\n  const getBranchData = async () => {\n    setPaymentDetails(currentWorkshop);\n  };\n\n  useEffect(() => {\n    let mounted = true;\n    getBranchData();\n    mounted = false;\n  }, []);\n  useEffect(() => {\n    const refinedBranch = [...branches].map(e => {\n      return {\n        value: e._id,\n        label: `${e.branchCode} - ${e.branchName}`\n      };\n    });\n    setBranchesSelectValue(refinedBranch);\n  }, [branches]);\n  useEffect(() => {\n    if (!isEmpty(paymentDetails)) {\n      setValue('paymentTerms', get(paymentDetails, 'paymentTerms', ''));\n      setValue('discount', get(paymentDetails, 'discount', ''));\n      setValue('creditDays', get(paymentDetails, 'creditDays', ''));\n      setValue('saleExecutiveCode', get(paymentDetails, 'saleExecutiveCode', ''));\n\n      if (paymentDetails !== null && paymentDetails !== void 0 && paymentDetails.branchId) {\n        setValue('branchId', paymentDetails === null || paymentDetails === void 0 ? void 0 : paymentDetails.branchId);\n      }\n    }\n  }, [paymentDetails, branchesSelectValue]);\n\n  const handleFormSubmit = async Data => {\n    try {\n      onFormSubmit(Data, 4);\n    } catch (err) {\n      if (err.response) {\n        toast(err.response.data.errorMsg);\n      } else {\n        toast(intl.formatMessage(messages.somethingWentWrong));\n      }\n    }\n  };\n\n  const onReset = () => reset({}, {\n    keepDirty: false,\n    keepErrors: false,\n    keepValues: false\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleFormSubmit),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"mt-6 mb-2 font-bold\",\n        children: intl.formatMessage(messages.paymentDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"mb-6 border-b-1 border-blueGray-200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(CustomSelect, {\n          register: register,\n          errors: errors,\n          inputName: \"paymentTerms\",\n          label: messages.paymentTerms,\n          placeHolder: messages.paymentTerms,\n          options: paymentTerms,\n          width: \"48%\",\n          required: false,\n          valueField: \"value\",\n          labelField: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"48%\",\n          label: messages.discount,\n          inputName: \"discount\",\n          inputType: \"number\",\n          isRequired: false,\n          errors: errors,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        my: {\n          base: 0,\n          lg: 6\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"48%\",\n          label: messages.creditDays,\n          inputName: \"creditDays\",\n          inputType: \"number\",\n          isRequired: false,\n          errors: errors,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: {\n            base: '100%',\n            lg: '48%'\n          },\n          mt: {\n            base: 6,\n            lg: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-full mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1\",\n              children: intl.formatMessage(messages.branchId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              placeholder: \"Select entity type\",\n              ...register('branchId', {\n                required: true\n              }),\n              children: branchesSelectValue.map(entity => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: entity.value,\n                  children: entity.label\n                }, entity.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), errors && errors.branchCode && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-youtube-regular text-sm\",\n              children: intl.formatMessage(messages.branchIdRequired)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: 6,\n        children: /*#__PURE__*/_jsxDEV(InputScaffold, {\n          width: \"48%\",\n          label: messages.saleExecutiveCode,\n          inputName: \"saleExecutiveCode\",\n          inputType: \"text\",\n          isRequired: false,\n          errors: errors,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormactionButtons, {\n        isLoading: loading,\n        saveLabel: messages.saveButtonLabel,\n        onReset: onReset,\n        cancleLabel: messages.cancelButtonLabe\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentTermsForm, \"3NiWihJCgw3aRWWpGkFK4qPESAU=\", false, function () {\n  return [useSelector, useIntl, useForm];\n});\n\n_c = PaymentTermsForm;\nPaymentTermsForm.propTypes = {\n  currentWorkshop: PropTypes.object,\n  onFormSubmit: PropTypes.func\n};\nexport default PaymentTermsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentTermsForm\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/PaymentDetailForm/index.js"],"names":["React","useEffect","useState","PropTypes","useForm","useIntl","CustomInput","toast","get","isEmpty","messages","FormactionButtons","CustomSelect","paymentTerms","Box","Select","InputScaffold","selectGlobalState","useSelector","_","PaymentTermsForm","currentWorkshop","onFormSubmit","paymentDetails","setPaymentDetails","loading","setLoading","branches","branchesSelectValue","setBranchesSelectValue","selectedBranch","setSelectedBranch","intl","register","formState","errors","handleSubmit","reset","setValue","mode","getBranchData","mounted","refinedBranch","map","e","value","_id","label","branchCode","branchName","branchId","handleFormSubmit","Data","err","response","data","errorMsg","formatMessage","somethingWentWrong","onReset","keepDirty","keepErrors","keepValues","discount","base","lg","creditDays","required","entity","branchIdRequired","saleExecutiveCode","saveButtonLabel","cancelButtonLabe","propTypes","object","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useIntl } from 'react-intl';\r\nimport CustomInput from '../../utils/Input';\r\nimport toast from 'react-hot-toast';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport messages from './messages';\r\nimport FormactionButtons from '../../utils/FormactionButtons';\r\nimport CustomSelect from '../../utils/Select';\r\nimport { paymentTerms } from './constants';\r\nimport { Box, Select } from '@chakra-ui/react';\r\nimport InputScaffold from '../../utils/InputScaffold';\r\nimport { selectGlobalState } from '../../globalSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nconst PaymentTermsForm = ({ currentWorkshop, onFormSubmit }) => {\r\n  const [paymentDetails, setPaymentDetails] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const { branches } = useSelector(selectGlobalState);\r\n  const [branchesSelectValue, setBranchesSelectValue] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState({})\r\n  const intl = useIntl();\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n  } = useForm({ mode: 'onSubmit' });\r\n  const getBranchData = async () => {\r\n    setPaymentDetails(currentWorkshop);\r\n  };\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getBranchData();\r\n    mounted = false;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const refinedBranch = [...branches].map((e) => {\r\n      return { value: e._id, label: `${e.branchCode} - ${e.branchName}` };\r\n    });\r\n    setBranchesSelectValue(refinedBranch);\r\n  }, [branches]);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(paymentDetails)) {\r\n      setValue('paymentTerms', get(paymentDetails, 'paymentTerms', ''));\r\n      setValue('discount', get(paymentDetails, 'discount', ''));\r\n      setValue('creditDays', get(paymentDetails, 'creditDays', ''));\r\n      setValue(\r\n        'saleExecutiveCode',\r\n        get(paymentDetails, 'saleExecutiveCode', ''),\r\n      );\r\n     \r\n      if(paymentDetails?.branchId){\r\n        setValue('branchId',paymentDetails?.branchId)\r\n      }\r\n    }\r\n  }, [paymentDetails, branchesSelectValue]);\r\n\r\n  const handleFormSubmit = async (Data) => {\r\n    try {\r\n      onFormSubmit(Data, 4);\r\n    } catch (err) {\r\n      if(err.response){\r\n        \r\n        toast(err.response.data.errorMsg);\r\n      }else {\r\n        toast(intl.formatMessage(messages.somethingWentWrong));\r\n      }\r\n    }\r\n  };\r\n  const onReset = () =>\r\n    reset(\r\n      {},\r\n      {\r\n        keepDirty: false,\r\n        keepErrors: false,\r\n        keepValues: false,\r\n      },\r\n    );\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n      <div>\r\n        <h6 className='mt-6 mb-2 font-bold'>\r\n          {intl.formatMessage(messages.paymentDetails)}\r\n        </h6>\r\n        <hr className='mb-6 border-b-1 border-blueGray-200' />\r\n        <Box display='flex' flexWrap='wrap' justifyContent='space-between'>\r\n          <CustomSelect\r\n            register={register}\r\n            errors={errors}\r\n            inputName='paymentTerms'\r\n            label={messages.paymentTerms}\r\n            placeHolder={messages.paymentTerms}\r\n            options={paymentTerms}\r\n            width='48%'\r\n            required={false}\r\n            valueField='value'\r\n            labelField='name'\r\n          />\r\n          <InputScaffold\r\n            width='48%'\r\n            label={messages.discount}\r\n            inputName='discount'\r\n            inputType='number'\r\n            isRequired={false}\r\n            errors={errors}\r\n            register={register}\r\n          />\r\n        </Box>\r\n        <Box\r\n          display='flex'\r\n          flexWrap='wrap'\r\n          justifyContent='space-between'\r\n          my={{ base: 0, lg: 6 }}\r\n        >\r\n          <InputScaffold\r\n            width='48%'\r\n            label={messages.creditDays}\r\n            inputName='creditDays'\r\n            inputType='number'\r\n            isRequired={false}\r\n            errors={errors}\r\n            register={register}\r\n          />\r\n        \r\n\r\n          <Box width={{ base: '100%', lg: '48%' }} mt={{ base: 6, lg: 0 }}>\r\n            <div className='relative w-full mb-3'>\r\n              <label className='block uppercase text-blueGray-500 text-xs font-bold mb-2 ml-1'>\r\n                {intl.formatMessage(messages.branchId)}\r\n              </label>\r\n              <Select\r\n                placeholder='Select entity type'\r\n                {...register('branchId', { required: true })}\r\n              >\r\n                {branchesSelectValue.map((entity) => {\r\n                  return (\r\n                    <option value={entity.value} key={entity.value}>\r\n                      {entity.label}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Select>\r\n              {errors && errors.branchCode && (\r\n                <span className='text-youtube-regular text-sm'>\r\n                  {intl.formatMessage(messages.branchIdRequired)}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </Box>\r\n        </Box>\r\n        <Box mb={6}>\r\n          <InputScaffold\r\n            width='48%'\r\n            label={messages.saleExecutiveCode}\r\n            inputName='saleExecutiveCode'\r\n            inputType='text'\r\n            isRequired={false}\r\n            errors={errors}\r\n            register={register}\r\n          />\r\n        </Box>\r\n\r\n        <FormactionButtons\r\n          isLoading={loading}\r\n          saveLabel={messages.saveButtonLabel}\r\n          onReset={onReset}\r\n          cancleLabel={messages.cancelButtonLabe}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nPaymentTermsForm.propTypes = {\r\n  currentWorkshop: PropTypes.object,\r\n  onFormSubmit: PropTypes.func,\r\n};\r\n\r\nexport default PaymentTermsForm;\r\n"]},"metadata":{},"sourceType":"module"}