{"ast":null,"code":"import { Util } from './Util.js';\nimport { getComponentValidator } from './Validators.js';\nvar GET = 'get',\n    SET = 'set';\nexport const Factory = {\n  addGetterSetter(constructor, attr, def, validator, after) {\n    Factory.addGetter(constructor, attr, def);\n    Factory.addSetter(constructor, attr, validator, after);\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  addGetter(constructor, attr, def) {\n    var method = GET + Util._capitalize(attr);\n\n    constructor.prototype[method] = constructor.prototype[method] || function () {\n      var val = this.attrs[attr];\n      return val === undefined ? def : val;\n    };\n  },\n\n  addSetter(constructor, attr, validator, after) {\n    var method = SET + Util._capitalize(attr);\n\n    if (!constructor.prototype[method]) {\n      Factory.overWriteSetter(constructor, attr, validator, after);\n    }\n  },\n\n  overWriteSetter(constructor, attr, validator, after) {\n    var method = SET + Util._capitalize(attr);\n\n    constructor.prototype[method] = function (val) {\n      if (validator && val !== undefined && val !== null) {\n        val = validator.call(this, val, attr);\n      }\n\n      this._setAttr(attr, val);\n\n      if (after) {\n        after.call(this);\n      }\n\n      return this;\n    };\n  },\n\n  addComponentsGetterSetter(constructor, attr, components, validator, after) {\n    var len = components.length,\n        capitalize = Util._capitalize,\n        getter = GET + capitalize(attr),\n        setter = SET + capitalize(attr),\n        n,\n        component;\n\n    constructor.prototype[getter] = function () {\n      var ret = {};\n\n      for (n = 0; n < len; n++) {\n        component = components[n];\n        ret[component] = this.getAttr(attr + capitalize(component));\n      }\n\n      return ret;\n    };\n\n    var basicValidator = getComponentValidator(components);\n\n    constructor.prototype[setter] = function (val) {\n      var oldVal = this.attrs[attr],\n          key;\n\n      if (validator) {\n        val = validator.call(this, val);\n      }\n\n      if (basicValidator) {\n        basicValidator.call(this, val, attr);\n      }\n\n      for (key in val) {\n        if (!val.hasOwnProperty(key)) {\n          continue;\n        }\n\n        this._setAttr(attr + capitalize(key), val[key]);\n      }\n\n      this._fireChangeEvent(attr, oldVal, val);\n\n      if (after) {\n        after.call(this);\n      }\n\n      return this;\n    };\n\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  addOverloadedGetterSetter(constructor, attr) {\n    var capitalizedAttr = Util._capitalize(attr),\n        setter = SET + capitalizedAttr,\n        getter = GET + capitalizedAttr;\n\n    constructor.prototype[attr] = function () {\n      if (arguments.length) {\n        this[setter](arguments[0]);\n        return this;\n      }\n\n      return this[getter]();\n    };\n  },\n\n  addDeprecatedGetterSetter(constructor, attr, def, validator) {\n    Util.error('Adding deprecated ' + attr);\n\n    var method = GET + Util._capitalize(attr);\n\n    var message = attr + ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n\n    constructor.prototype[method] = function () {\n      Util.error(message);\n      var val = this.attrs[attr];\n      return val === undefined ? def : val;\n    };\n\n    Factory.addSetter(constructor, attr, validator, function () {\n      Util.error(message);\n    });\n    Factory.addOverloadedGetterSetter(constructor, attr);\n  },\n\n  backCompat(constructor, methods) {\n    Util.each(methods, function (oldMethodName, newMethodName) {\n      var method = constructor.prototype[newMethodName];\n\n      var oldGetter = GET + Util._capitalize(oldMethodName);\n\n      var oldSetter = SET + Util._capitalize(oldMethodName);\n\n      function deprecated() {\n        method.apply(this, arguments);\n        Util.error('\"' + oldMethodName + '\" method is deprecated and will be removed soon. Use \"\"' + newMethodName + '\" instead.');\n      }\n\n      constructor.prototype[oldMethodName] = deprecated;\n      constructor.prototype[oldGetter] = deprecated;\n      constructor.prototype[oldSetter] = deprecated;\n    });\n  },\n\n  afterSetFilter() {\n    this._filterUpToDate = false;\n  }\n\n};","map":{"version":3,"sources":["../src/Factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Util } from './Util.js';\nimport { getComponentValidator } from './Validators.js';\nvar GET = 'get', SET = 'set';\nexport const Factory = {\n    addGetterSetter(constructor, attr, def, validator, after) {\n        Factory.addGetter(constructor, attr, def);\n        Factory.addSetter(constructor, attr, validator, after);\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addGetter(constructor, attr, def) {\n        var method = GET + Util._capitalize(attr);\n        constructor.prototype[method] =\n            constructor.prototype[method] ||\n                function () {\n                    var val = this.attrs[attr];\n                    return val === undefined ? def : val;\n                };\n    },\n    addSetter(constructor, attr, validator, after) {\n        var method = SET + Util._capitalize(attr);\n        if (!constructor.prototype[method]) {\n            Factory.overWriteSetter(constructor, attr, validator, after);\n        }\n    },\n    overWriteSetter(constructor, attr, validator, after) {\n        var method = SET + Util._capitalize(attr);\n        constructor.prototype[method] = function (val) {\n            if (validator && val !== undefined && val !== null) {\n                val = validator.call(this, val, attr);\n            }\n            this._setAttr(attr, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n    },\n    addComponentsGetterSetter(constructor, attr, components, validator, after) {\n        var len = components.length, capitalize = Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;\n        constructor.prototype[getter] = function () {\n            var ret = {};\n            for (n = 0; n < len; n++) {\n                component = components[n];\n                ret[component] = this.getAttr(attr + capitalize(component));\n            }\n            return ret;\n        };\n        var basicValidator = getComponentValidator(components);\n        constructor.prototype[setter] = function (val) {\n            var oldVal = this.attrs[attr], key;\n            if (validator) {\n                val = validator.call(this, val);\n            }\n            if (basicValidator) {\n                basicValidator.call(this, val, attr);\n            }\n            for (key in val) {\n                if (!val.hasOwnProperty(key)) {\n                    continue;\n                }\n                this._setAttr(attr + capitalize(key), val[key]);\n            }\n            this._fireChangeEvent(attr, oldVal, val);\n            if (after) {\n                after.call(this);\n            }\n            return this;\n        };\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    addOverloadedGetterSetter(constructor, attr) {\n        var capitalizedAttr = Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;\n        constructor.prototype[attr] = function () {\n            if (arguments.length) {\n                this[setter](arguments[0]);\n                return this;\n            }\n            return this[getter]();\n        };\n    },\n    addDeprecatedGetterSetter(constructor, attr, def, validator) {\n        Util.error('Adding deprecated ' + attr);\n        var method = GET + Util._capitalize(attr);\n        var message = attr +\n            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\n        constructor.prototype[method] = function () {\n            Util.error(message);\n            var val = this.attrs[attr];\n            return val === undefined ? def : val;\n        };\n        Factory.addSetter(constructor, attr, validator, function () {\n            Util.error(message);\n        });\n        Factory.addOverloadedGetterSetter(constructor, attr);\n    },\n    backCompat(constructor, methods) {\n        Util.each(methods, function (oldMethodName, newMethodName) {\n            var method = constructor.prototype[newMethodName];\n            var oldGetter = GET + Util._capitalize(oldMethodName);\n            var oldSetter = SET + Util._capitalize(oldMethodName);\n            function deprecated() {\n                method.apply(this, arguments);\n                Util.error('\"' +\n                    oldMethodName +\n                    '\" method is deprecated and will be removed soon. Use \"\"' +\n                    newMethodName +\n                    '\" instead.');\n            }\n            constructor.prototype[oldMethodName] = deprecated;\n            constructor.prototype[oldGetter] = deprecated;\n            constructor.prototype[oldSetter] = deprecated;\n        });\n    },\n    afterSetFilter() {\n        this._filterUpToDate = false;\n    },\n};\n//# sourceMappingURL=Factory.js.map"]},"metadata":{},"sourceType":"module"}