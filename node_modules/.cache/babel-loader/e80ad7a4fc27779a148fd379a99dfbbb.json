{"ast":null,"code":"import { glob } from './Global.js';\nimport { Util } from './Util.js';\n\nvar now = function () {\n  if (glob.performance && glob.performance.now) {\n    return function () {\n      return glob.performance.now();\n    };\n  }\n\n  return function () {\n    return new Date().getTime();\n  };\n}();\n\nexport class Animation {\n  constructor(func, layers) {\n    this.id = Animation.animIdCounter++;\n    this.frame = {\n      time: 0,\n      timeDiff: 0,\n      lastTime: now(),\n      frameRate: 0\n    };\n    this.func = func;\n    this.setLayers(layers);\n  }\n\n  setLayers(layers) {\n    var lays = [];\n\n    if (!layers) {\n      lays = [];\n    } else if (layers.length > 0) {\n      lays = layers;\n    } else {\n      lays = [layers];\n    }\n\n    this.layers = lays;\n    return this;\n  }\n\n  getLayers() {\n    return this.layers;\n  }\n\n  addLayer(layer) {\n    var layers = this.layers,\n        len = layers.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (layers[n]._id === layer._id) {\n        return false;\n      }\n    }\n\n    this.layers.push(layer);\n    return true;\n  }\n\n  isRunning() {\n    var a = Animation,\n        animations = a.animations,\n        len = animations.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === this.id) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  start() {\n    this.stop();\n    this.frame.timeDiff = 0;\n    this.frame.lastTime = now();\n\n    Animation._addAnimation(this);\n\n    return this;\n  }\n\n  stop() {\n    Animation._removeAnimation(this);\n\n    return this;\n  }\n\n  _updateFrameObject(time) {\n    this.frame.timeDiff = time - this.frame.lastTime;\n    this.frame.lastTime = time;\n    this.frame.time += this.frame.timeDiff;\n    this.frame.frameRate = 1000 / this.frame.timeDiff;\n  }\n\n  static _addAnimation(anim) {\n    this.animations.push(anim);\n\n    this._handleAnimation();\n  }\n\n  static _removeAnimation(anim) {\n    var id = anim.id,\n        animations = this.animations,\n        len = animations.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      if (animations[n].id === id) {\n        this.animations.splice(n, 1);\n        break;\n      }\n    }\n  }\n\n  static _runFrames() {\n    var layerHash = {},\n        animations = this.animations,\n        anim,\n        layers,\n        func,\n        n,\n        i,\n        layersLen,\n        layer,\n        key,\n        needRedraw;\n\n    for (n = 0; n < animations.length; n++) {\n      anim = animations[n];\n      layers = anim.layers;\n      func = anim.func;\n\n      anim._updateFrameObject(now());\n\n      layersLen = layers.length;\n\n      if (func) {\n        needRedraw = func.call(anim, anim.frame) !== false;\n      } else {\n        needRedraw = true;\n      }\n\n      if (!needRedraw) {\n        continue;\n      }\n\n      for (i = 0; i < layersLen; i++) {\n        layer = layers[i];\n\n        if (layer._id !== undefined) {\n          layerHash[layer._id] = layer;\n        }\n      }\n    }\n\n    for (key in layerHash) {\n      if (!layerHash.hasOwnProperty(key)) {\n        continue;\n      }\n\n      layerHash[key].batchDraw();\n    }\n  }\n\n  static _animationLoop() {\n    var Anim = Animation;\n\n    if (Anim.animations.length) {\n      Anim._runFrames();\n\n      Util.requestAnimFrame(Anim._animationLoop);\n    } else {\n      Anim.animRunning = false;\n    }\n  }\n\n  static _handleAnimation() {\n    if (!this.animRunning) {\n      this.animRunning = true;\n      Util.requestAnimFrame(this._animationLoop);\n    }\n  }\n\n}\nAnimation.animations = [];\nAnimation.animIdCounter = 0;\nAnimation.animRunning = false;","map":{"version":3,"sources":["../src/Animation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { glob } from './Global.js';\nimport { Util } from './Util.js';\nvar now = (function () {\n    if (glob.performance && glob.performance.now) {\n        return function () {\n            return glob.performance.now();\n        };\n    }\n    return function () {\n        return new Date().getTime();\n    };\n})();\nexport class Animation {\n    constructor(func, layers) {\n        this.id = Animation.animIdCounter++;\n        this.frame = {\n            time: 0,\n            timeDiff: 0,\n            lastTime: now(),\n            frameRate: 0,\n        };\n        this.func = func;\n        this.setLayers(layers);\n    }\n    setLayers(layers) {\n        var lays = [];\n        if (!layers) {\n            lays = [];\n        }\n        else if (layers.length > 0) {\n            lays = layers;\n        }\n        else {\n            lays = [layers];\n        }\n        this.layers = lays;\n        return this;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    addLayer(layer) {\n        var layers = this.layers, len = layers.length, n;\n        for (n = 0; n < len; n++) {\n            if (layers[n]._id === layer._id) {\n                return false;\n            }\n        }\n        this.layers.push(layer);\n        return true;\n    }\n    isRunning() {\n        var a = Animation, animations = a.animations, len = animations.length, n;\n        for (n = 0; n < len; n++) {\n            if (animations[n].id === this.id) {\n                return true;\n            }\n        }\n        return false;\n    }\n    start() {\n        this.stop();\n        this.frame.timeDiff = 0;\n        this.frame.lastTime = now();\n        Animation._addAnimation(this);\n        return this;\n    }\n    stop() {\n        Animation._removeAnimation(this);\n        return this;\n    }\n    _updateFrameObject(time) {\n        this.frame.timeDiff = time - this.frame.lastTime;\n        this.frame.lastTime = time;\n        this.frame.time += this.frame.timeDiff;\n        this.frame.frameRate = 1000 / this.frame.timeDiff;\n    }\n    static _addAnimation(anim) {\n        this.animations.push(anim);\n        this._handleAnimation();\n    }\n    static _removeAnimation(anim) {\n        var id = anim.id, animations = this.animations, len = animations.length, n;\n        for (n = 0; n < len; n++) {\n            if (animations[n].id === id) {\n                this.animations.splice(n, 1);\n                break;\n            }\n        }\n    }\n    static _runFrames() {\n        var layerHash = {}, animations = this.animations, anim, layers, func, n, i, layersLen, layer, key, needRedraw;\n        for (n = 0; n < animations.length; n++) {\n            anim = animations[n];\n            layers = anim.layers;\n            func = anim.func;\n            anim._updateFrameObject(now());\n            layersLen = layers.length;\n            if (func) {\n                needRedraw = func.call(anim, anim.frame) !== false;\n            }\n            else {\n                needRedraw = true;\n            }\n            if (!needRedraw) {\n                continue;\n            }\n            for (i = 0; i < layersLen; i++) {\n                layer = layers[i];\n                if (layer._id !== undefined) {\n                    layerHash[layer._id] = layer;\n                }\n            }\n        }\n        for (key in layerHash) {\n            if (!layerHash.hasOwnProperty(key)) {\n                continue;\n            }\n            layerHash[key].batchDraw();\n        }\n    }\n    static _animationLoop() {\n        var Anim = Animation;\n        if (Anim.animations.length) {\n            Anim._runFrames();\n            Util.requestAnimFrame(Anim._animationLoop);\n        }\n        else {\n            Anim.animRunning = false;\n        }\n    }\n    static _handleAnimation() {\n        if (!this.animRunning) {\n            this.animRunning = true;\n            Util.requestAnimFrame(this._animationLoop);\n        }\n    }\n}\nAnimation.animations = [];\nAnimation.animIdCounter = 0;\nAnimation.animRunning = false;\n//# sourceMappingURL=Animation.js.map"]},"metadata":{},"sourceType":"module"}