{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\OrderDetails\\\\PartsUnavailable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useState } from 'react';\nimport { Box, Select, Spinner, Button, Flex } from '@chakra-ui/react';\nimport styled from 'styled-components';\nimport { useIntl } from 'react-intl';\nimport messages from './messages';\nimport { useSelector, useDispatch } from 'react-redux';\nimport getPartIds from '../../utils/getPartIds';\nimport { getQuantityAvailable, createUnavailableOrder, getOrderDetails, setOrderDetails } from './actions';\nimport enums from '../../utils/enums';\nimport { Route, useRouteMatch, Switch, useHistory } from 'react-router-dom';\nimport withToast from '../../HOCs/withToast';\nimport UnavailablePartsScaffold from '../../components/OrderComponents/UnavailablePartScaffold';\nimport removeFromLocalStorage from '../../utils/removeFromLocalStorage';\nimport ArrangePart from './ArrangePart';\nimport BackOrder from './BackOrder';\nimport { selectGlobalState } from '../../globalSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PartsUnavailable = withToast(_c = _s(_ref => {\n  _s();\n\n  let {\n    notification\n  } = _ref;\n  const intl = useIntl();\n  const [tableData, setTableData] = useState([]);\n  const {\n    orderDetails\n  } = useSelector(state => state.orderDetails);\n  const [processingOrder, setProcessingOrder] = useState(false);\n  const {\n    branches\n  } = useSelector(selectGlobalState);\n  const [availableItems, setAvailableItems] = useState([]);\n  const [selectedBranch, setSelectedBranch] = useState('');\n  const auth = useSelector(state => state.auth);\n  const history = useHistory();\n  const {\n    path,\n    url\n  } = useRouteMatch();\n  const [activeOrderOption, setActiveOrderOption] = useState('none');\n  const dispatcher = useDispatch();\n\n  const fetchOrderDetails = async id => {\n    try {\n      const data = await getOrderDetails(auth, id);\n      dispatcher(setOrderDetails(data));\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: error.response ? error.response.data.message : intl.formatMessage(messages.errorOccurred)\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (localStorage.partsUnavailable !== undefined) {\n      const data = JSON.parse(localStorage.partsUnavailable).map(item => {\n        var _availableItems$item$;\n\n        return { ...item,\n          selectedLocationQuantity: (_availableItems$item$ = availableItems[item.partId]) === null || _availableItems$item$ === void 0 ? void 0 : _availableItems$item$.quantity\n        };\n      });\n      setTableData(data);\n    }\n  }, [availableItems]);\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.SNo),\n    accessor: 'SNo',\n    Cell: allData => {\n      var _allData$row;\n\n      return /*#__PURE__*/_jsxDEV(Box, {\n        children: (allData === null || allData === void 0 ? void 0 : (_allData$row = allData.row) === null || _allData$row === void 0 ? void 0 : _allData$row.index) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 18\n      }, this);\n    }\n  }, {\n    Header: intl.formatMessage(messages.partNumber),\n    accessor: row => row.part.partNumber\n  }, {\n    Header: intl.formatMessage(messages.partDescription),\n    accessor: row => row.part.description\n  }, {\n    Header: intl.formatMessage(messages.quantityOrdered),\n    accessor: 'quantity'\n  }, {\n    Header: intl.formatMessage(messages.pendingQuantity),\n    accessor: 'pendingQuantity'\n  }, {\n    Header: intl.formatMessage(messages.availableQuantity),\n    accessor: 'availableQuantity'\n  }, {\n    Header: intl.formatMessage(messages.selectedLocationQuantity),\n    accessor: 'selectedLocationQuantity'\n  }], [tableData]);\n  const branchList = [...branches].map(branch => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: branch._id,\n      children: branch.branchName\n    }, branch._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  });\n\n  const handleBranchChange = async _ref2 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref2;\n\n    try {\n      const selectBranch = [...branches].find(item => item._id === value);\n      let unAvailableItems = JSON.parse(localStorage.partsUnavailable);\n\n      if (unAvailableItems === undefined || unAvailableItems.length < 1) {\n        unAvailableItems = [...orderDetails.items];\n      }\n\n      setSelectedBranch(selectBranch);\n\n      if (value) {\n        const response = await getQuantityAvailable({\n          auth,\n          params: {\n            parts: getPartIds([...unAvailableItems]),\n            branchId: value\n          }\n        });\n        setAvailableItems(response.data);\n      } else {\n        setAvailableItems([]);\n      }\n    } catch (error) {\n      var _error$response$data$;\n\n      notification({\n        status: 'error',\n        description: (_error$response$data$ = error.response.data.message) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : intl.formatMessage(messages.errorOccurred)\n      });\n    }\n  };\n\n  const handleUnavailableParts = async option => {\n    try {\n      setProcessingOrder(true);\n      setActiveOrderOption(option);\n      let items = [];\n\n      if (option === enums.TRANSFER_STOCK || option === enums.TRANSFER_ORDER) {\n        if (!selectedBranch && Object.keys(availableItems).length === 0) {\n          notification({\n            status: 'error',\n            title: 'Branch not selected',\n            description: `Please select a branch to transfer ${option === enums.TRANSFER_STOCK ? 'stock' : 'order'}`\n          });\n          setProcessingOrder(false);\n          return;\n        }\n\n        items = [...tableData].map(item => {\n          var _availableItems$item$2, _availableItems$item$3;\n\n          return {\n            partId: item.partId,\n            quantity: item.pendingQuantity,\n            price: (_availableItems$item$2 = (_availableItems$item$3 = availableItems[item.partId]) === null || _availableItems$item$3 === void 0 ? void 0 : _availableItems$item$3.price) !== null && _availableItems$item$2 !== void 0 ? _availableItems$item$2 : item.price\n          };\n        });\n      } else {\n        items = [...tableData].map(item => ({\n          partId: item.partId,\n          quantity: item.pendingQuantity,\n          price: item.price\n        }));\n      }\n\n      let data = {};\n\n      if (option === enums.TRANSFER_STOCK || option === enums.TRANSFER_ORDER) {\n        data = {\n          option,\n          items,\n          [option === enums.TRANSFER_STOCK ? 'transferBranchId' : 'transferBranchId']: selectedBranch._id,\n          comment: ''\n        };\n      } else {\n        data = {\n          option,\n          items,\n          comment: ''\n        };\n      }\n\n      const response = await createUnavailableOrder({\n        auth,\n        orderId: orderDetails._id,\n        data\n      });\n      fetchOrderDetails(response.data.orderId);\n\n      switch (option) {\n        case enums.TRANSFER_STOCK:\n          notification({\n            status: 'success',\n            description: intl.formatMessage(messages.stockTransferPlaced)\n          });\n          break;\n\n        case enums.TRANSFER_ORDER:\n          notification({\n            status: 'success',\n            title: intl.formatMessage(messages.orderForwarded),\n            description: intl.formatMessage(messages.orderForwardedDescription)\n          });\n          break;\n\n        case enums.BACK_ORDER:\n          notification({\n            status: 'success',\n            description: intl.formatMessage(messages.takeBackOrderInitiated)\n          });\n          break;\n\n        case enums.CANCEL_ORDER:\n          notification({\n            status: 'success',\n            title: intl.formatMessage(messages.orderCancelled),\n            description: intl.formatMessage(messages.orderCancelledDescription)\n          });\n          break;\n\n        default:\n          return;\n      }\n\n      removeFromLocalStorage();\n      history.push('/orders');\n      setProcessingOrder(false);\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: error.response ? error.response.data.message : intl.formatMessage(messages.errorOccurred)\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: path,\n      children: /*#__PURE__*/_jsxDEV(UnavailablePartsScaffold, {\n        orderNotCreated: true,\n        orderDetails: orderDetails,\n        columns: columns,\n        tableData: tableData,\n        children: !processingOrder ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            my: 4,\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              maxWidth: \"50%\",\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                children: intl.formatMessage(messages.branchToCheckInventory)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                placeholder: \"Select branch\",\n                onChange: handleBranchChange,\n                children: branchList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              maxWidth: \"48%\",\n              display: \"flex\",\n              children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n                onClick: () => handleUnavailableParts(enums.TRANSFER_STOCK),\n                children: intl.formatMessage(messages.arrangeParts)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n                onClick: () => handleUnavailableParts(enums.TRANSFER_ORDER),\n                children: intl.formatMessage(messages.forwardOrder)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"flex-end\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              ml: \"auto\",\n              mt: 10,\n              mb: 5,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"cancle\",\n                onClick: () => handleUnavailableParts(enums.CANCEL_ORDER),\n                children: intl.formatMessage(messages.cancelOrder)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                ml: 3,\n                variant: \"normal\",\n                onClick: () => handleUnavailableParts(enums.BACK_ORDER),\n                children: intl.formatMessage(messages.takeBackOrder)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Spinner, {\n            size: \"md\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            ml: 3,\n            children: activeOrderOption === enums.TRANSFER_STOCK ? `Stock transfer from ${selectedBranch.branchName} in progress` : activeOrderOption === enums.TRANSFER_ORDER ? `Order is being forwarded to ${selectedBranch.branchName}` : activeOrderOption === enums.BACK_ORDER ? 'Back order in progress' : 'Cancelling Order'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${path}/arrange-parts/:id`,\n      children: /*#__PURE__*/_jsxDEV(ArrangePart, {\n        onCancelOrder: handleUnavailableParts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: `${path}/back-order/:id`,\n      children: /*#__PURE__*/_jsxDEV(BackOrder, {\n        onCancelOrder: handleUnavailableParts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}, \"t9o6x26Xt5cDZgrYdnf4AXLtPzw=\", false, function () {\n  return [useIntl, useSelector, useSelector, useSelector, useHistory, useRouteMatch, useDispatch];\n}));\n_c2 = PartsUnavailable;\nconst StyledButton = styled.button`\n  background-color: teal;\n  color: #fff;\n  font-weight: 500;\n  border-radius: 5px;\n  padding: 5px;\n  margin-left: 15px;\n\n  :hover {\n    background-color: 'red';\n  }\n`;\n_c3 = StyledButton;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PartsUnavailable$withToast\");\n$RefreshReg$(_c2, \"PartsUnavailable\");\n$RefreshReg$(_c3, \"StyledButton\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/OrderDetails/PartsUnavailable.js"],"names":["React","useMemo","useEffect","useState","Box","Select","Spinner","Button","Flex","styled","useIntl","messages","useSelector","useDispatch","getPartIds","getQuantityAvailable","createUnavailableOrder","getOrderDetails","setOrderDetails","enums","Route","useRouteMatch","Switch","useHistory","withToast","UnavailablePartsScaffold","removeFromLocalStorage","ArrangePart","BackOrder","selectGlobalState","PartsUnavailable","notification","intl","tableData","setTableData","orderDetails","state","processingOrder","setProcessingOrder","branches","availableItems","setAvailableItems","selectedBranch","setSelectedBranch","auth","history","path","url","activeOrderOption","setActiveOrderOption","dispatcher","fetchOrderDetails","id","data","error","status","description","response","message","formatMessage","errorOccurred","localStorage","partsUnavailable","undefined","JSON","parse","map","item","selectedLocationQuantity","partId","quantity","columns","Header","SNo","accessor","Cell","allData","row","index","partNumber","part","partDescription","quantityOrdered","pendingQuantity","availableQuantity","branchList","branch","_id","branchName","handleBranchChange","target","value","selectBranch","find","unAvailableItems","length","items","params","parts","branchId","handleUnavailableParts","option","TRANSFER_STOCK","TRANSFER_ORDER","Object","keys","title","price","comment","orderId","stockTransferPlaced","orderForwarded","orderForwardedDescription","BACK_ORDER","takeBackOrderInitiated","CANCEL_ORDER","orderCancelled","orderCancelledDescription","push","branchToCheckInventory","arrangeParts","forwardOrder","cancelOrder","takeBackOrder","StyledButton","button"],"mappings":"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","sourcesContent":["import React, { useMemo, useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Select,\r\n  Spinner,\r\n  Button,\r\n  Flex\r\n} from '@chakra-ui/react';\r\nimport styled from 'styled-components';\r\nimport { useIntl } from 'react-intl';\r\nimport messages from './messages';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport getPartIds from '../../utils/getPartIds';\r\nimport {\r\n  getQuantityAvailable,\r\n  createUnavailableOrder,\r\n  getOrderDetails,\r\n  setOrderDetails,\r\n} from './actions';\r\nimport enums from '../../utils/enums';\r\nimport {\r\n  Route,\r\n  useRouteMatch,\r\n  Switch,\r\n  useHistory,\r\n} from 'react-router-dom';\r\nimport withToast from '../../HOCs/withToast';\r\nimport UnavailablePartsScaffold from '../../components/OrderComponents/UnavailablePartScaffold';\r\nimport removeFromLocalStorage from '../../utils/removeFromLocalStorage';\r\nimport ArrangePart from './ArrangePart';\r\nimport BackOrder from './BackOrder';\r\nimport { selectGlobalState } from '../../globalSlice';\r\n\r\n\r\nexport const PartsUnavailable = withToast(({notification}) => {\r\n  const intl = useIntl();\r\n  const [tableData, setTableData] = useState([]);\r\n  const { orderDetails } = useSelector((state) => state.orderDetails);\r\n  const [processingOrder, setProcessingOrder] = useState(false);\r\n  const { branches } = useSelector(selectGlobalState);\r\n  const [availableItems, setAvailableItems] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState('');\r\n  const auth = useSelector((state) => state.auth);\r\n  const history = useHistory();\r\n  const { path, url } = useRouteMatch();\r\n  const [activeOrderOption, setActiveOrderOption] = useState('none');\r\n  const dispatcher = useDispatch();\r\n\r\n  const fetchOrderDetails = async (id) => {\r\n    try {\r\n      const data = await getOrderDetails(auth, id);\r\n  \r\n      dispatcher(setOrderDetails(data));\r\n    } catch (error) {\r\n      notification({\r\n        status: 'error',\r\n        description: error.response\r\n          ? error.response.data.message\r\n          : intl.formatMessage(messages.errorOccurred),\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.partsUnavailable !== undefined) {\r\n      const data = JSON.parse(localStorage.partsUnavailable).map((item) => ({\r\n        ...item,\r\n        selectedLocationQuantity: availableItems[item.partId]?.quantity,\r\n      }));\r\n      setTableData(data);\r\n    }\r\n  }, [availableItems]);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.SNo),\r\n        accessor: 'SNo',\r\n        Cell: (allData) => {\r\n          return <Box>{allData?.row?.index + 1}</Box>;\r\n        },\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partNumber),\r\n        accessor: (row) => row.part.partNumber,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partDescription),\r\n        accessor: (row) => row.part.description,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.quantityOrdered),\r\n        accessor: 'quantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.pendingQuantity),\r\n        accessor: 'pendingQuantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.availableQuantity),\r\n        accessor: 'availableQuantity',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.selectedLocationQuantity),\r\n        accessor: 'selectedLocationQuantity',\r\n      },\r\n    ],\r\n    [tableData],\r\n  );\r\n\r\n  const branchList = [...branches].map((branch) => {\r\n    return (\r\n      <option key={branch._id} value={branch._id}>\r\n        {branch.branchName}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  const handleBranchChange = async ({ target: { value } }) => {\r\n    try {\r\n      const selectBranch = [...branches].find((item) => item._id === value);\r\n      let unAvailableItems = JSON.parse(localStorage.partsUnavailable);\r\n\r\n      if(unAvailableItems === undefined || unAvailableItems.length < 1){\r\n        unAvailableItems = [...orderDetails.items];\r\n      }\r\n\r\n      setSelectedBranch(selectBranch);\r\n      if (value) {\r\n        const response = await getQuantityAvailable({\r\n          auth,\r\n          params: {\r\n            parts: getPartIds([...unAvailableItems]),\r\n            branchId: value,\r\n          },\r\n        });\r\n        setAvailableItems(response.data);\r\n      } else {\r\n        setAvailableItems([]);\r\n      }\r\n    } catch (error) {\r\n      notification({\r\n        status: 'error',\r\n        description: error.response.data.message ?? intl.formatMessage(messages.errorOccurred),\r\n      });\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  const handleUnavailableParts = async (option) => {\r\n    try {\r\n      setProcessingOrder(true);\r\n      setActiveOrderOption(option);\r\n      let items = [];\r\n\r\n      if (option === enums.TRANSFER_STOCK || option === enums.TRANSFER_ORDER) {\r\n      \r\n        if(!selectedBranch && Object.keys(availableItems).length === 0){\r\n          notification({\r\n            status: 'error',\r\n            title:'Branch not selected',\r\n            description: `Please select a branch to transfer ${option === enums.TRANSFER_STOCK? 'stock' : 'order'}`\r\n\r\n          })\r\n          setProcessingOrder(false);\r\n          return;\r\n        } \r\n        items = [...tableData].map((item) => ({\r\n          partId: item.partId,\r\n          quantity: item.pendingQuantity,\r\n          price: availableItems[item.partId]?.price ?? item.price,\r\n        }));\r\n      } else {\r\n        items = [...tableData].map((item) => ({\r\n          partId: item.partId,\r\n          quantity: item.pendingQuantity,\r\n          price: item.price,\r\n        }));\r\n      }\r\n\r\n      let data = {};\r\n\r\n      if (option === enums.TRANSFER_STOCK || option === enums.TRANSFER_ORDER) {\r\n        data = {\r\n          option,\r\n          items,\r\n          [option === enums.TRANSFER_STOCK\r\n            ? 'transferBranchId'\r\n            : 'transferBranchId']: selectedBranch._id,\r\n          comment: '',\r\n        };\r\n      } else {\r\n        data = {\r\n          option,\r\n          items,\r\n          comment: '',\r\n        };\r\n      }\r\n\r\n      const response = await createUnavailableOrder({\r\n        auth,\r\n        orderId: orderDetails._id,\r\n        data,\r\n      });\r\n\r\n      fetchOrderDetails(response.data.orderId);\r\n\r\n      switch (option) {\r\n        case enums.TRANSFER_STOCK:\r\n          notification({\r\n            status: 'success',\r\n            description: intl.formatMessage(messages.stockTransferPlaced),\r\n          });\r\n          break;\r\n        case enums.TRANSFER_ORDER:\r\n          notification({\r\n            status: 'success',\r\n            title: intl.formatMessage(messages.orderForwarded),\r\n            description: intl.formatMessage(messages.orderForwardedDescription),\r\n          });\r\n          break;\r\n        case enums.BACK_ORDER:\r\n          notification({\r\n            status: 'success',\r\n            description: intl.formatMessage(messages.takeBackOrderInitiated),\r\n          });\r\n          break;\r\n        case enums.CANCEL_ORDER:\r\n          notification({\r\n            status: 'success',\r\n            title: intl.formatMessage(messages.orderCancelled),\r\n            description: intl.formatMessage(messages.orderCancelledDescription),\r\n          });\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n      removeFromLocalStorage();\r\n      history.push('/orders');\r\n      setProcessingOrder(false);\r\n    } catch (error) {\r\n      notification({\r\n        status: 'error',\r\n        description: error.response\r\n          ? error.response.data.message\r\n          : intl.formatMessage(messages.errorOccurred),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path={path}>\r\n        <UnavailablePartsScaffold\r\n          orderNotCreated={true}\r\n          orderDetails={orderDetails}\r\n          columns={columns}\r\n          tableData={tableData}\r\n        >\r\n          {!processingOrder ? (\r\n            <>\r\n              <Box\r\n                my={4}\r\n                display='flex'\r\n                width='100%'\r\n                justifyContent='space-between'\r\n              >\r\n                <Box display='flex' maxWidth='50%'>\r\n                  <Box>\r\n                    {intl.formatMessage(messages.branchToCheckInventory)}\r\n                  </Box>\r\n                  <Select\r\n                    placeholder='Select branch'\r\n                    onChange={handleBranchChange}\r\n                  >\r\n                    {branchList}\r\n                  </Select>\r\n                </Box>\r\n                <Box maxWidth='48%' display='flex'>\r\n                  <StyledButton\r\n                    onClick={() => handleUnavailableParts(enums.TRANSFER_STOCK)}\r\n                  >\r\n                    {intl.formatMessage(messages.arrangeParts)}\r\n                  </StyledButton>\r\n                  <StyledButton\r\n                    onClick={() => handleUnavailableParts(enums.TRANSFER_ORDER)}\r\n                  >\r\n                    {intl.formatMessage(messages.forwardOrder)}\r\n                  </StyledButton>\r\n                </Box>\r\n              </Box>\r\n              <Flex justifyContent='flex-end'>\r\n              <Box ml='auto' mt={10} mb={5}>\r\n                <Button variant='cancle' onClick={() => handleUnavailableParts(enums.CANCEL_ORDER)}>{intl.formatMessage(messages.cancelOrder)}</Button>\r\n                <Button\r\n                  ml={3}\r\n                  variant='normal'\r\n                  onClick={() => handleUnavailableParts(enums.BACK_ORDER)}\r\n                >\r\n                  {intl.formatMessage(messages.takeBackOrder)}\r\n                </Button>\r\n              </Box>\r\n              </Flex>\r\n            </>\r\n          ) : (\r\n            <Box display='flex' alignItems='center'>\r\n              <Spinner size='md' />\r\n              <Box ml={3}>\r\n                {activeOrderOption === enums.TRANSFER_STOCK\r\n                  ? `Stock transfer from ${selectedBranch.branchName} in progress`\r\n                  : activeOrderOption === enums.TRANSFER_ORDER\r\n                  ? `Order is being forwarded to ${selectedBranch.branchName}`\r\n                  : activeOrderOption === enums.BACK_ORDER\r\n                  ? 'Back order in progress'\r\n                  : 'Cancelling Order'}\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </UnavailablePartsScaffold>\r\n      </Route>\r\n      <Route exact path={`${path}/arrange-parts/:id`}>\r\n        <ArrangePart onCancelOrder={handleUnavailableParts} />\r\n      </Route>\r\n      <Route exact path={`${path}/back-order/:id`}>\r\n        <BackOrder onCancelOrder={handleUnavailableParts}/>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n});\r\n\r\n\r\n\r\nconst StyledButton = styled.button`\r\n  background-color: teal;\r\n  color: #fff;\r\n  font-weight: 500;\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n  margin-left: 15px;\r\n\r\n  :hover {\r\n    background-color: 'red';\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}