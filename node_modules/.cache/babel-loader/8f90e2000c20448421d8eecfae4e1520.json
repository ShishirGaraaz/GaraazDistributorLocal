{"ast":null,"code":"/**\r\n * Create the store with dynamic reducers\r\n */\n//import { createStore, applyMiddleware, compose } from 'redux';\n//import { routerMiddleware } from 'connected-react-router';\n//import hist from './utils/history';\n//import createReducer from './reducers';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { allReducers } from './reducers'; // eslint-disable-line\n\n/* function configureStore(initialState = {}, history) {\r\n  let composeEnhancers = compose;\r\n\r\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\r\n  //istanbul ignore next \r\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\r\n    //eslint-disable no-underscore-dangle \r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n\r\n    // NOTE: Uncomment the code below to restore support for Redux Saga\r\n    // Dev Tools once it supports redux-saga version 1.x.x\r\n    // if (window.__SAGA_MONITOR_EXTENSION__)\r\n    //   reduxSagaMonitorOptions = {\r\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\r\n    //   };\r\n    //eslint-enable \r\n  }\r\n\r\n  // Create the store with two middlewares\r\n  // 1. sagaMiddleware: Makes redux-sagas work\r\n  // 2. routerMiddleware: Syncs the location/URL path to the state\r\n  const middlewares = [routerMiddleware(history)];\r\n\r\n  const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n  const store = createStore(\r\n    createReducer(),\r\n    //allReducers(),\r\n    initialState,\r\n    composeEnhancers(...enhancers),\r\n  );\r\n\r\n  // Extensions\r\n  store.injectedReducers = {}; // Reducer registry\r\n\r\n  // Make reducers hot reloadable, see http://mxs.is/googmo\r\n  // istanbul ignore next \r\n  if (module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n      store.replaceReducer(createReducer(store.injectedReducers));\r\n      //store.replaceReducer(allReducers(store.injectedReducers))\r\n    });\r\n  }\r\n\r\n  return store;\r\n}\r\n\r\n// Create redux store with history\r\nconst initialState = {};\r\nconst store = configureStore(initialState, hist); */\n\nconst store = configureStore({\n  reducer: allReducers()\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/configureStore.js"],"names":["configureStore","allReducers","store","reducer"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,YAA5B,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGF,cAAc,CAAC;AAC3BG,EAAAA,OAAO,EAAEF,WAAW;AADO,CAAD,CAA5B;AAIA,eAAeC,KAAf","sourcesContent":["/**\r\n * Create the store with dynamic reducers\r\n */\r\n\r\n//import { createStore, applyMiddleware, compose } from 'redux';\r\n//import { routerMiddleware } from 'connected-react-router';\r\n//import hist from './utils/history';\r\n//import createReducer from './reducers';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { allReducers } from './reducers';\r\n\r\n// eslint-disable-line\r\n/* function configureStore(initialState = {}, history) {\r\n  let composeEnhancers = compose;\r\n\r\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\r\n  //istanbul ignore next \r\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\r\n    //eslint-disable no-underscore-dangle \r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n\r\n    // NOTE: Uncomment the code below to restore support for Redux Saga\r\n    // Dev Tools once it supports redux-saga version 1.x.x\r\n    // if (window.__SAGA_MONITOR_EXTENSION__)\r\n    //   reduxSagaMonitorOptions = {\r\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\r\n    //   };\r\n    //eslint-enable \r\n  }\r\n\r\n  // Create the store with two middlewares\r\n  // 1. sagaMiddleware: Makes redux-sagas work\r\n  // 2. routerMiddleware: Syncs the location/URL path to the state\r\n  const middlewares = [routerMiddleware(history)];\r\n\r\n  const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n  const store = createStore(\r\n    createReducer(),\r\n    //allReducers(),\r\n    initialState,\r\n    composeEnhancers(...enhancers),\r\n  );\r\n\r\n  // Extensions\r\n  store.injectedReducers = {}; // Reducer registry\r\n\r\n  // Make reducers hot reloadable, see http://mxs.is/googmo\r\n  // istanbul ignore next \r\n  if (module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n      store.replaceReducer(createReducer(store.injectedReducers));\r\n      //store.replaceReducer(allReducers(store.injectedReducers))\r\n    });\r\n  }\r\n\r\n  return store;\r\n}\r\n\r\n// Create redux store with history\r\nconst initialState = {};\r\nconst store = configureStore(initialState, hist); */\r\n\r\nconst store = configureStore({\r\n  reducer: allReducers(),\r\n });\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}