{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\Work\\\\garaaz-distributor\\\\src\\\\containers\\\\StockTransfer\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useRef, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Box, Textarea, useDisclosure, Button, Flex } from '@chakra-ui/react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport DynamicTable from '../../components/DynamicTable';\nimport ModifiedTableTop from '../../components/TableTop/ModifiedTableTop';\nimport withToast from '../../HOCs/withToast';\nimport messages from './messages';\nimport { getAllStockTranferRequest, selectStockTransfer, updateStockTransferStatus, getSingleStockTranferRequest, addTotalCount } from './slice';\nimport StatusComponent from './StatusComponent';\nimport SimpleModal from '../../components/Modal';\nimport enums from '../../utils/enums';\nimport totalItemFromArray from '../../utils/getTotalFromArray';\nimport getMoneyFormat from '../../utils/getMoneyFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StockTransfer = _ref => {\n  _s();\n\n  let {\n    notification\n  } = _ref;\n  const [inputValues, setInputValue] = useState({\n    end: moment().add(1, 'days').format('YYYY-MM-DD'),\n    start: moment().startOf('month').format('YYYY-MM-DD')\n  });\n  const intl = useIntl();\n  const auth = useSelector(state => state.auth);\n  const dispatcher = useDispatch();\n  const {\n    allStockTransfer,\n    singleStockTransfer,\n    totalCount\n  } = useSelector(selectStockTransfer);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    isOpen: isDetailOpen,\n    onOpen: onDetailOpen,\n    onClose: onDetailClose\n  } = useDisclosure();\n  const [selectedStatusProps, setSelectedStatusProps] = useState({\n    status: '',\n    id: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const commentInputRef = useRef(null);\n  const [detailsProps, setDetailsProps] = useState({\n    loading: false\n  });\n  const [pageCount, setPageCount] = useState(0);\n  const [tableLoading, setTableLoading] = useState(false);\n\n  const fetchAllStock = async function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      var _response$totalCount;\n\n      setTableLoading(true);\n      const response = await dispatcher(getAllStockTranferRequest({\n        auth,\n        params\n      }));\n      params.limit = params.limit ? params.limit : 10;\n      setPageCount(Math.ceil(((_response$totalCount = response.totalCount) === null || _response$totalCount === void 0 ? void 0 : _response$totalCount.count) / params.limit));\n      dispatcher(addTotalCount(response.totalCount.count));\n      setTableLoading(false);\n    } catch (error) {\n      setTableLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAllStock();\n  }, []);\n  const columns = useMemo(() => [{\n    Header: intl.formatMessage(messages.date),\n    accessor: 'createdAt',\n    Cell: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return moment(value).format('DD/MM/YYYY');\n    }\n  }, {\n    Header: intl.formatMessage(messages.stockTransferNum),\n    accessor: row => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleViewDetails(row._id),\n      variant: \"link\",\n      children: row.transferNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this)\n  }, {\n    Header: intl.formatMessage(messages.inwardBranchCode),\n    accessor: row => {\n      var _row$sourceBranch$;\n\n      return row.sourceBranch.length > 0 ? (_row$sourceBranch$ = row.sourceBranch[0]) === null || _row$sourceBranch$ === void 0 ? void 0 : _row$sourceBranch$.branchCode : '';\n    }\n  }, {\n    Header: intl.formatMessage(messages.inwardBranchName),\n    accessor: row => {\n      var _row$sourceBranch$2;\n\n      return (_row$sourceBranch$2 = row.sourceBranch[0]) === null || _row$sourceBranch$2 === void 0 ? void 0 : _row$sourceBranch$2.branchName;\n    }\n  }, {\n    Header: intl.formatMessage(messages.outwardBranchCode),\n    accessor: row => {\n      var _row$destinationBranc;\n\n      return (_row$destinationBranc = row.destinationBranch[0]) === null || _row$destinationBranc === void 0 ? void 0 : _row$destinationBranc.branchCode;\n    }\n  }, {\n    Header: intl.formatMessage(messages.outwardBranchName),\n    accessor: row => {\n      var _row$destinationBranc2;\n\n      return (_row$destinationBranc2 = row.destinationBranch[0]) === null || _row$destinationBranc2 === void 0 ? void 0 : _row$destinationBranc2.branchName;\n    }\n  }, {\n    Header: intl.formatMessage(messages.totalPart),\n    accessor: row => totalItemFromArray(row.stock, 'quantity')\n  }, {\n    Header: intl.formatMessage(messages.partValue),\n    accessor: row => {\n      return row.stock.reduce((prev, curr) => prev + curr.price * curr.quantity, 0);\n    },\n    Cell: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: intl.formatMessage(messages.transferStatus),\n    accessor: row => ({\n      status: row.status,\n      id: row._id\n    }),\n    Cell: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(StatusComponent, {\n        onOpenCommentModal: commentModalHandler,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this);\n    }\n  }], []);\n  const partDetailsColumns = useMemo(() => [{\n    Header: 'Part Number',\n    accessor: row => {\n      var _row$part;\n\n      return (row === null || row === void 0 ? void 0 : (_row$part = row.part) === null || _row$part === void 0 ? void 0 : _row$part.length) > 0 ? row === null || row === void 0 ? void 0 : row.part[0].partNumber : '';\n    }\n  }, {\n    Header: 'Part Name',\n    accessor: row => {\n      var _row$part2;\n\n      return (row === null || row === void 0 ? void 0 : (_row$part2 = row.part) === null || _row$part2 === void 0 ? void 0 : _row$part2.length) > 0 ? row === null || row === void 0 ? void 0 : row.part[0].partName : '';\n    }\n  }, {\n    Header: 'Price',\n    accessor: 'price',\n    Cell: _ref5 => {\n      let {\n        value\n      } = _ref5;\n      return getMoneyFormat(value);\n    }\n  }, {\n    Header: 'Quantity',\n    accessor: 'quantity'\n  }]);\n  const inputData = useMemo(() => [{\n    title: 'Search Details',\n    type: 'text',\n    placeholder: '',\n    name: 'searchDetails'\n  }, {\n    title: 'Filter by Status',\n    type: 'select',\n    placeholder: 'Select option',\n    name: 'status',\n    options: [{\n      value: 'none',\n      label: 'None'\n    }, {\n      value: enums.APPROVED,\n      label: intl.formatMessage(messages.approved)\n    }, {\n      value: enums.DELIVERED,\n      label: intl.formatMessage(messages.delivered)\n    }, {\n      value: enums.REQUESTED,\n      label: intl.formatMessage(messages.requested)\n    }, {\n      value: enums.READY_TO_DISPATCH,\n      label: intl.formatMessage(messages.readyForDispatch)\n    }, {\n      value: enums.IN_TRANSIT,\n      label: intl.formatMessage(messages.inTransit)\n    }]\n  }, {\n    title: intl.formatMessage(messages.date),\n    type: 'date',\n    placeholder: 'Enter order No',\n    name: ['start', 'end'],\n    defaultValue: [moment().startOf('month').format('YYYY-MM-DD'), moment().format('YYYY-MM-DD')]\n  }], []);\n\n  const handleViewDetails = async id => {\n    setDetailsProps(prevState => ({ ...prevState,\n      loading: true\n    }));\n\n    try {\n      await dispatcher(getSingleStockTranferRequest({\n        auth,\n        id\n      }));\n      onDetailOpen();\n      setDetailsProps(prevState => ({ ...prevState,\n        loading: false\n      }));\n    } catch (error) {\n      notification({\n        status: 'error',\n        description: 'Please try again later'\n      });\n      setDetailsProps(prevState => ({ ...prevState,\n        loading: false\n      }));\n    }\n  };\n\n  const commentModalHandler = statusProps => {\n    setSelectedStatusProps(statusProps);\n    onOpen();\n  };\n\n  const handleStatusUpdate = async () => {\n    setLoading(true);\n\n    try {\n      await dispatcher(updateStockTransferStatus({\n        auth,\n        id: selectedStatusProps.id,\n        data: {\n          status: selectedStatusProps.status,\n          comments: commentInputRef.current.value\n        }\n      }));\n      await dispatcher(getAllStockTranferRequest({\n        auth\n      }));\n      setLoading(false);\n      notification({\n        status: 'success',\n        description: `Status was changed to ${selectedStatusProps.status}`\n      });\n      onClose();\n    } catch (error) {\n      setLoading(false);\n      notification({\n        status: 'error',\n        description: `Please try again later`\n      });\n    }\n  };\n\n  const handleTableTopChange = async (e, name) => {\n    setTableLoading(true);\n    let value = e.hasOwnProperty('target') ? e.target.value : e;\n\n    if (name === 'start') {\n      value = moment(value).format('YYYY-MM-DD');\n    } else if (name === 'end') {\n      value = moment(value).add(1, 'days').format('YYYY-MM-DD');\n    }\n\n    setInputValue(prevState => ({ ...prevState,\n      [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n    }));\n    fetchAllStock({ ...inputValues,\n      [name]: typeof value !== 'object' ? value : value.value === 'none' ? '' : value.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    minHeight: \"80vh\",\n    children: [/*#__PURE__*/_jsxDEV(ModifiedTableTop, {\n      inputData: inputData,\n      onChange: handleTableTopChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n      columns: columns,\n      data: allStockTransfer,\n      fetchData: fetchAllStock,\n      skipPageReset: true,\n      loading: tableLoading,\n      totalCount: totalCount,\n      controlledPageCount: pageCount,\n      params: inputValues\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n      onClose: onClose,\n      isOpen: isOpen,\n      title: \"Add Comments\",\n      size: \"sm\",\n      okText: \"Update Status\",\n      onOk: handleStatusUpdate,\n      isLoading: loading,\n      children: /*#__PURE__*/_jsxDEV(Textarea, {\n        ref: commentInputRef,\n        max: null,\n        type: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleModal, {\n      onClose: onDetailClose,\n      isOpen: isDetailOpen,\n      title: \"Requested Parts\",\n      size: \"2.5xl\",\n      isLoading: loading,\n      hidefooter: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"flex-end\",\n          mb: 4,\n          children: /*#__PURE__*/_jsxDEV(StatusComponent, {\n            onOpenCommentModal: selectedStatus => {\n              onDetailClose();\n              commentModalHandler(selectedStatus);\n            },\n            value: {\n              status: singleStockTransfer.status,\n              id: singleStockTransfer._id\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DynamicTable, {\n          columns: partDetailsColumns,\n          data: singleStockTransfer.stock,\n          fetchData: () => console.log('...fetching'),\n          skipPageReset: true,\n          loading: detailsProps.loading,\n          hidePagination: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StockTransfer, \"w6EFLpCN24glXKg62JSBE+CnWZI=\", false, function () {\n  return [useIntl, useSelector, useDispatch, useSelector, useDisclosure, useDisclosure];\n});\n\n_c = StockTransfer;\nexport default _c2 = withToast(StockTransfer);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StockTransfer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/StockTransfer/index.js"],"names":["React","useMemo","useState","useRef","useEffect","useIntl","Box","Textarea","useDisclosure","Button","Flex","useSelector","useDispatch","moment","DynamicTable","ModifiedTableTop","withToast","messages","getAllStockTranferRequest","selectStockTransfer","updateStockTransferStatus","getSingleStockTranferRequest","addTotalCount","StatusComponent","SimpleModal","enums","totalItemFromArray","getMoneyFormat","StockTransfer","notification","inputValues","setInputValue","end","add","format","start","startOf","intl","auth","state","dispatcher","allStockTransfer","singleStockTransfer","totalCount","isOpen","onOpen","onClose","isDetailOpen","onDetailOpen","onDetailClose","selectedStatusProps","setSelectedStatusProps","status","id","loading","setLoading","commentInputRef","detailsProps","setDetailsProps","pageCount","setPageCount","tableLoading","setTableLoading","fetchAllStock","params","response","limit","Math","ceil","count","error","columns","Header","formatMessage","date","accessor","Cell","value","stockTransferNum","row","handleViewDetails","_id","transferNumber","inwardBranchCode","sourceBranch","length","branchCode","inwardBranchName","branchName","outwardBranchCode","destinationBranch","outwardBranchName","totalPart","stock","partValue","reduce","prev","curr","price","quantity","transferStatus","commentModalHandler","partDetailsColumns","part","partNumber","partName","inputData","title","type","placeholder","name","options","label","APPROVED","approved","DELIVERED","delivered","REQUESTED","requested","READY_TO_DISPATCH","readyForDispatch","IN_TRANSIT","inTransit","defaultValue","prevState","description","statusProps","handleStatusUpdate","data","comments","current","handleTableTopChange","e","hasOwnProperty","target","selectedStatus","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA4D,OAA5D;AAEA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,EAAuCC,MAAvC,EAA+CC,IAA/C,QAA2D,kBAA3D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACEC,yBADF,EAEEC,mBAFF,EAGEC,yBAHF,EAIEC,4BAJF,EAKEC,aALF,QAMO,SANP;AAOA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;;AAEA,MAAMC,aAAa,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AAC1C,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+B7B,QAAQ,CAAC;AAC5C8B,IAAAA,GAAG,EAAEnB,MAAM,GAAGoB,GAAT,CAAa,CAAb,EAAgB,MAAhB,EAAwBC,MAAxB,CAA+B,YAA/B,CADuC;AAE5CC,IAAAA,KAAK,EAAEtB,MAAM,GAAGuB,OAAT,CAAiB,OAAjB,EAA0BF,MAA1B,CAAiC,YAAjC;AAFqC,GAAD,CAA7C;AAIA,QAAMG,IAAI,GAAGhC,OAAO,EAApB;AACA,QAAMiC,IAAI,GAAG3B,WAAW,CAAE4B,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,UAAU,GAAG5B,WAAW,EAA9B;AACA,QAAM;AAAE6B,IAAAA,gBAAF;AAAoBC,IAAAA,mBAApB;AAAyCC,IAAAA;AAAzC,MACJhC,WAAW,CAACQ,mBAAD,CADb;AAEA,QAAM;AAAEyB,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BtC,aAAa,EAAjD;AACA,QAAM;AACJoC,IAAAA,MAAM,EAAEG,YADJ;AAEJF,IAAAA,MAAM,EAAEG,YAFJ;AAGJF,IAAAA,OAAO,EAAEG;AAHL,MAIFzC,aAAa,EAJjB;AAKA,QAAM,CAAC0C,mBAAD,EAAsBC,sBAAtB,IAAgDjD,QAAQ,CAAC;AAC7DkD,IAAAA,MAAM,EAAE,EADqD;AAE7DC,IAAAA,EAAE,EAAE;AAFyD,GAAD,CAA9D;AAIA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrD,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMsD,eAAe,GAAGrD,MAAM,CAAC,IAAD,CAA9B;AACA,QAAM,CAACsD,YAAD,EAAeC,eAAf,IAAkCxD,QAAQ,CAAC;AAC/CoD,IAAAA,OAAO,EAAE;AADsC,GAAD,CAAhD;AAGA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4B1D,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAM,CAAC2D,YAAD,EAAeC,eAAf,IAAkC5D,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAM6D,aAAa,GAAG,kBAAuB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AAC3C,QAAI;AAAA;;AACFF,MAAAA,eAAe,CAAC,IAAD,CAAf;AACA,YAAMG,QAAQ,GAAG,MAAMzB,UAAU,CAC/BtB,yBAAyB,CAAC;AAAEoB,QAAAA,IAAF;AAAQ0B,QAAAA;AAAR,OAAD,CADM,CAAjC;AAGAA,MAAAA,MAAM,CAACE,KAAP,GAAeF,MAAM,CAACE,KAAP,GAAcF,MAAM,CAACE,KAArB,GAA6B,EAA5C;AACAN,MAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAU,yBAAAH,QAAQ,CAACtB,UAAT,8EAAqB0B,KAArB,IAA6BL,MAAM,CAACE,KAA9C,CAAD,CAAZ;AAEA1B,MAAAA,UAAU,CAAClB,aAAa,CAAC2C,QAAQ,CAACtB,UAAT,CAAoB0B,KAArB,CAAd,CAAV;AACAP,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAVD,CAUE,OAAOQ,KAAP,EAAc;AACdR,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAdD;;AAgBA1D,EAAAA,SAAS,CAAC,MAAM;AACd2D,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMQ,OAAO,GAAGtE,OAAO,CACrB,MAAM,CACJ;AACEuE,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACyD,IAA5B,CADV;AAEEC,IAAAA,QAAQ,EAAE,WAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAehE,MAAM,CAACgE,KAAD,CAAN,CAAc3C,MAAd,CAAqB,YAArB,CAAf;AAAA;AAHR,GADI,EAMJ;AACEsC,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAAC6D,gBAA5B,CADV;AAEEH,IAAAA,QAAQ,EAAGI,GAAD,iBACR,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMC,iBAAiB,CAACD,GAAG,CAACE,GAAL,CAAxC;AAAmD,MAAA,OAAO,EAAC,MAA3D;AAAA,gBACGF,GAAG,CAACG;AADP;AAAA;AAAA;AAAA;AAAA;AAHJ,GANI,EAcJ;AACEV,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACkE,gBAA5B,CADV;AAEER,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,aACRA,GAAG,CAACK,YAAJ,CAAiBC,MAAjB,GAA0B,CAA1B,yBAA8BN,GAAG,CAACK,YAAJ,CAAiB,CAAjB,CAA9B,uDAA8B,mBAAqBE,UAAnD,GAAgE,EADxD;AAAA;AAFZ,GAdI,EAmBJ;AACEd,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACsE,gBAA5B,CADV;AAEEZ,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,oCAASA,GAAG,CAACK,YAAJ,CAAiB,CAAjB,CAAT,wDAAS,oBAAqBI,UAA9B;AAAA;AAFZ,GAnBI,EAuBJ;AACEhB,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACwE,iBAA5B,CADV;AAEEd,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,sCAASA,GAAG,CAACW,iBAAJ,CAAsB,CAAtB,CAAT,0DAAS,sBAA0BJ,UAAnC;AAAA;AAFZ,GAvBI,EA2BJ;AACEd,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAAC0E,iBAA5B,CADV;AAEEhB,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,uCAASA,GAAG,CAACW,iBAAJ,CAAsB,CAAtB,CAAT,2DAAS,uBAA0BF,UAAnC;AAAA;AAFZ,GA3BI,EA+BJ;AACEhB,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAAC2E,SAA5B,CADV;AAEEjB,IAAAA,QAAQ,EAAGI,GAAD,IAASrD,kBAAkB,CAACqD,GAAG,CAACc,KAAL,EAAY,UAAZ;AAFvC,GA/BI,EAmCJ;AACErB,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAAC6E,SAA5B,CADV;AAEEnB,IAAAA,QAAQ,EAAGI,GAAD,IAAS;AACjB,aAAOA,GAAG,CAACc,KAAJ,CAAUE,MAAV,CACL,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACE,QADpC,EAEL,CAFK,CAAP;AAID,KAPH;AAQEvB,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAelD,cAAc,CAACkD,KAAD,CAA7B;AAAA;AARR,GAnCI,EA6CJ;AACEL,IAAAA,MAAM,EAAEnC,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACmF,cAA5B,CADV;AAEEzB,IAAAA,QAAQ,EAAGI,GAAD,KAAU;AAAE3B,MAAAA,MAAM,EAAE2B,GAAG,CAAC3B,MAAd;AAAsBC,MAAAA,EAAE,EAAE0B,GAAG,CAACE;AAA9B,KAAV,CAFZ;AAGEL,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,0BACJ,QAAC,eAAD;AACE,QAAA,kBAAkB,EAAEwB,mBADtB;AAEE,QAAA,KAAK,EAAExB;AAFT;AAAA;AAAA;AAAA;AAAA,cADI;AAAA;AAHR,GA7CI,CADe,EAyDrB,EAzDqB,CAAvB;AA4DA,QAAMyB,kBAAkB,GAAGrG,OAAO,CAAC,MAAM,CACvC;AACEuE,IAAAA,MAAM,EAAE,aADV;AAEEG,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,aAAS,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,yBAAAA,GAAG,CAAEwB,IAAL,wDAAWlB,MAAX,IAAoB,CAApB,GAAuBN,GAAvB,aAAuBA,GAAvB,uBAAuBA,GAAG,CAAEwB,IAAL,CAAU,CAAV,EAAaC,UAApC,GAAiD,EAA1D;AAAA;AAFZ,GADuC,EAKvC;AACEhC,IAAAA,MAAM,EAAE,WADV;AAEEG,IAAAA,QAAQ,EAAGI,GAAD;AAAA;;AAAA,aAAS,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,0BAAAA,GAAG,CAAEwB,IAAL,0DAAWlB,MAAX,IAAoB,CAApB,GAAuBN,GAAvB,aAAuBA,GAAvB,uBAAuBA,GAAG,CAAEwB,IAAL,CAAU,CAAV,EAAaE,QAApC,GAA+C,EAAxD;AAAA;AAFZ,GALuC,EASvC;AACEjC,IAAAA,MAAM,EAAE,OADV;AAEEG,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAelD,cAAc,CAACkD,KAAD,CAA7B;AAAA;AAHR,GATuC,EAcvC;AACEL,IAAAA,MAAM,EAAE,UADV;AAEEG,IAAAA,QAAQ,EAAE;AAFZ,GAduC,CAAP,CAAlC;AAoBA,QAAM+B,SAAS,GAAGzG,OAAO,CACvB,MAAM,CACJ;AACE0G,IAAAA,KAAK,EAAE,gBADT;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,WAAW,EAAE,EAHf;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADI,EAOJ;AACEH,IAAAA,KAAK,EAAE,kBADT;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,WAAW,EAAE,eAHf;AAIEC,IAAAA,IAAI,EAAE,QAJR;AAKEC,IAAAA,OAAO,EAAE,CACP;AACElC,MAAAA,KAAK,EAAE,MADT;AAEEmC,MAAAA,KAAK,EAAE;AAFT,KADO,EAKP;AACEnC,MAAAA,KAAK,EAAEpD,KAAK,CAACwF,QADf;AAEED,MAAAA,KAAK,EAAE3E,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACiG,QAA5B;AAFT,KALO,EASP;AACErC,MAAAA,KAAK,EAAEpD,KAAK,CAAC0F,SADf;AAEEH,MAAAA,KAAK,EAAE3E,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACmG,SAA5B;AAFT,KATO,EAaP;AACEvC,MAAAA,KAAK,EAAEpD,KAAK,CAAC4F,SADf;AAEEL,MAAAA,KAAK,EAAE3E,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACqG,SAA5B;AAFT,KAbO,EAiBP;AACEzC,MAAAA,KAAK,EAAEpD,KAAK,CAAC8F,iBADf;AAEEP,MAAAA,KAAK,EAAE3E,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACuG,gBAA5B;AAFT,KAjBO,EAqBP;AACE3C,MAAAA,KAAK,EAAEpD,KAAK,CAACgG,UADf;AAEET,MAAAA,KAAK,EAAE3E,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACyG,SAA5B;AAFT,KArBO;AALX,GAPI,EAuCJ;AACEf,IAAAA,KAAK,EAAEtE,IAAI,CAACoC,aAAL,CAAmBxD,QAAQ,CAACyD,IAA5B,CADT;AAEEkC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,WAAW,EAAE,gBAHf;AAIEC,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,KAAV,CAJR;AAKEa,IAAAA,YAAY,EAAE,CACZ9G,MAAM,GAAGuB,OAAT,CAAiB,OAAjB,EAA0BF,MAA1B,CAAiC,YAAjC,CADY,EAEZrB,MAAM,GAAGqB,MAAT,CAAgB,YAAhB,CAFY;AALhB,GAvCI,CADiB,EAmDvB,EAnDuB,CAAzB;;AAsDA,QAAM8C,iBAAiB,GAAG,MAAO3B,EAAP,IAAc;AACtCK,IAAAA,eAAe,CAAEkE,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBtE,MAAAA,OAAO,EAAE;AAAzB,KAAhB,CAAD,CAAf;;AACA,QAAI;AACF,YAAMd,UAAU,CAACnB,4BAA4B,CAAC;AAAEiB,QAAAA,IAAF;AAAQe,QAAAA;AAAR,OAAD,CAA7B,CAAhB;AACAL,MAAAA,YAAY;AACZU,MAAAA,eAAe,CAAEkE,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBtE,QAAAA,OAAO,EAAE;AAAzB,OAAhB,CAAD,CAAf;AACD,KAJD,CAIE,OAAOgB,KAAP,EAAc;AACdzC,MAAAA,YAAY,CAAC;AAAEuB,QAAAA,MAAM,EAAE,OAAV;AAAmByE,QAAAA,WAAW,EAAE;AAAhC,OAAD,CAAZ;AACAnE,MAAAA,eAAe,CAAEkE,SAAD,KAAgB,EAAE,GAAGA,SAAL;AAAgBtE,QAAAA,OAAO,EAAE;AAAzB,OAAhB,CAAD,CAAf;AACD;AACF,GAVD;;AAYA,QAAM+C,mBAAmB,GAAIyB,WAAD,IAAiB;AAC3C3E,IAAAA,sBAAsB,CAAC2E,WAAD,CAAtB;AACAjF,IAAAA,MAAM;AACP,GAHD;;AAKA,QAAMkF,kBAAkB,GAAG,YAAY;AACrCxE,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMf,UAAU,CACdpB,yBAAyB,CAAC;AACxBkB,QAAAA,IADwB;AAExBe,QAAAA,EAAE,EAAEH,mBAAmB,CAACG,EAFA;AAGxB2E,QAAAA,IAAI,EAAE;AACJ5E,UAAAA,MAAM,EAAEF,mBAAmB,CAACE,MADxB;AAEJ6E,UAAAA,QAAQ,EAAEzE,eAAe,CAAC0E,OAAhB,CAAwBrD;AAF9B;AAHkB,OAAD,CADX,CAAhB;AAUA,YAAMrC,UAAU,CAACtB,yBAAyB,CAAC;AAAEoB,QAAAA;AAAF,OAAD,CAA1B,CAAhB;AACAiB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA1B,MAAAA,YAAY,CAAC;AACXuB,QAAAA,MAAM,EAAE,SADG;AAEXyE,QAAAA,WAAW,EAAG,yBAAwB3E,mBAAmB,CAACE,MAAO;AAFtD,OAAD,CAAZ;AAIAN,MAAAA,OAAO;AACR,KAlBD,CAkBE,OAAOwB,KAAP,EAAc;AACdf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA1B,MAAAA,YAAY,CAAC;AAAEuB,QAAAA,MAAM,EAAE,OAAV;AAAmByE,QAAAA,WAAW,EAAG;AAAjC,OAAD,CAAZ;AACD;AACF,GAxBD;;AA0BA,QAAMM,oBAAoB,GAAG,OAAOC,CAAP,EAAUtB,IAAV,KAAmB;AAC9ChD,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,QAAIe,KAAK,GAAGuD,CAAC,CAACC,cAAF,CAAiB,QAAjB,IAA6BD,CAAC,CAACE,MAAF,CAASzD,KAAtC,GAA8CuD,CAA1D;;AACA,QAAItB,IAAI,KAAK,OAAb,EAAsB;AACpBjC,MAAAA,KAAK,GAAGhE,MAAM,CAACgE,KAAD,CAAN,CAAc3C,MAAd,CAAqB,YAArB,CAAR;AACD,KAFD,MAEO,IAAI4E,IAAI,KAAK,KAAb,EAAoB;AACzBjC,MAAAA,KAAK,GAAGhE,MAAM,CAACgE,KAAD,CAAN,CAAc5C,GAAd,CAAkB,CAAlB,EAAqB,MAArB,EAA6BC,MAA7B,CAAoC,YAApC,CAAR;AACD;;AAEDH,IAAAA,aAAa,CAAE6F,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5B,OAACd,IAAD,GACE,OAAOjC,KAAP,KAAiB,QAAjB,GACIA,KADJ,GAEIA,KAAK,CAACA,KAAN,KAAgB,MAAhB,GACA,EADA,GAEAA,KAAK,CAACA;AAPgB,KAAhB,CAAD,CAAb;AAWEd,IAAAA,aAAa,CAAC,EACZ,GAAGjC,WADS;AAEZ,OAACgF,IAAD,GACE,OAAOjC,KAAP,KAAiB,QAAjB,GACIA,KADJ,GAEIA,KAAK,CAACA,KAAN,KAAgB,MAAhB,GACA,EADA,GAEAA,KAAK,CAACA;AAPA,KAAD,CAAb;AAWH,GA/BD;;AAiCA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,SAAS,EAAE6B,SAA7B;AAAwC,MAAA,QAAQ,EAAEyB;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,OAAO,EAAE5D,OADX;AAEE,MAAA,IAAI,EAAE9B,gBAFR;AAGE,MAAA,SAAS,EAAEsB,aAHb;AAIE,MAAA,aAAa,EAAE,IAJjB;AAKE,MAAA,OAAO,EAAEF,YALX;AAME,MAAA,UAAU,EAAElB,UANd;AAOE,MAAA,mBAAmB,EAAEgB,SAPvB;AAQE,MAAA,MAAM,EAAE7B;AARV;AAAA;AAAA;AAAA;AAAA,YAFF,eAYE,QAAC,WAAD;AACE,MAAA,OAAO,EAAEgB,OADX;AAEE,MAAA,MAAM,EAAEF,MAFV;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,IAAI,EAAC,IAJP;AAKE,MAAA,MAAM,EAAC,eALT;AAME,MAAA,IAAI,EAAEmF,kBANR;AAOE,MAAA,SAAS,EAAEzE,OAPb;AAAA,6BASE,QAAC,QAAD;AAAU,QAAA,GAAG,EAAEE,eAAf;AAAgC,QAAA,GAAG,EAAE,IAArC;AAA2C,QAAA,IAAI,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,YAZF,eAuBE,QAAC,WAAD;AACE,MAAA,OAAO,EAAEP,aADX;AAEE,MAAA,MAAM,EAAEF,YAFV;AAGE,MAAA,KAAK,EAAC,iBAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,SAAS,EAAEO,OALb;AAME,MAAA,UAAU,MANZ;AAAA,6BAQE,QAAC,GAAD;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,cAAc,EAAC,UAArB;AAAgC,UAAA,EAAE,EAAE,CAApC;AAAA,iCACE,QAAC,eAAD;AACE,YAAA,kBAAkB,EAAGiF,cAAD,IAAoB;AACtCtF,cAAAA,aAAa;AACboD,cAAAA,mBAAmB,CAACkC,cAAD,CAAnB;AACD,aAJH;AAKE,YAAA,KAAK,EAAE;AACLnF,cAAAA,MAAM,EAAEV,mBAAmB,CAACU,MADvB;AAELC,cAAAA,EAAE,EAAEX,mBAAmB,CAACuC;AAFnB;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE,QAAC,YAAD;AACE,UAAA,OAAO,EAAEqB,kBADX;AAEE,UAAA,IAAI,EAAE5D,mBAAmB,CAACmD,KAF5B;AAGE,UAAA,SAAS,EAAE,MAAM2C,OAAO,CAACC,GAAR,CAAY,aAAZ,CAHnB;AAIE,UAAA,aAAa,EAAE,IAJjB;AAKE,UAAA,OAAO,EAAEhF,YAAY,CAACH,OALxB;AAME,UAAA,cAAc,EAAE;AANlB;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyDD,CA5TD;;GAAM1B,a;UAKSvB,O,EACAM,W,EACMC,W,EAEjBD,W,EACkCH,a,EAKhCA,a;;;KAfAoB,a;AA8TN,qBAAeZ,SAAS,CAACY,aAAD,CAAxB","sourcesContent":["import React, { useMemo, useState, useRef, useEffect } from 'react';\r\n\r\nimport { useIntl } from 'react-intl';\r\nimport { Box, Textarea, useDisclosure, Button, Flex } from '@chakra-ui/react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport DynamicTable from '../../components/DynamicTable';\r\nimport ModifiedTableTop from '../../components/TableTop/ModifiedTableTop';\r\nimport withToast from '../../HOCs/withToast';\r\nimport messages from './messages';\r\nimport {\r\n  getAllStockTranferRequest,\r\n  selectStockTransfer,\r\n  updateStockTransferStatus,\r\n  getSingleStockTranferRequest,\r\n  addTotalCount\r\n} from './slice';\r\nimport StatusComponent from './StatusComponent';\r\nimport SimpleModal from '../../components/Modal';\r\nimport enums from '../../utils/enums';\r\nimport totalItemFromArray from '../../utils/getTotalFromArray';\r\nimport getMoneyFormat from '../../utils/getMoneyFormat';\r\n\r\nconst StockTransfer = ({ notification }) => {\r\n  const [inputValues, setInputValue] = useState({\r\n    end: moment().add(1, 'days').format('YYYY-MM-DD'),\r\n    start: moment().startOf('month').format('YYYY-MM-DD'),\r\n  });\r\n  const intl = useIntl();\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatcher = useDispatch();\r\n  const { allStockTransfer, singleStockTransfer, totalCount } =\r\n    useSelector(selectStockTransfer);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const {\r\n    isOpen: isDetailOpen,\r\n    onOpen: onDetailOpen,\r\n    onClose: onDetailClose,\r\n  } = useDisclosure();\r\n  const [selectedStatusProps, setSelectedStatusProps] = useState({\r\n    status: '',\r\n    id: '',\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const commentInputRef = useRef(null);\r\n  const [detailsProps, setDetailsProps] = useState({\r\n    loading: false,\r\n  });\r\n  const [pageCount, setPageCount] = useState(0);\r\n\r\n  const [tableLoading, setTableLoading] = useState(false);\r\n\r\n  const fetchAllStock = async (params = {}) => {\r\n    try {\r\n      setTableLoading(true);\r\n      const response = await dispatcher(\r\n        getAllStockTranferRequest({ auth, params}),\r\n      );\r\n      params.limit = params.limit? params.limit : 10;\r\n      setPageCount(Math.ceil(response.totalCount?.count / params.limit));\r\n\r\n      dispatcher(addTotalCount(response.totalCount.count));\r\n      setTableLoading(false);\r\n    } catch (error) {\r\n      setTableLoading(false);\r\n    }\r\n  }\r\n \r\n  useEffect(() => {\r\n    fetchAllStock()\r\n  }, []);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: intl.formatMessage(messages.date),\r\n        accessor: 'createdAt',\r\n        Cell: ({ value }) => moment(value).format('DD/MM/YYYY'),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.stockTransferNum),\r\n        accessor: (row) => (\r\n          <Button onClick={() => handleViewDetails(row._id)} variant='link'>\r\n            {row.transferNumber}\r\n          </Button>\r\n        ),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.inwardBranchCode),\r\n        accessor: (row) =>\r\n          row.sourceBranch.length > 0 ? row.sourceBranch[0]?.branchCode : '',\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.inwardBranchName),\r\n        accessor: (row) => row.sourceBranch[0]?.branchName,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.outwardBranchCode),\r\n        accessor: (row) => row.destinationBranch[0]?.branchCode,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.outwardBranchName),\r\n        accessor: (row) => row.destinationBranch[0]?.branchName,\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.totalPart),\r\n        accessor: (row) => totalItemFromArray(row.stock, 'quantity'),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.partValue),\r\n        accessor: (row) => {\r\n          return row.stock.reduce(\r\n            (prev, curr) => prev + curr.price * curr.quantity,\r\n            0,\r\n          );\r\n        },\r\n        Cell: ({ value }) => getMoneyFormat(value),\r\n      },\r\n      {\r\n        Header: intl.formatMessage(messages.transferStatus),\r\n        accessor: (row) => ({ status: row.status, id: row._id }),\r\n        Cell: ({ value }) => (\r\n          <StatusComponent\r\n            onOpenCommentModal={commentModalHandler}\r\n            value={value}\r\n          />\r\n        ),\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const partDetailsColumns = useMemo(() => [\r\n    {\r\n      Header: 'Part Number',\r\n      accessor: (row) => row?.part?.length > 0? row?.part[0].partNumber : '',\r\n    },\r\n    {\r\n      Header: 'Part Name',\r\n      accessor: (row) => row?.part?.length > 0? row?.part[0].partName : '',\r\n    },\r\n    {\r\n      Header: 'Price',\r\n      accessor: 'price',\r\n      Cell: ({ value }) => getMoneyFormat(value),\r\n    },\r\n    {\r\n      Header: 'Quantity',\r\n      accessor: 'quantity',\r\n    },\r\n  ]);\r\n\r\n  const inputData = useMemo(\r\n    () => [\r\n      {\r\n        title: 'Search Details',\r\n        type: 'text',\r\n        placeholder: '',\r\n        name: 'searchDetails',\r\n      },\r\n      {\r\n        title: 'Filter by Status',\r\n        type: 'select',\r\n        placeholder: 'Select option',\r\n        name: 'status',\r\n        options: [\r\n          {\r\n            value: 'none',\r\n            label: 'None',\r\n          },\r\n          {\r\n            value: enums.APPROVED,\r\n            label: intl.formatMessage(messages.approved),\r\n          },\r\n          {\r\n            value: enums.DELIVERED,\r\n            label: intl.formatMessage(messages.delivered),\r\n          },\r\n          {\r\n            value: enums.REQUESTED,\r\n            label: intl.formatMessage(messages.requested),\r\n          },\r\n          {\r\n            value: enums.READY_TO_DISPATCH,\r\n            label: intl.formatMessage(messages.readyForDispatch),\r\n          },\r\n          {\r\n            value: enums.IN_TRANSIT,\r\n            label: intl.formatMessage(messages.inTransit),\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        title: intl.formatMessage(messages.date),\r\n        type: 'date',\r\n        placeholder: 'Enter order No',\r\n        name: ['start', 'end'],\r\n        defaultValue: [\r\n          moment().startOf('month').format('YYYY-MM-DD'),\r\n          moment().format('YYYY-MM-DD'),\r\n        ],\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const handleViewDetails = async (id) => {\r\n    setDetailsProps((prevState) => ({ ...prevState, loading: true }));\r\n    try {\r\n      await dispatcher(getSingleStockTranferRequest({ auth, id }));\r\n      onDetailOpen();\r\n      setDetailsProps((prevState) => ({ ...prevState, loading: false }));\r\n    } catch (error) {\r\n      notification({ status: 'error', description: 'Please try again later' });\r\n      setDetailsProps((prevState) => ({ ...prevState, loading: false }));\r\n    }\r\n  };\r\n\r\n  const commentModalHandler = (statusProps) => {\r\n    setSelectedStatusProps(statusProps);\r\n    onOpen();\r\n  };\r\n\r\n  const handleStatusUpdate = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await dispatcher(\r\n        updateStockTransferStatus({\r\n          auth,\r\n          id: selectedStatusProps.id,\r\n          data: {\r\n            status: selectedStatusProps.status,\r\n            comments: commentInputRef.current.value,\r\n          },\r\n        }),\r\n      );\r\n      await dispatcher(getAllStockTranferRequest({ auth }));\r\n      setLoading(false);\r\n      notification({\r\n        status: 'success',\r\n        description: `Status was changed to ${selectedStatusProps.status}`,\r\n      });\r\n      onClose();\r\n    } catch (error) {\r\n      setLoading(false);\r\n      notification({ status: 'error', description: `Please try again later` });\r\n    }\r\n  };\r\n\r\n  const handleTableTopChange = async (e, name) => {\r\n    setTableLoading(true);\r\n    let value = e.hasOwnProperty('target') ? e.target.value : e;\r\n    if (name === 'start') {\r\n      value = moment(value).format('YYYY-MM-DD');\r\n    } else if (name === 'end') {\r\n      value = moment(value).add(1, 'days').format('YYYY-MM-DD');\r\n    }\r\n\r\n    setInputValue((prevState) => ({\r\n      ...prevState,\r\n      [name]:\r\n        typeof value !== 'object'\r\n          ? value\r\n          : value.value === 'none'\r\n          ? ''\r\n          : value.value,\r\n    }));\r\n      \r\n\r\n      fetchAllStock({\r\n        ...inputValues,\r\n        [name]:\r\n          typeof value !== 'object'\r\n            ? value\r\n            : value.value === 'none'\r\n            ? ''\r\n            : value.value,\r\n      });\r\n\r\n   \r\n  };\r\n\r\n  return (\r\n    <Box minHeight='80vh'>\r\n      <ModifiedTableTop inputData={inputData} onChange={handleTableTopChange} />\r\n      <DynamicTable\r\n        columns={columns}\r\n        data={allStockTransfer}\r\n        fetchData={fetchAllStock}\r\n        skipPageReset={true}\r\n        loading={tableLoading}\r\n        totalCount={totalCount}\r\n        controlledPageCount={pageCount}\r\n        params={inputValues}\r\n      />\r\n      <SimpleModal\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        title='Add Comments'\r\n        size='sm'\r\n        okText='Update Status'\r\n        onOk={handleStatusUpdate}\r\n        isLoading={loading}\r\n      >\r\n        <Textarea ref={commentInputRef} max={null} type='description' />\r\n      </SimpleModal>\r\n      <SimpleModal\r\n        onClose={onDetailClose}\r\n        isOpen={isDetailOpen}\r\n        title='Requested Parts'\r\n        size='2.5xl'\r\n        isLoading={loading}\r\n        hidefooter\r\n      >\r\n        <Box>\r\n          <Flex justifyContent='flex-end' mb={4}>\r\n            <StatusComponent\r\n              onOpenCommentModal={(selectedStatus) => {\r\n                onDetailClose();\r\n                commentModalHandler(selectedStatus);\r\n              }}\r\n              value={{\r\n                status: singleStockTransfer.status,\r\n                id: singleStockTransfer._id,\r\n              }}\r\n            />\r\n          </Flex>\r\n          <DynamicTable\r\n            columns={partDetailsColumns}\r\n            data={singleStockTransfer.stock}\r\n            fetchData={() => console.log('...fetching')}\r\n            skipPageReset={true}\r\n            loading={detailsProps.loading}\r\n            hidePagination={true}\r\n          />\r\n        </Box>\r\n      </SimpleModal>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withToast(StockTransfer);\r\n"]},"metadata":{},"sourceType":"module"}