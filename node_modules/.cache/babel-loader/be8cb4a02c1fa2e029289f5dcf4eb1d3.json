{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Services from './services';\nconst collectionsAcctSlice = createSlice({\n  name: 'collectionsAcctSlice',\n  initialState: {\n    collectionsAcctList: [],\n    workshopCollection: [],\n    workshopCollectionList: []\n  },\n  reducers: {\n    addCollectionsAcct: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.collectionsAcctList = payload;\n    },\n    addWorkshopCollection: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.workshopCollection = payload;\n    },\n    addWorkshopCollectionList: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.workshopCollectionList = payload;\n    }\n  }\n});\nexport const {\n  addWorkshopCollectionList,\n  addWorkshopCollection,\n  addCollectionsAcct\n} = collectionsAcctSlice.actions;\nexport const fetchAllCollections = payload => dispatcher => {\n  return Services.fetchAllCollectionsAcct(payload).then(response => {\n    var _Object$values;\n\n    const data = (_Object$values = Object.values(response.data)) === null || _Object$values === void 0 ? void 0 : _Object$values.map((el, index) => {\n      return { ...el,\n        code: Object.keys(response.data)[index]\n      };\n    });\n    dispatcher(addCollectionsAcct(data));\n    return Promise.resolve(data);\n  }, error => {\n    if (error.response) {\n      return Promise.reject(error.response.data);\n    }\n  });\n};\nexport const getWorkshopCollections = payload => dispatcher => {\n  return Services.fetchWorkshopCollections(payload).then(response => {\n    dispatcher(addWorkshopCollection([response.data.workshopCollections]));\n    dispatcher(addWorkshopCollectionList(response.data.accounts));\n    return Promise.resolve(response.data);\n  });\n};\nexport const selectCollectionsAcct = state => state.collectionsAcct;\nexport default collectionsAcctSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/CollectionsAccount/slice.js"],"names":["createSlice","Services","collectionsAcctSlice","name","initialState","collectionsAcctList","workshopCollection","workshopCollectionList","reducers","addCollectionsAcct","state","payload","addWorkshopCollection","addWorkshopCollectionList","actions","fetchAllCollections","dispatcher","fetchAllCollectionsAcct","then","response","data","Object","values","map","el","index","code","keys","Promise","resolve","error","reject","getWorkshopCollections","fetchWorkshopCollections","workshopCollections","accounts","selectCollectionsAcct","collectionsAcct","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,oBAAoB,GAAGF,WAAW,CAAC;AACrCG,EAAAA,IAAI,EAAE,sBAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,mBAAmB,EAAE,EADX;AAEVC,IAAAA,kBAAkB,EAAE,EAFV;AAGVC,IAAAA,sBAAsB,EAAE;AAHd,GAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AACtCD,MAAAA,KAAK,CAACL,mBAAN,GAA4BM,OAA5B;AACH,KAHK;AAINC,IAAAA,qBAAqB,EAAE,CAACF,KAAD,YAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AACzCD,MAAAA,KAAK,CAACJ,kBAAN,GAA2BK,OAA3B;AACH,KANK;AAONE,IAAAA,yBAAyB,EAAE,CAACH,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAC/CD,MAAAA,KAAK,CAACH,sBAAN,GAA+BI,OAA/B;AACH;AATK;AAP2B,CAAD,CAAxC;AAsBA,OAAO,MAAM;AAAEE,EAAAA,yBAAF;AAA6BD,EAAAA,qBAA7B;AAAoDH,EAAAA;AAApD,IAA2EP,oBAAoB,CAACY,OAAtG;AAEP,OAAO,MAAMC,mBAAmB,GAAIJ,OAAD,IAAaK,UAAU,IAAI;AAC1D,SAAOf,QAAQ,CAACgB,uBAAT,CAAiCN,OAAjC,EAA0CO,IAA1C,CACHC,QAAQ,IAAI;AAAA;;AACR,UAAMC,IAAI,qBAAGC,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACC,IAAvB,CAAH,mDAAG,eAA8BG,GAA9B,CAAkC,CAACC,EAAD,EAAIC,KAAJ,KAAc;AACzD,aAAO,EAAC,GAAGD,EAAJ;AAAQE,QAAAA,IAAI,EAAEL,MAAM,CAACM,IAAP,CAAYR,QAAQ,CAACC,IAArB,EAA2BK,KAA3B;AAAd,OAAP;AACH,KAFY,CAAb;AAIAT,IAAAA,UAAU,CAACP,kBAAkB,CAACW,IAAD,CAAnB,CAAV;AACA,WAAOQ,OAAO,CAACC,OAAR,CAAgBT,IAAhB,CAAP;AACH,GARE,EASHU,KAAK,IAAI;AACL,QAAGA,KAAK,CAACX,QAAT,EAAkB;AACd,aAAOS,OAAO,CAACG,MAAR,CAAeD,KAAK,CAACX,QAAN,CAAeC,IAA9B,CAAP;AACH;AACJ,GAbE,CAAP;AAeH,CAhBM;AAkBP,OAAO,MAAMY,sBAAsB,GAAIrB,OAAD,IAAaK,UAAU,IAAI;AAC7D,SAAOf,QAAQ,CAACgC,wBAAT,CAAkCtB,OAAlC,EAA2CO,IAA3C,CACHC,QAAQ,IAAI;AACRH,IAAAA,UAAU,CAACJ,qBAAqB,CAAC,CAACO,QAAQ,CAACC,IAAT,CAAcc,mBAAf,CAAD,CAAtB,CAAV;AACAlB,IAAAA,UAAU,CAACH,yBAAyB,CAACM,QAAQ,CAACC,IAAT,CAAce,QAAf,CAA1B,CAAV;AACA,WAAOP,OAAO,CAACC,OAAR,CAAgBV,QAAQ,CAACC,IAAzB,CAAP;AAEH,GANE,CAAP;AAQH,CATM;AAWP,OAAO,MAAMgB,qBAAqB,GAAG1B,KAAK,IAAIA,KAAK,CAAC2B,eAA7C;AAEP,eAAenC,oBAAoB,CAACoC,OAApC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport Services from './services';\r\n\r\nconst collectionsAcctSlice = createSlice({\r\n    name: 'collectionsAcctSlice',\r\n    initialState: {\r\n        collectionsAcctList: [],\r\n        workshopCollection: [],\r\n        workshopCollectionList: []\r\n    },\r\n    reducers: {\r\n        addCollectionsAcct: (state, {payload}) => {\r\n            state.collectionsAcctList = payload;\r\n        },\r\n        addWorkshopCollection: (state, {payload}) => {\r\n            state.workshopCollection = payload;\r\n        },\r\n        addWorkshopCollectionList: (state, { payload }) => {\r\n            state.workshopCollectionList = payload;\r\n        }\r\n    },\r\n    \r\n   \r\n})\r\n\r\nexport const { addWorkshopCollectionList, addWorkshopCollection, addCollectionsAcct } = collectionsAcctSlice.actions;\r\n\r\nexport const fetchAllCollections = (payload) => dispatcher => {\r\n    return Services.fetchAllCollectionsAcct(payload).then(\r\n        response => {\r\n            const data = Object.values(response.data)?.map((el,index )=> {\r\n                return {...el, code: Object.keys(response.data)[index]}\r\n            })\r\n\r\n            dispatcher(addCollectionsAcct(data));\r\n            return Promise.resolve(data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getWorkshopCollections = (payload) => dispatcher => {\r\n    return Services.fetchWorkshopCollections(payload).then(\r\n        response => {\r\n            dispatcher(addWorkshopCollection([response.data.workshopCollections]));\r\n            dispatcher(addWorkshopCollectionList(response.data.accounts));\r\n            return Promise.resolve(response.data);\r\n\r\n        }\r\n    )\r\n}\r\n\r\nexport const selectCollectionsAcct = state => state.collectionsAcct;\r\n\r\nexport default collectionsAcctSlice.reducer;"]},"metadata":{},"sourceType":"module"}