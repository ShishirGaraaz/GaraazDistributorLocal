{"ast":null,"code":"import { Konva } from './Global.js';\nimport { Util } from './Util.js';\n\nfunction _formatValue(val) {\n  if (Util._isString(val)) {\n    return '\"' + val + '\"';\n  }\n\n  if (Object.prototype.toString.call(val) === '[object Number]') {\n    return val;\n  }\n\n  if (Util._isBoolean(val)) {\n    return val;\n  }\n\n  return Object.prototype.toString.call(val);\n}\n\nexport function RGBComponent(val) {\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  }\n\n  return Math.round(val);\n}\nexport function alphaComponent(val) {\n  if (val > 1) {\n    return 1;\n  } else if (val < 0.0001) {\n    return 0.0001;\n  }\n\n  return val;\n}\nexport function getNumberValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isNumber(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberOrArrayOfNumbersValidator(noOfElements) {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      let isNumber = Util._isNumber(val);\n\n      let isValidArray = Util._isArray(val) && val.length == noOfElements;\n\n      if (!isNumber && !isValidArray) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number or Array<number>(' + noOfElements + ')');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberOrAutoValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      var isNumber = Util._isNumber(val);\n\n      var isAuto = val === 'auto';\n\n      if (!(isNumber || isAuto)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a number or \"auto\".');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getStringValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isString(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a string.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getStringOrGradientValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      const isString = Util._isString(val);\n\n      const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' || val && val.addColorStop;\n\n      if (!(isString || isGradient)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a string or a native gradient.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getFunctionValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isFunction(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a function.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getNumberArrayValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util._isArray(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a array of numbers.');\n      } else {\n        val.forEach(function (item) {\n          if (!Util._isNumber(item)) {\n            Util.warn('\"' + attr + '\" attribute has non numeric element ' + item + '. Make sure that all elements are numbers.');\n          }\n        });\n      }\n\n      return val;\n    };\n  }\n}\nexport function getBooleanValidator() {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      var isBool = val === true || val === false;\n\n      if (!isBool) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be a boolean.');\n      }\n\n      return val;\n    };\n  }\n}\nexport function getComponentValidator(components) {\n  if (Konva.isUnminified) {\n    return function (val, attr) {\n      if (!Util.isObject(val)) {\n        Util.warn(_formatValue(val) + ' is a not valid value for \"' + attr + '\" attribute. The value should be an object with properties ' + components);\n      }\n\n      return val;\n    };\n  }\n}","map":{"version":3,"sources":["../src/Validators.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,aAAtB;AACA,SAAS,IAAT,QAAqB,WAArB;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAA8B;AAC5B,MAAI,IAAI,CAAC,SAAL,CAAe,GAAf,CAAJ,EAAyB;AACvB,WAAO,MAAM,GAAN,GAAY,GAAnB;AACD;;AACD,MAAI,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,MAAwC,iBAA5C,EAA+D;AAC7D,WAAO,GAAP;AACD;;AACD,MAAI,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,WAAO,GAAP;AACD;;AACD,SAAO,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,CAAP;AACD;;AAED,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAkC;AACtC,MAAI,GAAG,GAAG,GAAV,EAAe;AACb,WAAO,GAAP;AACD,GAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAClB,WAAO,CAAP;AACD;;AACD,SAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD;AACD,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoC;AACxC,MAAI,GAAG,GAAG,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,GAAG,GAAG,MAAV,EAAkB;AAEvB,WAAO,MAAP;AACD;;AAED,SAAO,GAAP;AACD;AAED,OAAM,SAAU,kBAAV,GAA4B;AAChC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAa,GAAb,EAAqB,IAArB,EAAiC;AACtC,UAAI,CAAC,IAAI,CAAC,SAAL,CAAe,GAAf,CAAL,EAA0B;AACxB,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,4CAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAVD;AAWD;AACF;AAED,OAAM,SAAU,kCAAV,CAA6C,YAA7C,EAAiE;AACrE,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAa,GAAb,EAAqB,IAArB,EAAiC;AACtC,UAAI,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,GAAf,CAAf;;AACA,UAAI,YAAY,GAAG,IAAI,CAAC,QAAL,CAAc,GAAd,KAAsB,GAAG,CAAC,MAAJ,IAAc,YAAvD;;AACA,UAAI,CAAC,QAAD,IAAa,CAAC,YAAlB,EAAgC;AAC9B,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,6DAHF,GAIE,YAJF,GAKE,GANJ;AAQD;;AACD,aAAO,GAAP;AACD,KAdD;AAeD;AACF;AAED,OAAM,SAAU,wBAAV,GAAkC;AACtC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAA4B,GAA5B,EAAoC,IAApC,EAAgD;AACrD,UAAI,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,GAAf,CAAf;;AACA,UAAI,MAAM,GAAG,GAAG,KAAK,MAArB;;AAEA,UAAI,EAAE,QAAQ,IAAI,MAAd,CAAJ,EAA2B;AACzB,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,sDAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAbD;AAcD;AACF;AAED,OAAM,SAAU,kBAAV,GAA4B;AAChC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,UAAI,CAAC,IAAI,CAAC,SAAL,CAAe,GAAf,CAAL,EAA0B;AACxB,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,4CAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAVD;AAWD;AACF;AAED,OAAM,SAAU,4BAAV,GAAsC;AAC1C,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,YAAM,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,GAAf,CAAjB;;AACA,YAAM,UAAU,GACd,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,MAAwC,yBAAxC,IACC,GAAG,IAAI,GAAG,CAAC,YAFd;;AAGA,UAAI,EAAE,QAAQ,IAAI,UAAd,CAAJ,EAA+B;AAC7B,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,iEAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAdD;AAeD;AACF;AAED,OAAM,SAAU,oBAAV,GAA8B;AAClC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,UAAI,CAAC,IAAI,CAAC,WAAL,CAAiB,GAAjB,CAAL,EAA4B;AAC1B,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,8CAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAVD;AAWD;AACF;AACD,OAAM,SAAU,uBAAV,GAAiC;AACrC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,UAAI,CAAC,IAAI,CAAC,QAAL,CAAc,GAAd,CAAL,EAAyB;AACvB,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,sDAJJ;AAMD,OAPD,MAOO;AACL,QAAA,GAAG,CAAC,OAAJ,CAAY,UAAU,IAAV,EAAmB;AAC7B,cAAI,CAAC,IAAI,CAAC,SAAL,CAAe,IAAf,CAAL,EAA2B;AACzB,YAAA,IAAI,CAAC,IAAL,CACE,MACE,IADF,GAEE,sCAFF,GAGE,IAHF,GAIE,4CALJ;AAOD;AACF,SAVD;AAWD;;AACD,aAAO,GAAP;AACD,KAtBD;AAuBD;AACF;AACD,OAAM,SAAU,mBAAV,GAA6B;AACjC,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,UAAI,MAAM,GAAG,GAAG,KAAK,IAAR,IAAgB,GAAG,KAAK,KAArC;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,6CAJJ;AAMD;;AACD,aAAO,GAAP;AACD,KAXD;AAYD;AACF;AACD,OAAM,SAAU,qBAAV,CAAgC,UAAhC,EAA+C;AACnD,MAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,WAAO,UAAU,GAAV,EAAoB,IAApB,EAAgC;AACrC,UAAI,CAAC,IAAI,CAAC,QAAL,CAAc,GAAd,CAAL,EAAyB;AACvB,QAAA,IAAI,CAAC,IAAL,CACE,YAAY,CAAC,GAAD,CAAZ,GACE,6BADF,GAEE,IAFF,GAGE,6DAHF,GAIE,UALJ;AAOD;;AACD,aAAO,GAAP;AACD,KAXD;AAYD;AACF","sourceRoot":"","sourcesContent":["import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nfunction _formatValue(val) {\n    if (Util._isString(val)) {\n        return '\"' + val + '\"';\n    }\n    if (Object.prototype.toString.call(val) === '[object Number]') {\n        return val;\n    }\n    if (Util._isBoolean(val)) {\n        return val;\n    }\n    return Object.prototype.toString.call(val);\n}\nexport function RGBComponent(val) {\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    return Math.round(val);\n}\nexport function alphaComponent(val) {\n    if (val > 1) {\n        return 1;\n    }\n    else if (val < 0.0001) {\n        return 0.0001;\n    }\n    return val;\n}\nexport function getNumberValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isNumber(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number.');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberOrArrayOfNumbersValidator(noOfElements) {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            let isNumber = Util._isNumber(val);\n            let isValidArray = Util._isArray(val) && val.length == noOfElements;\n            if (!isNumber && !isValidArray) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number or Array<number>(' +\n                    noOfElements +\n                    ')');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberOrAutoValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            var isNumber = Util._isNumber(val);\n            var isAuto = val === 'auto';\n            if (!(isNumber || isAuto)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a number or \"auto\".');\n            }\n            return val;\n        };\n    }\n}\nexport function getStringValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isString(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a string.');\n            }\n            return val;\n        };\n    }\n}\nexport function getStringOrGradientValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            const isString = Util._isString(val);\n            const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' ||\n                (val && val.addColorStop);\n            if (!(isString || isGradient)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a string or a native gradient.');\n            }\n            return val;\n        };\n    }\n}\nexport function getFunctionValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isFunction(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a function.');\n            }\n            return val;\n        };\n    }\n}\nexport function getNumberArrayValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util._isArray(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a array of numbers.');\n            }\n            else {\n                val.forEach(function (item) {\n                    if (!Util._isNumber(item)) {\n                        Util.warn('\"' +\n                            attr +\n                            '\" attribute has non numeric element ' +\n                            item +\n                            '. Make sure that all elements are numbers.');\n                    }\n                });\n            }\n            return val;\n        };\n    }\n}\nexport function getBooleanValidator() {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            var isBool = val === true || val === false;\n            if (!isBool) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be a boolean.');\n            }\n            return val;\n        };\n    }\n}\nexport function getComponentValidator(components) {\n    if (Konva.isUnminified) {\n        return function (val, attr) {\n            if (!Util.isObject(val)) {\n                Util.warn(_formatValue(val) +\n                    ' is a not valid value for \"' +\n                    attr +\n                    '\" attribute. The value should be an object with properties ' +\n                    components);\n            }\n            return val;\n        };\n    }\n}\n//# sourceMappingURL=Validators.js.map"]},"metadata":{},"sourceType":"module"}