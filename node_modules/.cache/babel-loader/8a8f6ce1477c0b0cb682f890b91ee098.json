{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { RGBComponent } from '../Validators.js';\nexport const RGBA = function (imageData) {\n  var data = imageData.data,\n      nPixels = data.length,\n      red = this.red(),\n      green = this.green(),\n      blue = this.blue(),\n      alpha = this.alpha(),\n      i,\n      ia;\n\n  for (i = 0; i < nPixels; i += 4) {\n    ia = 1 - alpha;\n    data[i] = red * alpha + data[i] * ia;\n    data[i + 1] = green * alpha + data[i + 1] * ia;\n    data[i + 2] = blue * alpha + data[i + 2] * ia;\n  }\n};\nFactory.addGetterSetter(Node, 'red', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory.addGetterSetter(Node, 'green', 0, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 255) {\n    return 255;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return Math.round(val);\n  }\n});\nFactory.addGetterSetter(Node, 'blue', 0, RGBComponent, Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'alpha', 1, function (val) {\n  this._filterUpToDate = false;\n\n  if (val > 1) {\n    return 1;\n  } else if (val < 0) {\n    return 0;\n  } else {\n    return val;\n  }\n});","map":{"version":3,"sources":["../../src/filters/RGBA.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,eAAxB;AACA,SAAS,IAAT,QAA6B,YAA7B;AACA,SAAS,YAAT,QAA6B,kBAA7B;AAiBA,OAAO,MAAM,IAAI,GAAW,UAAU,SAAV,EAAmB;AAC7C,MAAI,IAAI,GAAG,SAAS,CAAC,IAArB;AAAA,MACE,OAAO,GAAG,IAAI,CAAC,MADjB;AAAA,MAEE,GAAG,GAAG,KAAK,GAAL,EAFR;AAAA,MAGE,KAAK,GAAG,KAAK,KAAL,EAHV;AAAA,MAIE,IAAI,GAAG,KAAK,IAAL,EAJT;AAAA,MAKE,KAAK,GAAG,KAAK,KAAL,EALV;AAAA,MAME,CANF;AAAA,MAOE,EAPF;;AASA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,OAAhB,EAAyB,CAAC,IAAI,CAA9B,EAAiC;AAC/B,IAAA,EAAE,GAAG,IAAI,KAAT;AAEA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAG,GAAG,KAAN,GAAc,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAlC;AACA,IAAA,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,KAAK,GAAG,KAAR,GAAgB,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,EAA5C;AACA,IAAA,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAI,GAAG,KAAP,GAAe,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,GAAc,EAA3C;AACD;AACF,CAjBM;AAmBP,OAAO,CAAC,eAAR,CAAwB,IAAxB,EAA8B,KAA9B,EAAqC,CAArC,EAAwC,UAAU,GAAV,EAAa;AACnD,OAAK,eAAL,GAAuB,KAAvB;;AACA,MAAI,GAAG,GAAG,GAAV,EAAe;AACb,WAAO,GAAP;AACD,GAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAClB,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD;AACF,CATD;AAmBA,OAAO,CAAC,eAAR,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC,CAAvC,EAA0C,UAAU,GAAV,EAAa;AACrD,OAAK,eAAL,GAAuB,KAAvB;;AACA,MAAI,GAAG,GAAG,GAAV,EAAe;AACb,WAAO,GAAP;AACD,GAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAClB,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAI,CAAC,KAAL,CAAW,GAAX,CAAP;AACD;AACF,CATD;AAmBA,OAAO,CAAC,eAAR,CAAwB,IAAxB,EAA8B,MAA9B,EAAsC,CAAtC,EAAyC,YAAzC,EAAuD,OAAO,CAAC,cAA/D;AAUA,OAAO,CAAC,eAAR,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC,CAAvC,EAA0C,UAAU,GAAV,EAAa;AACrD,OAAK,eAAL,GAAuB,KAAvB;;AACA,MAAI,GAAG,GAAG,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAClB,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAO,GAAP;AACD;AACF,CATD","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { RGBComponent } from '../Validators.js';\nexport const RGBA = function (imageData) {\n    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;\n    for (i = 0; i < nPixels; i += 4) {\n        ia = 1 - alpha;\n        data[i] = red * alpha + data[i] * ia;\n        data[i + 1] = green * alpha + data[i + 1] * ia;\n        data[i + 2] = blue * alpha + data[i + 2] * ia;\n    }\n};\nFactory.addGetterSetter(Node, 'red', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory.addGetterSetter(Node, 'green', 0, function (val) {\n    this._filterUpToDate = false;\n    if (val > 255) {\n        return 255;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return Math.round(val);\n    }\n});\nFactory.addGetterSetter(Node, 'blue', 0, RGBComponent, Factory.afterSetFilter);\nFactory.addGetterSetter(Node, 'alpha', 1, function (val) {\n    this._filterUpToDate = false;\n    if (val > 1) {\n        return 1;\n    }\n    else if (val < 0) {\n        return 0;\n    }\n    else {\n        return val;\n    }\n});\n//# sourceMappingURL=RGBA.js.map"]},"metadata":{},"sourceType":"module"}