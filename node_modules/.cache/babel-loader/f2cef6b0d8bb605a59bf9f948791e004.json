{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\n\nfunction BlurStack() {\n  this.r = 0;\n  this.g = 0;\n  this.b = 0;\n  this.a = 0;\n  this.next = null;\n}\n\nvar mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\nvar shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n\nfunction filterGaussBlurRGBA(imageData, radius) {\n  var pixels = imageData.data,\n      width = imageData.width,\n      height = imageData.height;\n  var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n  var div = radius + radius + 1,\n      widthMinus1 = width - 1,\n      heightMinus1 = height - 1,\n      radiusPlus1 = radius + 1,\n      sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2,\n      stackStart = new BlurStack(),\n      stackEnd = null,\n      stack = stackStart,\n      stackIn = null,\n      stackOut = null,\n      mul_sum = mul_table[radius],\n      shg_sum = shg_table[radius];\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  yw = yi = 0;\n\n  for (y = 0; y < height; y++) {\n    r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa !== 0) {\n        pa = 255 / pa;\n        pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      r_in_sum += stackIn.r = pixels[p];\n      g_in_sum += stackIn.g = pixels[p + 1];\n      b_in_sum += stackIn.b = pixels[p + 2];\n      a_in_sum += stackIn.a = pixels[p + 3];\n      r_sum += r_in_sum;\n      g_sum += g_in_sum;\n      b_sum += b_in_sum;\n      a_sum += a_in_sum;\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n    yi = x << 2;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa > 0) {\n        pa = 255 / pa;\n        pixels[p] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      r_sum += r_in_sum += stackIn.r = pixels[p];\n      g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n      b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n      a_sum += a_in_sum += stackIn.a = pixels[p + 3];\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n}\n\nexport const Blur = function Blur(imageData) {\n  var radius = Math.round(this.blurRadius());\n\n  if (radius > 0) {\n    filterGaussBlurRGBA(imageData, radius);\n  }\n};\nFactory.addGetterSetter(Node, 'blurRadius', 0, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"sources":["../../src/filters/Blur.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { getNumberValidator } from '../Validators.js';\nfunction BlurStack() {\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n}\nvar mul_table = [\n    512,\n    512,\n    456,\n    512,\n    328,\n    456,\n    335,\n    512,\n    405,\n    328,\n    271,\n    456,\n    388,\n    335,\n    292,\n    512,\n    454,\n    405,\n    364,\n    328,\n    298,\n    271,\n    496,\n    456,\n    420,\n    388,\n    360,\n    335,\n    312,\n    292,\n    273,\n    512,\n    482,\n    454,\n    428,\n    405,\n    383,\n    364,\n    345,\n    328,\n    312,\n    298,\n    284,\n    271,\n    259,\n    496,\n    475,\n    456,\n    437,\n    420,\n    404,\n    388,\n    374,\n    360,\n    347,\n    335,\n    323,\n    312,\n    302,\n    292,\n    282,\n    273,\n    265,\n    512,\n    497,\n    482,\n    468,\n    454,\n    441,\n    428,\n    417,\n    405,\n    394,\n    383,\n    373,\n    364,\n    354,\n    345,\n    337,\n    328,\n    320,\n    312,\n    305,\n    298,\n    291,\n    284,\n    278,\n    271,\n    265,\n    259,\n    507,\n    496,\n    485,\n    475,\n    465,\n    456,\n    446,\n    437,\n    428,\n    420,\n    412,\n    404,\n    396,\n    388,\n    381,\n    374,\n    367,\n    360,\n    354,\n    347,\n    341,\n    335,\n    329,\n    323,\n    318,\n    312,\n    307,\n    302,\n    297,\n    292,\n    287,\n    282,\n    278,\n    273,\n    269,\n    265,\n    261,\n    512,\n    505,\n    497,\n    489,\n    482,\n    475,\n    468,\n    461,\n    454,\n    447,\n    441,\n    435,\n    428,\n    422,\n    417,\n    411,\n    405,\n    399,\n    394,\n    389,\n    383,\n    378,\n    373,\n    368,\n    364,\n    359,\n    354,\n    350,\n    345,\n    341,\n    337,\n    332,\n    328,\n    324,\n    320,\n    316,\n    312,\n    309,\n    305,\n    301,\n    298,\n    294,\n    291,\n    287,\n    284,\n    281,\n    278,\n    274,\n    271,\n    268,\n    265,\n    262,\n    259,\n    257,\n    507,\n    501,\n    496,\n    491,\n    485,\n    480,\n    475,\n    470,\n    465,\n    460,\n    456,\n    451,\n    446,\n    442,\n    437,\n    433,\n    428,\n    424,\n    420,\n    416,\n    412,\n    408,\n    404,\n    400,\n    396,\n    392,\n    388,\n    385,\n    381,\n    377,\n    374,\n    370,\n    367,\n    363,\n    360,\n    357,\n    354,\n    350,\n    347,\n    344,\n    341,\n    338,\n    335,\n    332,\n    329,\n    326,\n    323,\n    320,\n    318,\n    315,\n    312,\n    310,\n    307,\n    304,\n    302,\n    299,\n    297,\n    294,\n    292,\n    289,\n    287,\n    285,\n    282,\n    280,\n    278,\n    275,\n    273,\n    271,\n    269,\n    267,\n    265,\n    263,\n    261,\n    259,\n];\nvar shg_table = [\n    9,\n    11,\n    12,\n    13,\n    13,\n    14,\n    14,\n    15,\n    15,\n    15,\n    15,\n    16,\n    16,\n    16,\n    16,\n    17,\n    17,\n    17,\n    17,\n    17,\n    17,\n    17,\n    18,\n    18,\n    18,\n    18,\n    18,\n    18,\n    18,\n    18,\n    18,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    19,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    20,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    21,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    22,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    23,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n];\nfunction filterGaussBlurRGBA(imageData, radius) {\n    var pixels = imageData.data, width = imageData.width, height = imageData.height;\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];\n    for (i = 1; i < div; i++) {\n        stack = stack.next = new BlurStack();\n        if (i === radiusPlus1) {\n            stackEnd = stack;\n        }\n    }\n    stack.next = stackStart;\n    yw = yi = 0;\n    for (y = 0; y < height; y++) {\n        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n        stack = stackStart;\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n        for (i = 1; i < radiusPlus1; i++) {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n            stack = stack.next;\n        }\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++) {\n            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa !== 0) {\n                pa = 255 / pa;\n                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            }\n            else {\n                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n            }\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n            r_in_sum += stackIn.r = pixels[p];\n            g_in_sum += stackIn.g = pixels[p + 1];\n            b_in_sum += stackIn.b = pixels[p + 2];\n            a_in_sum += stackIn.a = pixels[p + 3];\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n            a_sum += a_in_sum;\n            stackIn = stackIn.next;\n            r_out_sum += pr = stackOut.r;\n            g_out_sum += pg = stackOut.g;\n            b_out_sum += pb = stackOut.b;\n            a_out_sum += pa = stackOut.a;\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n            stackOut = stackOut.next;\n            yi += 4;\n        }\n        yw += width;\n    }\n    for (x = 0; x < width; x++) {\n        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n        stack = stackStart;\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n        yp = width;\n        for (i = 1; i <= radius; i++) {\n            yi = (yp + x) << 2;\n            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n            stack = stack.next;\n            if (i < heightMinus1) {\n                yp += width;\n            }\n        }\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++) {\n            p = yi << 2;\n            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa > 0) {\n                pa = 255 / pa;\n                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            }\n            else {\n                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n            }\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n            p =\n                (x +\n                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<\n                    2;\n            r_sum += r_in_sum += stackIn.r = pixels[p];\n            g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n            b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n            a_sum += a_in_sum += stackIn.a = pixels[p + 3];\n            stackIn = stackIn.next;\n            r_out_sum += pr = stackOut.r;\n            g_out_sum += pg = stackOut.g;\n            b_out_sum += pb = stackOut.b;\n            a_out_sum += pa = stackOut.a;\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n            stackOut = stackOut.next;\n            yi += width;\n        }\n    }\n}\nexport const Blur = function Blur(imageData) {\n    var radius = Math.round(this.blurRadius());\n    if (radius > 0) {\n        filterGaussBlurRGBA(imageData, radius);\n    }\n};\nFactory.addGetterSetter(Node, 'blurRadius', 0, getNumberValidator(), Factory.afterSetFilter);\n//# sourceMappingURL=Blur.js.map"]},"metadata":{},"sourceType":"module"}