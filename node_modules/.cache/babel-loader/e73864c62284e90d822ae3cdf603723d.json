{"ast":null,"code":"import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nexport const DD = {\n  get isDragging() {\n    var flag = false;\n\n    DD._dragElements.forEach(elem => {\n      if (elem.dragStatus === 'dragging') {\n        flag = true;\n      }\n    });\n\n    return flag;\n  },\n\n  justDragged: false,\n\n  get node() {\n    var node;\n\n    DD._dragElements.forEach(elem => {\n      node = elem.node;\n    });\n\n    return node;\n  },\n\n  _dragElements: new Map(),\n\n  _drag(evt) {\n    const nodesToFireEvents = [];\n\n    DD._dragElements.forEach((elem, key) => {\n      const {\n        node\n      } = elem;\n      const stage = node.getStage();\n      stage.setPointersPositions(evt);\n\n      if (elem.pointerId === undefined) {\n        elem.pointerId = Util._getFirstPointerId(evt);\n      }\n\n      const pos = stage._changedPointerPositions.find(pos => pos.id === elem.pointerId);\n\n      if (!pos) {\n        return;\n      }\n\n      if (elem.dragStatus !== 'dragging') {\n        var dragDistance = node.dragDistance();\n        var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));\n\n        if (distance < dragDistance) {\n          return;\n        }\n\n        node.startDrag({\n          evt\n        });\n\n        if (!node.isDragging()) {\n          return;\n        }\n      }\n\n      node._setDragPosition(evt, elem);\n\n      nodesToFireEvents.push(node);\n    });\n\n    nodesToFireEvents.forEach(node => {\n      node.fire('dragmove', {\n        type: 'dragmove',\n        target: node,\n        evt: evt\n      }, true);\n    });\n  },\n\n  _endDragBefore(evt) {\n    DD._dragElements.forEach(elem => {\n      const {\n        node\n      } = elem;\n      const stage = node.getStage();\n\n      if (evt) {\n        stage.setPointersPositions(evt);\n      }\n\n      const pos = stage._changedPointerPositions.find(pos => pos.id === elem.pointerId);\n\n      if (!pos) {\n        return;\n      }\n\n      if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {\n        DD.justDragged = true;\n        Konva._mouseListenClick = false;\n        Konva._touchListenClick = false;\n        Konva._pointerListenClick = false;\n        elem.dragStatus = 'stopped';\n      }\n\n      const drawNode = elem.node.getLayer() || elem.node instanceof Konva['Stage'] && elem.node;\n\n      if (drawNode) {\n        drawNode.batchDraw();\n      }\n    });\n  },\n\n  _endDragAfter(evt) {\n    DD._dragElements.forEach((elem, key) => {\n      if (elem.dragStatus === 'stopped') {\n        elem.node.fire('dragend', {\n          type: 'dragend',\n          target: elem.node,\n          evt: evt\n        }, true);\n      }\n\n      if (elem.dragStatus !== 'dragging') {\n        DD._dragElements.delete(key);\n      }\n    });\n  }\n\n};\n\nif (Konva.isBrowser) {\n  window.addEventListener('mouseup', DD._endDragBefore, true);\n  window.addEventListener('touchend', DD._endDragBefore, true);\n  window.addEventListener('mousemove', DD._drag);\n  window.addEventListener('touchmove', DD._drag);\n  window.addEventListener('mouseup', DD._endDragAfter, false);\n  window.addEventListener('touchend', DD._endDragAfter, false);\n}","map":{"version":3,"sources":["../src/DragAndDrop.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,aAAtB;AAGA,SAAS,IAAT,QAAqB,WAArB;AAEA,OAAO,MAAM,EAAE,GAAG;AAChB,MAAI,UAAJ,GAAc;AACZ,QAAI,IAAI,GAAG,KAAX;;AACA,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAA0B,IAAD,IAAS;AAChC,UAAI,IAAI,CAAC,UAAL,KAAoB,UAAxB,EAAoC;AAClC,QAAA,IAAI,GAAG,IAAP;AACD;AACF,KAJD;;AAKA,WAAO,IAAP;AACD,GATe;;AAUhB,EAAA,WAAW,EAAE,KAVG;;AAWhB,MAAI,IAAJ,GAAQ;AAEN,QAAI,IAAJ;;AACA,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAA0B,IAAD,IAAS;AAChC,MAAA,IAAI,GAAG,IAAI,CAAC,IAAZ;AACD,KAFD;;AAGA,WAAO,IAAP;AACD,GAlBe;;AAmBhB,EAAA,aAAa,EAAE,IAAI,GAAJ,EAnBC;;AAoChB,EAAA,KAAK,CAAC,GAAD,EAAI;AACP,UAAM,iBAAiB,GAAgB,EAAvC;;AACA,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAAyB,CAAC,IAAD,EAAO,GAAP,KAAc;AACrC,YAAM;AAAE,QAAA;AAAF,UAAW,IAAjB;AAEA,YAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,MAAA,KAAK,CAAC,oBAAN,CAA2B,GAA3B;;AAIA,UAAI,IAAI,CAAC,SAAL,KAAmB,SAAvB,EAAkC;AAChC,QAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,kBAAL,CAAwB,GAAxB,CAAjB;AACD;;AACD,YAAM,GAAG,GAAG,KAAK,CAAC,wBAAN,CAA+B,IAA/B,CACT,GAAD,IAAS,GAAG,CAAC,EAAJ,KAAW,IAAI,CAAC,SADf,CAAZ;;AAKA,UAAI,CAAC,GAAL,EAAU;AACR;AACD;;AACD,UAAI,IAAI,CAAC,UAAL,KAAoB,UAAxB,EAAoC;AAClC,YAAI,YAAY,GAAG,IAAI,CAAC,YAAL,EAAnB;AACA,YAAI,QAAQ,GAAG,IAAI,CAAC,GAAL,CACb,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,eAAL,CAAqB,CAAtC,CADa,EAEb,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,eAAL,CAAqB,CAAtC,CAFa,CAAf;;AAIA,YAAI,QAAQ,GAAG,YAAf,EAA6B;AAC3B;AACD;;AACD,QAAA,IAAI,CAAC,SAAL,CAAe;AAAE,UAAA;AAAF,SAAf;;AAEA,YAAI,CAAC,IAAI,CAAC,UAAL,EAAL,EAAwB;AACtB;AACD;AACF;;AACD,MAAA,IAAI,CAAC,gBAAL,CAAsB,GAAtB,EAA2B,IAA3B;;AACA,MAAA,iBAAiB,CAAC,IAAlB,CAAuB,IAAvB;AACD,KApCD;;AAsCA,IAAA,iBAAiB,CAAC,OAAlB,CAA2B,IAAD,IAAS;AACjC,MAAA,IAAI,CAAC,IAAL,CACE,UADF,EAEE;AACE,QAAA,IAAI,EAAE,UADR;AAEE,QAAA,MAAM,EAAE,IAFV;AAGE,QAAA,GAAG,EAAE;AAHP,OAFF,EAOE,IAPF;AASD,KAVD;AAWD,GAvFe;;AA2FhB,EAAA,cAAc,CAAC,GAAD,EAAK;AACjB,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAA0B,IAAD,IAAS;AAChC,YAAM;AAAE,QAAA;AAAF,UAAW,IAAjB;AAEA,YAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;;AACA,UAAI,GAAJ,EAAS;AACP,QAAA,KAAK,CAAC,oBAAN,CAA2B,GAA3B;AACD;;AAED,YAAM,GAAG,GAAG,KAAK,CAAC,wBAAN,CAA+B,IAA/B,CACT,GAAD,IAAS,GAAG,CAAC,EAAJ,KAAW,IAAI,CAAC,SADf,CAAZ;;AAKA,UAAI,CAAC,GAAL,EAAU;AACR;AACD;;AAED,UAAI,IAAI,CAAC,UAAL,KAAoB,UAApB,IAAkC,IAAI,CAAC,UAAL,KAAoB,SAA1D,EAAqE;AAEnE,QAAA,EAAE,CAAC,WAAH,GAAiB,IAAjB;AACA,QAAA,KAAK,CAAC,iBAAN,GAA0B,KAA1B;AACA,QAAA,KAAK,CAAC,iBAAN,GAA0B,KAA1B;AACA,QAAA,KAAK,CAAC,mBAAN,GAA4B,KAA5B;AACA,QAAA,IAAI,CAAC,UAAL,GAAkB,SAAlB;AACD;;AAED,YAAM,QAAQ,GACZ,IAAI,CAAC,IAAL,CAAU,QAAV,MACE,IAAI,CAAC,IAAL,YAAqB,KAAK,CAAC,OAAD,CAA1B,IAAuC,IAAI,CAAC,IAFhD;;AAGA,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,SAAT;AACD;AACF,KAhCD;AAiCD,GA7He;;AA8HhB,EAAA,aAAa,CAAC,GAAD,EAAI;AACf,IAAA,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAAyB,CAAC,IAAD,EAAO,GAAP,KAAc;AACrC,UAAI,IAAI,CAAC,UAAL,KAAoB,SAAxB,EAAmC;AACjC,QAAA,IAAI,CAAC,IAAL,CAAU,IAAV,CACE,SADF,EAEE;AACE,UAAA,IAAI,EAAE,SADR;AAEE,UAAA,MAAM,EAAE,IAAI,CAAC,IAFf;AAGE,UAAA,GAAG,EAAE;AAHP,SAFF,EAOE,IAPF;AASD;;AACD,UAAI,IAAI,CAAC,UAAL,KAAoB,UAAxB,EAAoC;AAClC,QAAA,EAAE,CAAC,aAAH,CAAiB,MAAjB,CAAwB,GAAxB;AACD;AACF,KAfD;AAgBD;;AA/Ie,CAAX;;AAkJP,IAAI,KAAK,CAAC,SAAV,EAAqB;AACnB,EAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,EAAE,CAAC,cAAtC,EAAsD,IAAtD;AACA,EAAA,MAAM,CAAC,gBAAP,CAAwB,UAAxB,EAAoC,EAAE,CAAC,cAAvC,EAAuD,IAAvD;AAEA,EAAA,MAAM,CAAC,gBAAP,CAAwB,WAAxB,EAAqC,EAAE,CAAC,KAAxC;AACA,EAAA,MAAM,CAAC,gBAAP,CAAwB,WAAxB,EAAqC,EAAE,CAAC,KAAxC;AAEA,EAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,EAAE,CAAC,aAAtC,EAAqD,KAArD;AACA,EAAA,MAAM,CAAC,gBAAP,CAAwB,UAAxB,EAAoC,EAAE,CAAC,aAAvC,EAAsD,KAAtD;AACD","sourceRoot":"","sourcesContent":["import { Konva } from './Global.js';\nimport { Util } from './Util.js';\nexport const DD = {\n    get isDragging() {\n        var flag = false;\n        DD._dragElements.forEach((elem) => {\n            if (elem.dragStatus === 'dragging') {\n                flag = true;\n            }\n        });\n        return flag;\n    },\n    justDragged: false,\n    get node() {\n        var node;\n        DD._dragElements.forEach((elem) => {\n            node = elem.node;\n        });\n        return node;\n    },\n    _dragElements: new Map(),\n    _drag(evt) {\n        const nodesToFireEvents = [];\n        DD._dragElements.forEach((elem, key) => {\n            const { node } = elem;\n            const stage = node.getStage();\n            stage.setPointersPositions(evt);\n            if (elem.pointerId === undefined) {\n                elem.pointerId = Util._getFirstPointerId(evt);\n            }\n            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);\n            if (!pos) {\n                return;\n            }\n            if (elem.dragStatus !== 'dragging') {\n                var dragDistance = node.dragDistance();\n                var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));\n                if (distance < dragDistance) {\n                    return;\n                }\n                node.startDrag({ evt });\n                if (!node.isDragging()) {\n                    return;\n                }\n            }\n            node._setDragPosition(evt, elem);\n            nodesToFireEvents.push(node);\n        });\n        nodesToFireEvents.forEach((node) => {\n            node.fire('dragmove', {\n                type: 'dragmove',\n                target: node,\n                evt: evt,\n            }, true);\n        });\n    },\n    _endDragBefore(evt) {\n        DD._dragElements.forEach((elem) => {\n            const { node } = elem;\n            const stage = node.getStage();\n            if (evt) {\n                stage.setPointersPositions(evt);\n            }\n            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);\n            if (!pos) {\n                return;\n            }\n            if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {\n                DD.justDragged = true;\n                Konva._mouseListenClick = false;\n                Konva._touchListenClick = false;\n                Konva._pointerListenClick = false;\n                elem.dragStatus = 'stopped';\n            }\n            const drawNode = elem.node.getLayer() ||\n                (elem.node instanceof Konva['Stage'] && elem.node);\n            if (drawNode) {\n                drawNode.batchDraw();\n            }\n        });\n    },\n    _endDragAfter(evt) {\n        DD._dragElements.forEach((elem, key) => {\n            if (elem.dragStatus === 'stopped') {\n                elem.node.fire('dragend', {\n                    type: 'dragend',\n                    target: elem.node,\n                    evt: evt,\n                }, true);\n            }\n            if (elem.dragStatus !== 'dragging') {\n                DD._dragElements.delete(key);\n            }\n        });\n    },\n};\nif (Konva.isBrowser) {\n    window.addEventListener('mouseup', DD._endDragBefore, true);\n    window.addEventListener('touchend', DD._endDragBefore, true);\n    window.addEventListener('mousemove', DD._drag);\n    window.addEventListener('touchmove', DD._drag);\n    window.addEventListener('mouseup', DD._endDragAfter, false);\n    window.addEventListener('touchend', DD._endDragAfter, false);\n}\n//# sourceMappingURL=DragAndDrop.js.map"]},"metadata":{},"sourceType":"module"}