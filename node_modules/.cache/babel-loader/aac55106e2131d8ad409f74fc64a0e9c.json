{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { _registerNode } from '../Global.js';\nexport class Path extends Shape {\n  constructor(config) {\n    super(config);\n    this.dataArray = [];\n    this.pathLength = 0;\n    this.dataArray = Path.parsePathData(this.data());\n    this.pathLength = 0;\n\n    for (var i = 0; i < this.dataArray.length; ++i) {\n      this.pathLength += this.dataArray[i].pathLength;\n    }\n\n    this.on('dataChange.konva', function () {\n      this.dataArray = Path.parsePathData(this.data());\n      this.pathLength = 0;\n\n      for (var i = 0; i < this.dataArray.length; ++i) {\n        this.pathLength += this.dataArray[i].pathLength;\n      }\n    });\n  }\n\n  _sceneFunc(context) {\n    var ca = this.dataArray;\n    context.beginPath();\n    var isClosed = false;\n\n    for (var n = 0; n < ca.length; n++) {\n      var c = ca[n].command;\n      var p = ca[n].points;\n\n      switch (c) {\n        case 'L':\n          context.lineTo(p[0], p[1]);\n          break;\n\n        case 'M':\n          context.moveTo(p[0], p[1]);\n          break;\n\n        case 'C':\n          context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n          break;\n\n        case 'Q':\n          context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n          break;\n\n        case 'A':\n          var cx = p[0],\n              cy = p[1],\n              rx = p[2],\n              ry = p[3],\n              theta = p[4],\n              dTheta = p[5],\n              psi = p[6],\n              fs = p[7];\n          var r = rx > ry ? rx : ry;\n          var scaleX = rx > ry ? 1 : rx / ry;\n          var scaleY = rx > ry ? ry / rx : 1;\n          context.translate(cx, cy);\n          context.rotate(psi);\n          context.scale(scaleX, scaleY);\n          context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n          context.scale(1 / scaleX, 1 / scaleY);\n          context.rotate(-psi);\n          context.translate(-cx, -cy);\n          break;\n\n        case 'z':\n          isClosed = true;\n          context.closePath();\n          break;\n      }\n    }\n\n    if (!isClosed && !this.hasFill()) {\n      context.strokeShape(this);\n    } else {\n      context.fillStrokeShape(this);\n    }\n  }\n\n  getSelfRect() {\n    var points = [];\n    this.dataArray.forEach(function (data) {\n      if (data.command === 'A') {\n        var start = data.points[4];\n        var dTheta = data.points[5];\n        var end = data.points[4] + dTheta;\n        var inc = Math.PI / 180.0;\n\n        if (Math.abs(start - end) < inc) {\n          inc = Math.abs(start - end);\n        }\n\n        if (dTheta < 0) {\n          for (let t = start - inc; t > end; t -= inc) {\n            const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n            points.push(point.x, point.y);\n          }\n        } else {\n          for (let t = start + inc; t < end; t += inc) {\n            const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n            points.push(point.x, point.y);\n          }\n        }\n      } else if (data.command === 'C') {\n        for (let t = 0.0; t <= 1; t += 0.01) {\n          const point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);\n          points.push(point.x, point.y);\n        }\n      } else {\n        points = points.concat(data.points);\n      }\n    });\n    var minX = points[0];\n    var maxX = points[0];\n    var minY = points[1];\n    var maxY = points[1];\n    var x, y;\n\n    for (var i = 0; i < points.length / 2; i++) {\n      x = points[i * 2];\n      y = points[i * 2 + 1];\n\n      if (!isNaN(x)) {\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n      }\n\n      if (!isNaN(y)) {\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n      }\n    }\n\n    return {\n      x: Math.round(minX),\n      y: Math.round(minY),\n      width: Math.round(maxX - minX),\n      height: Math.round(maxY - minY)\n    };\n  }\n\n  getLength() {\n    return this.pathLength;\n  }\n\n  getPointAtLength(length) {\n    var point,\n        i = 0,\n        ii = this.dataArray.length;\n\n    if (!ii) {\n      return null;\n    }\n\n    while (i < ii && length > this.dataArray[i].pathLength) {\n      length -= this.dataArray[i].pathLength;\n      ++i;\n    }\n\n    if (i === ii) {\n      point = this.dataArray[i - 1].points.slice(-2);\n      return {\n        x: point[0],\n        y: point[1]\n      };\n    }\n\n    if (length < 0.01) {\n      point = this.dataArray[i].points.slice(0, 2);\n      return {\n        x: point[0],\n        y: point[1]\n      };\n    }\n\n    var cp = this.dataArray[i];\n    var p = cp.points;\n\n    switch (cp.command) {\n      case 'L':\n        return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\n\n      case 'C':\n        return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\n\n      case 'Q':\n        return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\n\n      case 'A':\n        var cx = p[0],\n            cy = p[1],\n            rx = p[2],\n            ry = p[3],\n            theta = p[4],\n            dTheta = p[5],\n            psi = p[6];\n        theta += dTheta * length / cp.pathLength;\n        return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\n    }\n\n    return null;\n  }\n\n  static getLineLength(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n\n  static getPointOnLine(dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n    if (fromX === undefined) {\n      fromX = P1x;\n    }\n\n    if (fromY === undefined) {\n      fromY = P1y;\n    }\n\n    var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\n    var run = Math.sqrt(dist * dist / (1 + m * m));\n\n    if (P2x < P1x) {\n      run *= -1;\n    }\n\n    var rise = m * run;\n    var pt;\n\n    if (P2x === P1x) {\n      pt = {\n        x: fromX,\n        y: fromY + rise\n      };\n    } else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\n      pt = {\n        x: fromX + run,\n        y: fromY + rise\n      };\n    } else {\n      var ix, iy;\n      var len = this.getLineLength(P1x, P1y, P2x, P2y);\n      var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\n      u = u / (len * len);\n      ix = P1x + u * (P2x - P1x);\n      iy = P1y + u * (P2y - P1y);\n      var pRise = this.getLineLength(fromX, fromY, ix, iy);\n      var pRun = Math.sqrt(dist * dist - pRise * pRise);\n      run = Math.sqrt(pRun * pRun / (1 + m * m));\n\n      if (P2x < P1x) {\n        run *= -1;\n      }\n\n      rise = m * run;\n      pt = {\n        x: ix + run,\n        y: iy + rise\n      };\n    }\n\n    return pt;\n  }\n\n  static getPointOnCubicBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n    function CB1(t) {\n      return t * t * t;\n    }\n\n    function CB2(t) {\n      return 3 * t * t * (1 - t);\n    }\n\n    function CB3(t) {\n      return 3 * t * (1 - t) * (1 - t);\n    }\n\n    function CB4(t) {\n      return (1 - t) * (1 - t) * (1 - t);\n    }\n\n    var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n    var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  static getPointOnQuadraticBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n    function QB1(t) {\n      return t * t;\n    }\n\n    function QB2(t) {\n      return 2 * t * (1 - t);\n    }\n\n    function QB3(t) {\n      return (1 - t) * (1 - t);\n    }\n\n    var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n    var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  static getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n    var cosPsi = Math.cos(psi),\n        sinPsi = Math.sin(psi);\n    var pt = {\n      x: rx * Math.cos(theta),\n      y: ry * Math.sin(theta)\n    };\n    return {\n      x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n      y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n    };\n  }\n\n  static parsePathData(data) {\n    if (!data) {\n      return [];\n    }\n\n    var cs = data;\n    var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];\n    cs = cs.replace(new RegExp(' ', 'g'), ',');\n\n    for (var n = 0; n < cc.length; n++) {\n      cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n    }\n\n    var arr = cs.split('|');\n    var ca = [];\n    var coords = [];\n    var cpx = 0;\n    var cpy = 0;\n    var re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi;\n    var match;\n\n    for (n = 1; n < arr.length; n++) {\n      var str = arr[n];\n      var c = str.charAt(0);\n      str = str.slice(1);\n      coords.length = 0;\n\n      while (match = re.exec(str)) {\n        coords.push(match[0]);\n      }\n\n      var p = [];\n\n      for (var j = 0, jlen = coords.length; j < jlen; j++) {\n        if (coords[j] === '00') {\n          p.push(0, 0);\n          continue;\n        }\n\n        var parsed = parseFloat(coords[j]);\n\n        if (!isNaN(parsed)) {\n          p.push(parsed);\n        } else {\n          p.push(0);\n        }\n      }\n\n      while (p.length > 0) {\n        if (isNaN(p[0])) {\n          break;\n        }\n\n        var cmd = null;\n        var points = [];\n        var startX = cpx,\n            startY = cpy;\n        var prevCmd, ctlPtx, ctlPty;\n        var rx, ry, psi, fa, fs, x1, y1;\n\n        switch (c) {\n          case 'l':\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'L';\n            points.push(cpx, cpy);\n            break;\n\n          case 'L':\n            cpx = p.shift();\n            cpy = p.shift();\n            points.push(cpx, cpy);\n            break;\n\n          case 'm':\n            var dx = p.shift();\n            var dy = p.shift();\n            cpx += dx;\n            cpy += dy;\n            cmd = 'M';\n\n            if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\n              for (var idx = ca.length - 2; idx >= 0; idx--) {\n                if (ca[idx].command === 'M') {\n                  cpx = ca[idx].points[0] + dx;\n                  cpy = ca[idx].points[1] + dy;\n                  break;\n                }\n              }\n            }\n\n            points.push(cpx, cpy);\n            c = 'l';\n            break;\n\n          case 'M':\n            cpx = p.shift();\n            cpy = p.shift();\n            cmd = 'M';\n            points.push(cpx, cpy);\n            c = 'L';\n            break;\n\n          case 'h':\n            cpx += p.shift();\n            cmd = 'L';\n            points.push(cpx, cpy);\n            break;\n\n          case 'H':\n            cpx = p.shift();\n            cmd = 'L';\n            points.push(cpx, cpy);\n            break;\n\n          case 'v':\n            cpy += p.shift();\n            cmd = 'L';\n            points.push(cpx, cpy);\n            break;\n\n          case 'V':\n            cpy = p.shift();\n            cmd = 'L';\n            points.push(cpx, cpy);\n            break;\n\n          case 'C':\n            points.push(p.shift(), p.shift(), p.shift(), p.shift());\n            cpx = p.shift();\n            cpy = p.shift();\n            points.push(cpx, cpy);\n            break;\n\n          case 'c':\n            points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'C';\n            points.push(cpx, cpy);\n            break;\n\n          case 'S':\n            ctlPtx = cpx;\n            ctlPty = cpy;\n            prevCmd = ca[ca.length - 1];\n\n            if (prevCmd.command === 'C') {\n              ctlPtx = cpx + (cpx - prevCmd.points[2]);\n              ctlPty = cpy + (cpy - prevCmd.points[3]);\n            }\n\n            points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n            cpx = p.shift();\n            cpy = p.shift();\n            cmd = 'C';\n            points.push(cpx, cpy);\n            break;\n\n          case 's':\n            ctlPtx = cpx;\n            ctlPty = cpy;\n            prevCmd = ca[ca.length - 1];\n\n            if (prevCmd.command === 'C') {\n              ctlPtx = cpx + (cpx - prevCmd.points[2]);\n              ctlPty = cpy + (cpy - prevCmd.points[3]);\n            }\n\n            points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'C';\n            points.push(cpx, cpy);\n            break;\n\n          case 'Q':\n            points.push(p.shift(), p.shift());\n            cpx = p.shift();\n            cpy = p.shift();\n            points.push(cpx, cpy);\n            break;\n\n          case 'q':\n            points.push(cpx + p.shift(), cpy + p.shift());\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'Q';\n            points.push(cpx, cpy);\n            break;\n\n          case 'T':\n            ctlPtx = cpx;\n            ctlPty = cpy;\n            prevCmd = ca[ca.length - 1];\n\n            if (prevCmd.command === 'Q') {\n              ctlPtx = cpx + (cpx - prevCmd.points[0]);\n              ctlPty = cpy + (cpy - prevCmd.points[1]);\n            }\n\n            cpx = p.shift();\n            cpy = p.shift();\n            cmd = 'Q';\n            points.push(ctlPtx, ctlPty, cpx, cpy);\n            break;\n\n          case 't':\n            ctlPtx = cpx;\n            ctlPty = cpy;\n            prevCmd = ca[ca.length - 1];\n\n            if (prevCmd.command === 'Q') {\n              ctlPtx = cpx + (cpx - prevCmd.points[0]);\n              ctlPty = cpy + (cpy - prevCmd.points[1]);\n            }\n\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'Q';\n            points.push(ctlPtx, ctlPty, cpx, cpy);\n            break;\n\n          case 'A':\n            rx = p.shift();\n            ry = p.shift();\n            psi = p.shift();\n            fa = p.shift();\n            fs = p.shift();\n            x1 = cpx;\n            y1 = cpy;\n            cpx = p.shift();\n            cpy = p.shift();\n            cmd = 'A';\n            points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n            break;\n\n          case 'a':\n            rx = p.shift();\n            ry = p.shift();\n            psi = p.shift();\n            fa = p.shift();\n            fs = p.shift();\n            x1 = cpx;\n            y1 = cpy;\n            cpx += p.shift();\n            cpy += p.shift();\n            cmd = 'A';\n            points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n            break;\n        }\n\n        ca.push({\n          command: cmd || c,\n          points: points,\n          start: {\n            x: startX,\n            y: startY\n          },\n          pathLength: this.calcLength(startX, startY, cmd || c, points)\n        });\n      }\n\n      if (c === 'z' || c === 'Z') {\n        ca.push({\n          command: 'z',\n          points: [],\n          start: undefined,\n          pathLength: 0\n        });\n      }\n    }\n\n    return ca;\n  }\n\n  static calcLength(x, y, cmd, points) {\n    var len, p1, p2, t;\n    var path = Path;\n\n    switch (cmd) {\n      case 'L':\n        return path.getLineLength(x, y, points[0], points[1]);\n\n      case 'C':\n        len = 0.0;\n        p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case 'Q':\n        len = 0.0;\n        p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n          len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case 'A':\n        len = 0.0;\n        var start = points[4];\n        var dTheta = points[5];\n        var end = points[4] + dTheta;\n        var inc = Math.PI / 180.0;\n\n        if (Math.abs(start - end) < inc) {\n          inc = Math.abs(start - end);\n        }\n\n        p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n\n        if (dTheta < 0) {\n          for (t = start - inc; t > end; t -= inc) {\n            p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n            len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n            p1 = p2;\n          }\n        } else {\n          for (t = start + inc; t < end; t += inc) {\n            p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n            len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n            p1 = p2;\n          }\n        }\n\n        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n        return len;\n    }\n\n    return 0;\n  }\n\n  static convertEndpointToCenterParameterization(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n    var psi = psiDeg * (Math.PI / 180.0);\n    var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;\n    var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;\n    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);\n\n    if (lambda > 1) {\n      rx *= Math.sqrt(lambda);\n      ry *= Math.sqrt(lambda);\n    }\n\n    var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\n\n    if (fa === fs) {\n      f *= -1;\n    }\n\n    if (isNaN(f)) {\n      f = 0;\n    }\n\n    var cxp = f * rx * yp / ry;\n    var cyp = f * -ry * xp / rx;\n    var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n    var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n\n    var vMag = function (v) {\n      return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n\n    var vRatio = function (u, v) {\n      return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n\n    var vAngle = function (u, v) {\n      return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n    };\n\n    var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n    var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n    var dTheta = vAngle(u, v);\n\n    if (vRatio(u, v) <= -1) {\n      dTheta = Math.PI;\n    }\n\n    if (vRatio(u, v) >= 1) {\n      dTheta = 0;\n    }\n\n    if (fs === 0 && dTheta > 0) {\n      dTheta = dTheta - 2 * Math.PI;\n    }\n\n    if (fs === 1 && dTheta < 0) {\n      dTheta = dTheta + 2 * Math.PI;\n    }\n\n    return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n  }\n\n}\nPath.prototype.className = 'Path';\nPath.prototype._attrsAffectingSize = ['data'];\n\n_registerNode(Path);\n\nFactory.addGetterSetter(Path, 'data');","map":{"version":3,"sources":["../../src/shapes/Path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { _registerNode } from '../Global.js';\nexport class Path extends Shape {\n    constructor(config) {\n        super(config);\n        this.dataArray = [];\n        this.pathLength = 0;\n        this.dataArray = Path.parsePathData(this.data());\n        this.pathLength = 0;\n        for (var i = 0; i < this.dataArray.length; ++i) {\n            this.pathLength += this.dataArray[i].pathLength;\n        }\n        this.on('dataChange.konva', function () {\n            this.dataArray = Path.parsePathData(this.data());\n            this.pathLength = 0;\n            for (var i = 0; i < this.dataArray.length; ++i) {\n                this.pathLength += this.dataArray[i].pathLength;\n            }\n        });\n    }\n    _sceneFunc(context) {\n        var ca = this.dataArray;\n        context.beginPath();\n        var isClosed = false;\n        for (var n = 0; n < ca.length; n++) {\n            var c = ca[n].command;\n            var p = ca[n].points;\n            switch (c) {\n                case 'L':\n                    context.lineTo(p[0], p[1]);\n                    break;\n                case 'M':\n                    context.moveTo(p[0], p[1]);\n                    break;\n                case 'C':\n                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n                    break;\n                case 'Q':\n                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n                    break;\n                case 'A':\n                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\n                    var r = rx > ry ? rx : ry;\n                    var scaleX = rx > ry ? 1 : rx / ry;\n                    var scaleY = rx > ry ? ry / rx : 1;\n                    context.translate(cx, cy);\n                    context.rotate(psi);\n                    context.scale(scaleX, scaleY);\n                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n                    context.scale(1 / scaleX, 1 / scaleY);\n                    context.rotate(-psi);\n                    context.translate(-cx, -cy);\n                    break;\n                case 'z':\n                    isClosed = true;\n                    context.closePath();\n                    break;\n            }\n        }\n        if (!isClosed && !this.hasFill()) {\n            context.strokeShape(this);\n        }\n        else {\n            context.fillStrokeShape(this);\n        }\n    }\n    getSelfRect() {\n        var points = [];\n        this.dataArray.forEach(function (data) {\n            if (data.command === 'A') {\n                var start = data.points[4];\n                var dTheta = data.points[5];\n                var end = data.points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                if (dTheta < 0) {\n                    for (let t = start - inc; t > end; t -= inc) {\n                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n                else {\n                    for (let t = start + inc; t < end; t += inc) {\n                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);\n                        points.push(point.x, point.y);\n                    }\n                }\n            }\n            else if (data.command === 'C') {\n                for (let t = 0.0; t <= 1; t += 0.01) {\n                    const point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);\n                    points.push(point.x, point.y);\n                }\n            }\n            else {\n                points = points.concat(data.points);\n            }\n        });\n        var minX = points[0];\n        var maxX = points[0];\n        var minY = points[1];\n        var maxY = points[1];\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            if (!isNaN(x)) {\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n            }\n            if (!isNaN(y)) {\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        return {\n            x: Math.round(minX),\n            y: Math.round(minY),\n            width: Math.round(maxX - minX),\n            height: Math.round(maxY - minY),\n        };\n    }\n    getLength() {\n        return this.pathLength;\n    }\n    getPointAtLength(length) {\n        var point, i = 0, ii = this.dataArray.length;\n        if (!ii) {\n            return null;\n        }\n        while (i < ii && length > this.dataArray[i].pathLength) {\n            length -= this.dataArray[i].pathLength;\n            ++i;\n        }\n        if (i === ii) {\n            point = this.dataArray[i - 1].points.slice(-2);\n            return {\n                x: point[0],\n                y: point[1],\n            };\n        }\n        if (length < 0.01) {\n            point = this.dataArray[i].points.slice(0, 2);\n            return {\n                x: point[0],\n                y: point[1],\n            };\n        }\n        var cp = this.dataArray[i];\n        var p = cp.points;\n        switch (cp.command) {\n            case 'L':\n                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\n            case 'C':\n                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\n            case 'Q':\n                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\n            case 'A':\n                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];\n                theta += (dTheta * length) / cp.pathLength;\n                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\n        }\n        return null;\n    }\n    static getLineLength(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    static getPointOnLine(dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n        if (fromX === undefined) {\n            fromX = P1x;\n        }\n        if (fromY === undefined) {\n            fromY = P1y;\n        }\n        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\n        var run = Math.sqrt((dist * dist) / (1 + m * m));\n        if (P2x < P1x) {\n            run *= -1;\n        }\n        var rise = m * run;\n        var pt;\n        if (P2x === P1x) {\n            pt = {\n                x: fromX,\n                y: fromY + rise,\n            };\n        }\n        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise,\n            };\n        }\n        else {\n            var ix, iy;\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\n            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\n            u = u / (len * len);\n            ix = P1x + u * (P2x - P1x);\n            iy = P1y + u * (P2y - P1y);\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt((pRun * pRun) / (1 + m * m));\n            if (P2x < P1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise,\n            };\n        }\n        return pt;\n    }\n    static getPointOnCubicBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n        function CB1(t) {\n            return t * t * t;\n        }\n        function CB2(t) {\n            return 3 * t * t * (1 - t);\n        }\n        function CB3(t) {\n            return 3 * t * (1 - t) * (1 - t);\n        }\n        function CB4(t) {\n            return (1 - t) * (1 - t) * (1 - t);\n        }\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n        return {\n            x: x,\n            y: y,\n        };\n    }\n    static getPointOnQuadraticBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n        function QB1(t) {\n            return t * t;\n        }\n        function QB2(t) {\n            return 2 * t * (1 - t);\n        }\n        function QB3(t) {\n            return (1 - t) * (1 - t);\n        }\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n        return {\n            x: x,\n            y: y,\n        };\n    }\n    static getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\n        var pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta),\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi),\n        };\n    }\n    static parsePathData(data) {\n        if (!data) {\n            return [];\n        }\n        var cs = data;\n        var cc = [\n            'm',\n            'M',\n            'l',\n            'L',\n            'v',\n            'V',\n            'h',\n            'H',\n            'z',\n            'Z',\n            'c',\n            'C',\n            'q',\n            'Q',\n            't',\n            'T',\n            's',\n            'S',\n            'a',\n            'A',\n        ];\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\n        for (var n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n        var arr = cs.split('|');\n        var ca = [];\n        var coords = [];\n        var cpx = 0;\n        var cpy = 0;\n        var re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi;\n        var match;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            str = str.slice(1);\n            coords.length = 0;\n            while ((match = re.exec(str))) {\n                coords.push(match[0]);\n            }\n            var p = [];\n            for (var j = 0, jlen = coords.length; j < jlen; j++) {\n                if (coords[j] === '00') {\n                    p.push(0, 0);\n                    continue;\n                }\n                var parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    p.push(parsed);\n                }\n                else {\n                    p.push(0);\n                }\n            }\n            while (p.length > 0) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var cmd = null;\n                var points = [];\n                var startX = cpx, startY = cpy;\n                var prevCmd, ctlPtx, ctlPty;\n                var rx, ry, psi, fa, fs, x1, y1;\n                switch (c) {\n                    case 'l':\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'm':\n                        var dx = p.shift();\n                        var dy = p.shift();\n                        cpx += dx;\n                        cpy += dy;\n                        cmd = 'M';\n                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\n                            for (var idx = ca.length - 2; idx >= 0; idx--) {\n                                if (ca[idx].command === 'M') {\n                                    cpx = ca[idx].points[0] + dx;\n                                    cpy = ca[idx].points[1] + dy;\n                                    break;\n                                }\n                            }\n                        }\n                        points.push(cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'M';\n                        points.push(cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'C':\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'c':\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'Q':\n                        points.push(p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'q':\n                        points.push(cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                    case 'a':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                }\n                ca.push({\n                    command: cmd || c,\n                    points: points,\n                    start: {\n                        x: startX,\n                        y: startY,\n                    },\n                    pathLength: this.calcLength(startX, startY, cmd || c, points),\n                });\n            }\n            if (c === 'z' || c === 'Z') {\n                ca.push({\n                    command: 'z',\n                    points: [],\n                    start: undefined,\n                    pathLength: 0,\n                });\n            }\n        }\n        return ca;\n    }\n    static calcLength(x, y, cmd, points) {\n        var len, p1, p2, t;\n        var path = Path;\n        switch (cmd) {\n            case 'L':\n                return path.getLineLength(x, y, points[0], points[1]);\n            case 'C':\n                len = 0.0;\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'Q':\n                len = 0.0;\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'A':\n                len = 0.0;\n                var start = points[4];\n                var dTheta = points[5];\n                var end = points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                if (dTheta < 0) {\n                    for (t = start - inc; t > end; t -= inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                else {\n                    for (t = start + inc; t < end; t += inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                return len;\n        }\n        return 0;\n    }\n    static convertEndpointToCenterParameterization(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n        var psi = psiDeg * (Math.PI / 180.0);\n        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;\n        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +\n            (Math.cos(psi) * (y1 - y2)) / 2.0;\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n        if (lambda > 1) {\n            rx *= Math.sqrt(lambda);\n            ry *= Math.sqrt(lambda);\n        }\n        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /\n            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\n        if (fa === fs) {\n            f *= -1;\n        }\n        if (isNaN(f)) {\n            f = 0;\n        }\n        var cxp = (f * rx * yp) / ry;\n        var cyp = (f * -ry * xp) / rx;\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n        var vMag = function (v) {\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n        };\n        var vRatio = function (u, v) {\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n        };\n        var vAngle = function (u, v) {\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n        };\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n        var dTheta = vAngle(u, v);\n        if (vRatio(u, v) <= -1) {\n            dTheta = Math.PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * Math.PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * Math.PI;\n        }\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n    }\n}\nPath.prototype.className = 'Path';\nPath.prototype._attrsAffectingSize = ['data'];\n_registerNode(Path);\nFactory.addGetterSetter(Path, 'data');\n//# sourceMappingURL=Path.js.map"]},"metadata":{},"sourceType":"module"}