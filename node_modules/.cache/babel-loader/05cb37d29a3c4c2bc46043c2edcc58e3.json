{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { placeOrder, getByPartCodeBulk } from './service';\nconst placeOrderSlice = createSlice({\n  name: 'placeOrderSlice',\n  initialState: {\n    parts: [],\n    bulkOrderItem: []\n  },\n  reducers: {\n    addParts: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.parts = payload;\n    },\n    addBulkOrderItem: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.bulkOrderItem = payload;\n    }\n  }\n});\nexport const {\n  addBulkOrderItem\n} = placeOrderSlice.actions;\nexport const createOrder = payload => dispatcher => {\n  return placeOrder(payload).then(response => {\n    return Promise.resolve(response);\n  }, error => {\n    return Promise.reject(error);\n  });\n};\nexport const getPartByCodes = payload => dispatcher => {\n  return getByPartCodeBulk(payload).then(response => {\n    return Promise.resolve(response);\n  }, error => {\n    return Promise.reject(error);\n  });\n};\nexport const selectPlaceOrder = state => state.placeOrder;\nexport default placeOrderSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/PlaceOrder/slice.js"],"names":["createSlice","placeOrder","getByPartCodeBulk","placeOrderSlice","name","initialState","parts","bulkOrderItem","reducers","addParts","state","payload","addBulkOrderItem","actions","createOrder","dispatcher","then","response","Promise","resolve","error","reject","getPartByCodes","selectPlaceOrder","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,WAA9C;AAGA,MAAMC,eAAe,GAAGH,WAAW,CAAC;AAChCI,EAAAA,IAAI,EAAE,iBAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACXC,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,aAAa,EAAE;AAFJ,GAFkB;AAMhCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AAC5BD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,OAAd;AACH,KAHK;AAKNC,IAAAA,gBAAgB,EAAE,CAACF,KAAD,YAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AACpCD,MAAAA,KAAK,CAACH,aAAN,GAAsBI,OAAtB;AACH;AAPK;AANsB,CAAD,CAAnC;AAiBA,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAuBT,eAAe,CAACU,OAA7C;AAEP,OAAO,MAAMC,WAAW,GAAIH,OAAD,IAAaI,UAAU,IAAI;AAClD,SAAOd,UAAU,CAACU,OAAD,CAAV,CAAoBK,IAApB,CACHC,QAAQ,IAAI;AACR,WAAOC,OAAO,CAACC,OAAR,CAAgBF,QAAhB,CAAP;AACH,GAHE,EAKHG,KAAK,IAAI;AACL,WAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH,GAPE,CAAP;AAUH,CAXM;AAaP,OAAO,MAAME,cAAc,GAAIX,OAAD,IAAaI,UAAU,IAAI;AACrD,SAAOb,iBAAiB,CAACS,OAAD,CAAjB,CAA2BK,IAA3B,CACHC,QAAQ,IAAI;AACR,WAAOC,OAAO,CAACC,OAAR,CAAgBF,QAAhB,CAAP;AACH,GAHE,EAKHG,KAAK,IAAI;AACL,WAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH,GAPE,CAAP;AAUH,CAXM;AAgBP,OAAO,MAAMG,gBAAgB,GAAGb,KAAK,IAAIA,KAAK,CAACT,UAAxC;AAIP,eAAeE,eAAe,CAACqB,OAA/B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { placeOrder, getByPartCodeBulk } from './service';\r\n\r\n\r\nconst placeOrderSlice = createSlice({\r\n    name: 'placeOrderSlice',\r\n    initialState: {\r\n       parts: [],\r\n       bulkOrderItem: []\r\n    }, \r\n    reducers: {\r\n        addParts: (state, {payload}) => {\r\n            state.parts = payload;\r\n        },\r\n\r\n        addBulkOrderItem: (state, {payload}) => {\r\n            state.bulkOrderItem = payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addBulkOrderItem } = placeOrderSlice.actions;\r\n\r\nexport const createOrder = (payload) => dispatcher => {\r\n    return placeOrder(payload).then(\r\n        response => {\r\n            return Promise.resolve(response);\r\n        },\r\n\r\n        error => {\r\n            return Promise.reject(error);\r\n        }\r\n\r\n    )\r\n}   \r\n\r\nexport const getPartByCodes = (payload) => dispatcher => {\r\n    return getByPartCodeBulk(payload).then(\r\n        response => {\r\n            return Promise.resolve(response);\r\n        },\r\n\r\n        error => {\r\n            return Promise.reject(error);\r\n        }\r\n\r\n    )\r\n}  \r\n\r\n\r\n\r\n\r\nexport const selectPlaceOrder = state => state.placeOrder;\r\n\r\n\r\n\r\nexport default placeOrderSlice.reducer;"]},"metadata":{},"sourceType":"module"}