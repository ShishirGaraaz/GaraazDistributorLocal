{"ast":null,"code":"import _ from 'lodash';\nimport { getCities, getStates } from '../../utils/placeApi';\nexport const xlTimeToJSTime = xlTime => {\n  if (xlTime) {\n    let basenumber = xlTime * 24;\n    let hour = Math.floor(basenumber).toString();\n\n    if (hour.length < 2) {\n      hour = '0' + hour;\n    }\n\n    var minute = Math.round(basenumber % 1 * 60).toString();\n\n    if (minute.length < 2) {\n      minute = '0' + minute;\n    }\n\n    let Timestring = hour + ':' + minute + ':00';\n    return Timestring;\n  }\n\n  return '';\n};\n\nconst validateLocation = (header, inputValue) => {\n  switch (header) {\n    case 'Country':\n      if (inputValue.toUpperCase() === 'INDIA') {\n        return inputValue;\n      } else {\n        return '';\n      }\n\n    case 'Pin Code':\n      if (`${inputValue}`.length === 6) {\n        return inputValue;\n      } else {\n        return '';\n      }\n\n    default:\n      return inputValue;\n    // code block\n  }\n};\n\nconst validateContact = (header, inputValue) => {\n  switch (header) {\n    case 'Emails':\n      // code block\n      const regX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (regX.test(inputValue)) {\n        return inputValue;\n      } else {\n        return '';\n      }\n\n    case 'Mobile Numbers':\n    case 'Alternate Numbers':\n    case 'WhatsApp Numbers':\n      if (`${inputValue}`.length === 10) {\n        return [`91${inputValue}`];\n      } else {\n        return '';\n      }\n\n    // case \"Landline Numbers\":\n    //   // code block\n    //   break;\n\n    default:\n      return inputValue;\n  }\n};\n\nexport const sheetValidation = async (sheetData, auth, data, acceptedBranchOnboardingHeaders) => {\n  try {\n    const States = await getStates();\n    let iso2 = '';\n    const missingFields = [];\n    return sheetData.map(async row => {\n      var _ref;\n\n      const location = {};\n      const contact = {};\n      const mappedRow = {};\n      acceptedBranchOnboardingHeaders.forEach(header => {\n        try {\n          if (header === 'Working Days') {\n            var _row$data$header;\n\n            const days = (_row$data$header = row[data[header]]) === null || _row$data$header === void 0 ? void 0 : _row$data$header.split(' ' || ',');\n            mappedRow[_.camelCase(header)] = days || [];\n          } else if (header === 'Start Time' || header === 'End Time') {\n            mappedRow[_.camelCase(header)] = xlTimeToJSTime(row[data[header]]);\n          } else if (header === 'Address Line1' || header === 'Address Line2' || header === 'City' || header === 'State' || header === 'Country' || header === 'Pin Code' || header === 'Branch Code') {\n            const res = validateLocation(header, row[data[header]]);\n\n            if (res === '' && (header === 'Address Line1' || header === 'State' || header === 'Country' || header === 'Branch Code')) {\n              mappedRow.isInvalid = true;\n              missingFields.push(header);\n            }\n\n            location[_.camelCase(header)] = res;\n            mappedRow[_.camelCase(header)] = res;\n          } else if (header === 'Mobile Numbers' || header === 'Alternate Numbers' || header === 'Landline Numbers' || header === 'WhatsApp Numbers' || header === 'Emails' || header === 'Website') {\n            const res = validateContact(header, header === 'Alternate Numbers' ? row[data['Mobile Numbers']] : row[data[header]]);\n\n            if (res === '' && header === 'Mobile Numbers') {\n              mappedRow.isInvalid = true;\n              missingFields.push(header);\n            } else {\n              mappedRow[_.camelCase(header)] = res;\n              contact[_.camelCase(header)] = res;\n            }\n          } else {\n            mappedRow[_.camelCase(header)] = row[data[header]];\n          }\n        } catch (error) {\n          mappedRow[_.camelCase(header)] = '';\n\n          if (header === 'Mobile Numbers' || header === 'Address Line1' || header === 'State' || header === 'Country' || header === 'Branch Name' || header === 'Branch Code') {\n            mappedRow.isInvalid = true;\n            missingFields.push(header);\n          }\n        }\n      });\n      mappedRow.location = location;\n      mappedRow.contact = contact;\n      mappedRow.gallery = [];\n      mappedRow.location.countryCode = '+91';\n      const state = (_ref = [...States]) === null || _ref === void 0 ? void 0 : _ref.filter(stat => {\n        var _mappedRow$location, _mappedRow$location$s;\n\n        return stat.name.toUpperCase() === ((_mappedRow$location = mappedRow.location) === null || _mappedRow$location === void 0 ? void 0 : (_mappedRow$location$s = _mappedRow$location.state) === null || _mappedRow$location$s === void 0 ? void 0 : _mappedRow$location$s.toUpperCase());\n      });\n\n      if (state.length) {\n        iso2 = state[0].iso2;\n      } else {\n        mappedRow.isInvalid = true;\n        mappedRow.state = '';\n        mappedRow.location.state = '';\n        mappedRow.location.city = '';\n        missingFields.push('State');\n      }\n\n      const cities = await getCities(iso2);\n      const city = cities.filter(ct => {\n        return ct.name.toUpperCase() === mappedRow.location.city.toUpperCase();\n      });\n\n      if (city.length) {\n        iso2 = '';\n      } else {\n        iso2 = '';\n        mappedRow.city = ''; //mappedRow.isInvalid = true;\n\n        mappedRow.location.city = '';\n      }\n\n      return {\n        data: mappedRow,\n        missingFields\n      };\n    });\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/components/BranchBulk/helper.js"],"names":["_","getCities","getStates","xlTimeToJSTime","xlTime","basenumber","hour","Math","floor","toString","length","minute","round","Timestring","validateLocation","header","inputValue","toUpperCase","validateContact","regX","test","sheetValidation","sheetData","auth","data","acceptedBranchOnboardingHeaders","States","iso2","missingFields","map","row","location","contact","mappedRow","forEach","days","split","camelCase","res","isInvalid","push","error","gallery","countryCode","state","filter","stat","name","city","cities","ct"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport { getCities, getStates } from '../../utils/placeApi';\r\n\r\nexport const xlTimeToJSTime = (xlTime) => {\r\n  if (xlTime) {\r\n    let basenumber = xlTime * 24;\r\n    let hour = Math.floor(basenumber).toString();\r\n    if (hour.length < 2) {\r\n      hour = '0' + hour;\r\n    }\r\n\r\n    var minute = Math.round((basenumber % 1) * 60).toString();\r\n    if (minute.length < 2) {\r\n      minute = '0' + minute;\r\n    }\r\n    let Timestring = hour + ':' + minute + ':00';\r\n    return Timestring;\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nconst validateLocation = (header, inputValue) => {\r\n  switch (header) {\r\n    case 'Country':\r\n      if (inputValue.toUpperCase() === 'INDIA') {\r\n        return inputValue;\r\n      } else {\r\n        return '';\r\n      }\r\n    case 'Pin Code':\r\n      if (`${inputValue}`.length === 6) {\r\n        return inputValue;\r\n      } else {\r\n        return '';\r\n      }\r\n    default:\r\n      return inputValue;\r\n    // code block\r\n  }\r\n};\r\nconst validateContact = (header, inputValue) => {\r\n  switch (header) {\r\n    case 'Emails':\r\n      // code block\r\n      const regX =\r\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n      if (regX.test(inputValue)) {\r\n        return inputValue;\r\n      } else {\r\n        return '';\r\n      }\r\n    case 'Mobile Numbers':\r\n    case 'Alternate Numbers':\r\n    case 'WhatsApp Numbers':\r\n      if (`${inputValue}`.length === 10) {\r\n        return [`91${inputValue}`];\r\n      } else {\r\n        return '';\r\n      }\r\n    // case \"Landline Numbers\":\r\n    //   // code block\r\n    //   break;\r\n    default:\r\n      return inputValue;\r\n  }\r\n};\r\nexport const sheetValidation = async (\r\n  sheetData,\r\n  auth,\r\n  data,\r\n  acceptedBranchOnboardingHeaders,\r\n) => {\r\n  try {\r\n    const States = await getStates();\r\n    let iso2 = '';\r\n    const missingFields = [];\r\n    return sheetData.map(async (row) => {\r\n      const location = {};\r\n      const contact = {};\r\n      const mappedRow = {};\r\n     \r\n      acceptedBranchOnboardingHeaders.forEach((header) => {\r\n        try {\r\n          if (header === 'Working Days') {\r\n            const days = row[data[header]]?.split(' ' || ',')\r\n            mappedRow[_.camelCase(header)] = days || [];\r\n          } else if (header === 'Start Time' || header === 'End Time') {\r\n            mappedRow[_.camelCase(header)] = xlTimeToJSTime(row[data[header]]);\r\n          } else if (\r\n            header === 'Address Line1' ||\r\n            header === 'Address Line2' ||\r\n            header === 'City' ||\r\n            header === 'State' ||\r\n            header === 'Country' ||\r\n            header === 'Pin Code' ||\r\n            header === 'Branch Code'\r\n          ) {\r\n            const res = validateLocation(header, row[data[header]]);\r\n            if (\r\n              res === '' &&\r\n              (header === 'Address Line1' ||\r\n                header === 'State' ||\r\n                header === 'Country' ||\r\n                header === 'Branch Code')\r\n            ){\r\n              mappedRow.isInvalid = true;\r\n              missingFields.push(header)\r\n            }\r\n              \r\n            location[_.camelCase(header)] = res;\r\n            mappedRow[_.camelCase(header)] = res;\r\n          } else if (\r\n            header === 'Mobile Numbers' ||\r\n            header === 'Alternate Numbers' ||\r\n            header === 'Landline Numbers' ||\r\n            header === 'WhatsApp Numbers' ||\r\n            header === 'Emails' ||\r\n            header === 'Website'\r\n          ) {\r\n            const res = validateContact(header, header === 'Alternate Numbers'? row[data['Mobile Numbers']] : row[data[header]]);\r\n            if (res === '' && header === 'Mobile Numbers'){\r\n              mappedRow.isInvalid = true;\r\n              missingFields.push(header)\r\n            } else {\r\n              mappedRow[_.camelCase(header)] = res;\r\n              contact[_.camelCase(header)] = res;\r\n            }\r\n             \r\n           \r\n          } else {\r\n            mappedRow[_.camelCase(header)] = row[data[header]];\r\n          }\r\n        } catch (error) {\r\n          mappedRow[_.camelCase(header)] = '';\r\n          if (\r\n            header === 'Mobile Numbers' ||\r\n            header === 'Address Line1' ||\r\n            header === 'State' ||\r\n            header === 'Country' ||\r\n            header === 'Branch Name'||\r\n            header === 'Branch Code'\r\n          ) {\r\n            mappedRow.isInvalid = true;\r\n            missingFields.push(header)\r\n          }\r\n        }\r\n      });\r\n      mappedRow.location = location;\r\n      mappedRow.contact = contact;\r\n      mappedRow.gallery = [];\r\n      mappedRow.location.countryCode = '+91';\r\n\r\n      const state = [...States]?.filter((stat) => {\r\n        return (\r\n          stat.name.toUpperCase() === mappedRow.location?.state?.toUpperCase()\r\n        );\r\n      });\r\n\r\n      if (state.length) {\r\n        iso2 = state[0].iso2;\r\n      } else {\r\n        mappedRow.isInvalid = true;\r\n        mappedRow.state = '';\r\n        mappedRow.location.state = '';\r\n        mappedRow.location.city = '';\r\n        missingFields.push('State')\r\n      }\r\n\r\n      const cities = await getCities(iso2);\r\n      const city = cities.filter((ct) => {\r\n        return ct.name.toUpperCase() === mappedRow.location.city.toUpperCase();\r\n      });\r\n      if (city.length) {\r\n        iso2 = '';\r\n      } else {\r\n        iso2 = '';\r\n        mappedRow.city = '';\r\n        //mappedRow.isInvalid = true;\r\n        mappedRow.location.city = '';\r\n      }\r\n\r\n      return {data: mappedRow, missingFields};\r\n    });\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}