{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Activation = void 0;\n\nclass Activation {\n  constructor(options) {\n    this.onIsActiveChanged = options.onIsActiveChanged;\n    this.isActive = false;\n    this.timers = [];\n  }\n\n  activate() {\n    this.isActive = true;\n    this.onIsActiveChanged({\n      isActive: true\n    });\n  }\n\n  deactivate() {\n    this.isActive = false;\n    this.onIsActiveChanged({\n      isActive: false\n    });\n    this.clearTimers();\n  }\n\n  toggleActivation() {\n    if (this.isActive) {\n      this.deactivate();\n    } else {\n      this.activate();\n    }\n  }\n\n  clearTimers() {\n    const {\n      timers\n    } = this;\n\n    while (timers.length) {\n      const timer = timers.pop();\n\n      if (timer === null || timer === void 0 ? void 0 : timer.id) {\n        // @ts-expect-error\n        clearTimeout(timer.id);\n      }\n    }\n  }\n\n  clearTimer(timerName) {\n    this.timers.forEach(timer => {\n      if (timer.name === timerName) {\n        // @ts-expect-error\n        clearTimeout(timer.id);\n      }\n    });\n  }\n\n}\n\nexports.Activation = Activation;","map":{"version":3,"sources":["../../../src/lib/Activation.ts"],"names":[],"mappings":";;;;;;;AAMA,MAAa,UAAb,CAAuB;AAOnB,EAAA,WAAA,CAAY,OAAZ,EAAsC;AAClC,SAAK,iBAAL,GAAyB,OAAO,CAAC,iBAAjC;AACA,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,MAAL,GAAc,EAAd;AACH;;AAED,EAAA,QAAQ,GAAA;AACJ,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,iBAAL,CAAuB;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAvB;AACH;;AAED,EAAA,UAAU,GAAA;AACN,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,iBAAL,CAAuB;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAvB;AACA,SAAK,WAAL;AACH;;AAED,EAAA,gBAAgB,GAAA;AACZ,QAAI,KAAK,QAAT,EAAmB;AACf,WAAK,UAAL;AACH,KAFD,MAEO;AACH,WAAK,QAAL;AACH;AACJ;;AAED,EAAA,WAAW,GAAA;AACP,UAAM;AAAE,MAAA;AAAF,QAAa,IAAnB;;AAEA,WAAO,MAAM,CAAC,MAAd,EAAsB;AAClB,YAAM,KAAK,GAAG,MAAM,CAAC,GAAP,EAAd;;AAEA,UAAI,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,EAAX,EAAe;AACX;AACA,QAAA,YAAY,CAAC,KAAK,CAAC,EAAP,CAAZ;AACH;AACJ;AACJ;;AAED,EAAA,UAAU,CAAC,SAAD,EAAkB;AACxB,SAAK,MAAL,CAAY,OAAZ,CAAqB,KAAD,IAAU;AAC1B,UAAI,KAAK,CAAC,IAAN,KAAe,SAAnB,EAA8B;AAC1B;AACA,QAAA,YAAY,CAAC,KAAK,CAAC,EAAP,CAAZ;AACH;AACJ,KALD;AAMH;;AApDkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["import type { OnIsActiveChangedHandler, TimerHandle } from 'src/types';\n\nexport type ActivationOptions = {\n    onIsActiveChanged: OnIsActiveChangedHandler;\n};\n\nexport class Activation {\n    isActive: boolean;\n\n    onIsActiveChanged: OnIsActiveChangedHandler;\n\n    timers: TimerHandle[];\n\n    constructor(options: ActivationOptions) {\n        this.onIsActiveChanged = options.onIsActiveChanged;\n        this.isActive = false;\n        this.timers = [];\n    }\n\n    activate(): void {\n        this.isActive = true;\n        this.onIsActiveChanged({ isActive: true });\n    }\n\n    deactivate(): void {\n        this.isActive = false;\n        this.onIsActiveChanged({ isActive: false });\n        this.clearTimers();\n    }\n\n    toggleActivation(): void {\n        if (this.isActive) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    clearTimers(): void {\n        const { timers } = this;\n\n        while (timers.length) {\n            const timer = timers.pop();\n\n            if (timer?.id) {\n                // @ts-expect-error\n                clearTimeout(timer.id);\n            }\n        }\n    }\n\n    clearTimer(timerName: string): void {\n        this.timers.forEach((timer) => {\n            if (timer.name === timerName) {\n                // @ts-expect-error\n                clearTimeout(timer.id);\n            }\n        });\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}