{"ast":null,"code":"import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n  constructor(config) {\n    super(config);\n    this._updated = true;\n    this.anim = new Animation(() => {\n      var updated = this._updated;\n      this._updated = false;\n      return updated;\n    });\n    this.on('animationChange.konva', function () {\n      this.frameIndex(0);\n    });\n    this.on('frameIndexChange.konva', function () {\n      this._updated = true;\n    });\n    this.on('frameRateChange.konva', function () {\n      if (!this.anim.isRunning()) {\n        return;\n      }\n\n      clearInterval(this.interval);\n\n      this._setInterval();\n    });\n  }\n\n  _sceneFunc(context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        x = set[ix4 + 0],\n        y = set[ix4 + 1],\n        width = set[ix4 + 2],\n        height = set[ix4 + 3],\n        image = this.image();\n\n    if (this.hasFill() || this.hasStroke()) {\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n\n    if (image) {\n      if (offsets) {\n        var offset = offsets[anim],\n            ix2 = index * 2;\n        context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n      } else {\n        context.drawImage(image, x, y, width, height, 0, 0, width, height);\n      }\n    }\n  }\n\n  _hitFunc(context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        width = set[ix4 + 2],\n        height = set[ix4 + 3];\n    context.beginPath();\n\n    if (offsets) {\n      var offset = offsets[anim];\n      var ix2 = index * 2;\n      context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n    } else {\n      context.rect(0, 0, width, height);\n    }\n\n    context.closePath();\n    context.fillShape(this);\n  }\n\n  _useBufferCanvas() {\n    return super._useBufferCanvas(true);\n  }\n\n  _setInterval() {\n    var that = this;\n    this.interval = setInterval(function () {\n      that._updateIndex();\n    }, 1000 / this.frameRate());\n  }\n\n  start() {\n    if (this.isRunning()) {\n      return;\n    }\n\n    var layer = this.getLayer();\n    this.anim.setLayers(layer);\n\n    this._setInterval();\n\n    this.anim.start();\n  }\n\n  stop() {\n    this.anim.stop();\n    clearInterval(this.interval);\n  }\n\n  isRunning() {\n    return this.anim.isRunning();\n  }\n\n  _updateIndex() {\n    var index = this.frameIndex(),\n        animation = this.animation(),\n        animations = this.animations(),\n        anim = animations[animation],\n        len = anim.length / 4;\n\n    if (index < len - 1) {\n      this.frameIndex(index + 1);\n    } else {\n      this.frameIndex(0);\n    }\n  }\n\n}\nSprite.prototype.className = 'Sprite';\n\n_registerNode(Sprite);\n\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n  index: 'frameIndex',\n  getIndex: 'getFrameIndex',\n  setIndex: 'setFrameIndex'\n});","map":{"version":3,"sources":["../../src/shapes/Sprite.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n    constructor(config) {\n        super(config);\n        this._updated = true;\n        this.anim = new Animation(() => {\n            var updated = this._updated;\n            this._updated = false;\n            return updated;\n        });\n        this.on('animationChange.konva', function () {\n            this.frameIndex(0);\n        });\n        this.on('frameIndexChange.konva', function () {\n            this._updated = true;\n        });\n        this.on('frameRateChange.konva', function () {\n            if (!this.anim.isRunning()) {\n                return;\n            }\n            clearInterval(this.interval);\n            this._setInterval();\n        });\n    }\n    _sceneFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();\n        if (this.hasFill() || this.hasStroke()) {\n            context.beginPath();\n            context.rect(0, 0, width, height);\n            context.closePath();\n            context.fillStrokeShape(this);\n        }\n        if (image) {\n            if (offsets) {\n                var offset = offsets[anim], ix2 = index * 2;\n                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n            }\n            else {\n                context.drawImage(image, x, y, width, height, 0, 0, width, height);\n            }\n        }\n    }\n    _hitFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];\n        context.beginPath();\n        if (offsets) {\n            var offset = offsets[anim];\n            var ix2 = index * 2;\n            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n        }\n        else {\n            context.rect(0, 0, width, height);\n        }\n        context.closePath();\n        context.fillShape(this);\n    }\n    _useBufferCanvas() {\n        return super._useBufferCanvas(true);\n    }\n    _setInterval() {\n        var that = this;\n        this.interval = setInterval(function () {\n            that._updateIndex();\n        }, 1000 / this.frameRate());\n    }\n    start() {\n        if (this.isRunning()) {\n            return;\n        }\n        var layer = this.getLayer();\n        this.anim.setLayers(layer);\n        this._setInterval();\n        this.anim.start();\n    }\n    stop() {\n        this.anim.stop();\n        clearInterval(this.interval);\n    }\n    isRunning() {\n        return this.anim.isRunning();\n    }\n    _updateIndex() {\n        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;\n        if (index < len - 1) {\n            this.frameIndex(index + 1);\n        }\n        else {\n            this.frameIndex(0);\n        }\n    }\n}\nSprite.prototype.className = 'Sprite';\n_registerNode(Sprite);\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n    index: 'frameIndex',\n    getIndex: 'getFrameIndex',\n    setIndex: 'setFrameIndex',\n});\n//# sourceMappingURL=Sprite.js.map"]},"metadata":{},"sourceType":"module"}