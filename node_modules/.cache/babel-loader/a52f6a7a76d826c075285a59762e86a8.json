{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createBulkAccount, fetchAllAccounts, fetchWorkshopAccounts, getFileQueue } from './service';\nconst accountSlice = createSlice({\n  name: 'accountSlice',\n  initialState: {\n    allAccounts: [],\n    workshopAccount: [],\n    workshopAccountList: [],\n    queuedFile: []\n  },\n  reducers: {\n    addAllAccounts: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.allAccounts = payload;\n    },\n    addWorkshopAccount: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.workshopAccount = payload;\n    },\n    addWorkshopAccountList: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.workshopAccountList = payload;\n    },\n    addQueuedFile: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.queuedFile = payload;\n    },\n    addSingleQueue: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.queuedFile = [...state.queuedFile, payload];\n    }\n  }\n});\nexport const {\n  addAllAccounts,\n  addWorkshopAccount,\n  addWorkshopAccountList,\n  addQueuedFile,\n  addSingleQueue\n} = accountSlice.actions;\nexport const uploadBulkAccount = payload => dispatcher => {\n  return createBulkAccount(payload).then(response => {\n    return Promise.resolve(response);\n  }, error => {\n    if (error.response) {\n      return Promise.reject(error);\n    }\n  });\n};\nexport const getAllAccounts = payload => dispatcher => {\n  return fetchAllAccounts(payload).then(response => {\n    var _Object$values;\n\n    const data = (_Object$values = Object.values(response.data)) === null || _Object$values === void 0 ? void 0 : _Object$values.map((el, index) => {\n      return { ...el,\n        code: Object.keys(response.data)[index]\n      };\n    });\n    dispatcher(addAllAccounts(data));\n    return Promise.resolve(data);\n  }, error => {\n    if (error.response) {\n      return Promise.reject(error.response.data);\n    }\n  });\n};\nexport const getWorkshopAccounts = payload => dispatcher => {\n  return fetchWorkshopAccounts(payload).then(response => {\n    dispatcher(addWorkshopAccount([response.data.workshopAccounts]));\n    dispatcher(addWorkshopAccountList(response.data.accounts));\n    return Promise.resolve(response.data);\n  });\n};\nexport const getQueuedFiles = payload => dispatcher => {\n  return getFileQueue(payload).then(response => {\n    dispatcher(addQueuedFile(Array.isArray(response.data) ? response.data : []));\n    return Promise.resolve(response.data);\n  }, error => {\n    if (error.response) {\n      return Promise.reject(error.response.data);\n    }\n  });\n};\nexport const selectAccounts = state => state.accounts;\nexport default accountSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/Accounting/slice.js"],"names":["createSlice","createBulkAccount","fetchAllAccounts","fetchWorkshopAccounts","getFileQueue","accountSlice","name","initialState","allAccounts","workshopAccount","workshopAccountList","queuedFile","reducers","addAllAccounts","state","payload","addWorkshopAccount","addWorkshopAccountList","addQueuedFile","addSingleQueue","actions","uploadBulkAccount","dispatcher","then","response","Promise","resolve","error","reject","getAllAccounts","data","Object","values","map","el","index","code","keys","getWorkshopAccounts","workshopAccounts","accounts","getQueuedFiles","Array","isArray","selectAccounts","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { createBulkAccount, fetchAllAccounts, fetchWorkshopAccounts, getFileQueue} from './service';\r\n\r\n\r\nconst accountSlice = createSlice({\r\n    name: 'accountSlice',\r\n    initialState: {\r\n        allAccounts: [],\r\n        workshopAccount: [],\r\n        workshopAccountList: [],\r\n        queuedFile: [],\r\n    }, \r\n    reducers: {\r\n        addAllAccounts : (state, { payload }) => {\r\n            state.allAccounts = payload;\r\n        },\r\n        addWorkshopAccount: (state, {payload}) => {\r\n            state.workshopAccount = payload;\r\n        },\r\n        addWorkshopAccountList: (state, { payload }) => {\r\n            state.workshopAccountList = payload;\r\n        },\r\n        addQueuedFile: (state, { payload }) => {\r\n            state.queuedFile = payload;\r\n        },\r\n        addSingleQueue: (state, { payload }) => {\r\n            state.queuedFile = [...state.queuedFile, payload];\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addAllAccounts, addWorkshopAccount, addWorkshopAccountList,  addQueuedFile, addSingleQueue } = accountSlice.actions;\r\n\r\nexport const uploadBulkAccount = (payload) => dispatcher => {\r\n    return createBulkAccount(payload).then(\r\n        response => {\r\n            return Promise.resolve(response);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getAllAccounts = (payload) => dispatcher => {\r\n    return fetchAllAccounts(payload).then(\r\n        response => {\r\n            const data = Object.values(response.data)?.map((el,index )=> {\r\n                return {...el, code: Object.keys(response.data)[index]}\r\n            })\r\n            dispatcher(addAllAccounts(data));\r\n            return Promise.resolve(data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getWorkshopAccounts = (payload) => dispatcher => {\r\n    return fetchWorkshopAccounts(payload).then(\r\n        response => {\r\n            dispatcher(addWorkshopAccount([response.data.workshopAccounts]));\r\n            dispatcher(addWorkshopAccountList(response.data.accounts));\r\n            return Promise.resolve(response.data);\r\n\r\n        }\r\n    )\r\n}\r\n\r\nexport const getQueuedFiles = (payload) => dispatcher => {\r\n    return getFileQueue(payload).then(\r\n        response => {\r\n            dispatcher(addQueuedFile(Array.isArray(response.data) ? response.data : []));\r\n            return Promise.resolve(response.data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport const selectAccounts = state => state.accounts;\r\n\r\n\r\n\r\nexport default accountSlice.reducer;"]},"metadata":{},"sourceType":"module"}