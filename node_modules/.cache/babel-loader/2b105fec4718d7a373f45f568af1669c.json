{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Services from './services';\nconst outstandingAcctSlice = createSlice({\n  name: 'outstandingAcctSlice',\n  initialState: {\n    outstandingAcctList: [],\n    workshopAccount: [],\n    workshopAccountList: []\n  },\n  reducers: {\n    addOutstandingAcct: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.outstandingAcctList = payload;\n    },\n    addWorkshopOutstanding: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.workshopAccount = payload;\n    },\n    addWorkshopAccountList: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.workshopAccountList = payload;\n    }\n  }\n});\nexport const {\n  addOutstandingAcct,\n  addWorkshopOutstanding,\n  addWorkshopAccountList\n} = outstandingAcctSlice.actions;\nexport const fetchAllOutstanding = payload => dispatcher => {\n  return Services.fetchAllOutstandingAcct(payload).then(response => {\n    var _Object$values;\n\n    const data = (_Object$values = Object.values(response.data)) === null || _Object$values === void 0 ? void 0 : _Object$values.map((el, index) => {\n      return { ...el,\n        code: Object.keys(response.data)[index]\n      };\n    });\n    dispatcher(addOutstandingAcct(data));\n    return Promise.resolve(data);\n  }, error => {\n    if (error.response) {\n      return Promise.reject(error.response.data);\n    }\n  });\n};\nexport const getWorkshopAccounts = payload => dispatcher => {\n  return Services.fetchWorkshopAccounts(payload).then(response => {\n    dispatcher(addWorkshopOutstanding([response.data.workshopOutstandings]));\n    dispatcher(addWorkshopAccountList(response.data.accounts));\n    return Promise.resolve(response.data);\n  });\n};\nexport const selectOutsandingAcct = state => state.outstandingAcct;\nexport default outstandingAcctSlice.reducer;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Work/garaaz-distributor/src/containers/OutstandingAccount/slice.js"],"names":["createSlice","Services","outstandingAcctSlice","name","initialState","outstandingAcctList","workshopAccount","workshopAccountList","reducers","addOutstandingAcct","state","payload","addWorkshopOutstanding","addWorkshopAccountList","actions","fetchAllOutstanding","dispatcher","fetchAllOutstandingAcct","then","response","data","Object","values","map","el","index","code","keys","Promise","resolve","error","reject","getWorkshopAccounts","fetchWorkshopAccounts","workshopOutstandings","accounts","selectOutsandingAcct","outstandingAcct","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,oBAAoB,GAAGF,WAAW,CAAC;AACrCG,EAAAA,IAAI,EAAE,sBAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,mBAAmB,EAAE,EADX;AAEVC,IAAAA,eAAe,EAAE,EAFP;AAGVC,IAAAA,mBAAmB,EAAE;AAHX,GAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,WAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AACtCD,MAAAA,KAAK,CAACL,mBAAN,GAA4BM,OAA5B;AACH,KAHK;AAINC,IAAAA,sBAAsB,EAAE,CAACF,KAAD,YAAsB;AAAA,UAAd;AAACC,QAAAA;AAAD,OAAc;AAC1CD,MAAAA,KAAK,CAACJ,eAAN,GAAwBK,OAAxB;AACH,KANK;AAONE,IAAAA,sBAAsB,EAAE,CAACH,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAC5CD,MAAAA,KAAK,CAACH,mBAAN,GAA4BI,OAA5B;AACH;AATK;AAP2B,CAAD,CAAxC;AAsBA,OAAO,MAAM;AAAEF,EAAAA,kBAAF;AAAsBG,EAAAA,sBAAtB;AAA8CC,EAAAA;AAA9C,IAAyEX,oBAAoB,CAACY,OAApG;AAEP,OAAO,MAAMC,mBAAmB,GAAIJ,OAAD,IAAaK,UAAU,IAAI;AAC1D,SAAOf,QAAQ,CAACgB,uBAAT,CAAiCN,OAAjC,EAA0CO,IAA1C,CACHC,QAAQ,IAAI;AAAA;;AACR,UAAMC,IAAI,qBAAGC,MAAM,CAACC,MAAP,CAAcH,QAAQ,CAACC,IAAvB,CAAH,mDAAG,eAA8BG,GAA9B,CAAkC,CAACC,EAAD,EAAIC,KAAJ,KAAc;AACzD,aAAO,EAAC,GAAGD,EAAJ;AAAQE,QAAAA,IAAI,EAAEL,MAAM,CAACM,IAAP,CAAYR,QAAQ,CAACC,IAArB,EAA2BK,KAA3B;AAAd,OAAP;AACH,KAFY,CAAb;AAGAT,IAAAA,UAAU,CAACP,kBAAkB,CAACW,IAAD,CAAnB,CAAV;AACA,WAAOQ,OAAO,CAACC,OAAR,CAAgBT,IAAhB,CAAP;AACH,GAPE,EAQHU,KAAK,IAAI;AACL,QAAGA,KAAK,CAACX,QAAT,EAAkB;AACd,aAAOS,OAAO,CAACG,MAAR,CAAeD,KAAK,CAACX,QAAN,CAAeC,IAA9B,CAAP;AACH;AACJ,GAZE,CAAP;AAcH,CAfM;AAiBP,OAAO,MAAMY,mBAAmB,GAAIrB,OAAD,IAAaK,UAAU,IAAI;AAC1D,SAAOf,QAAQ,CAACgC,qBAAT,CAA+BtB,OAA/B,EAAwCO,IAAxC,CACHC,QAAQ,IAAI;AACRH,IAAAA,UAAU,CAACJ,sBAAsB,CAAC,CAACO,QAAQ,CAACC,IAAT,CAAcc,oBAAf,CAAD,CAAvB,CAAV;AACAlB,IAAAA,UAAU,CAACH,sBAAsB,CAACM,QAAQ,CAACC,IAAT,CAAce,QAAf,CAAvB,CAAV;AACA,WAAOP,OAAO,CAACC,OAAR,CAAgBV,QAAQ,CAACC,IAAzB,CAAP;AAEH,GANE,CAAP;AAQH,CATM;AAWP,OAAO,MAAMgB,oBAAoB,GAAG1B,KAAK,IAAIA,KAAK,CAAC2B,eAA5C;AAEP,eAAenC,oBAAoB,CAACoC,OAApC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport Services from './services';\r\n\r\nconst outstandingAcctSlice = createSlice({\r\n    name: 'outstandingAcctSlice',\r\n    initialState: {\r\n        outstandingAcctList: [],\r\n        workshopAccount: [],\r\n        workshopAccountList: []\r\n    },\r\n    reducers: {\r\n        addOutstandingAcct: (state, {payload}) => {\r\n            state.outstandingAcctList = payload;\r\n        },\r\n        addWorkshopOutstanding: (state, {payload}) => {\r\n            state.workshopAccount = payload;\r\n        },\r\n        addWorkshopAccountList: (state, { payload }) => {\r\n            state.workshopAccountList = payload;\r\n        }\r\n    },\r\n   \r\n   \r\n})\r\n\r\nexport const { addOutstandingAcct, addWorkshopOutstanding, addWorkshopAccountList } = outstandingAcctSlice.actions;\r\n\r\nexport const fetchAllOutstanding = (payload) => dispatcher => {\r\n    return Services.fetchAllOutstandingAcct(payload).then(\r\n        response => {\r\n            const data = Object.values(response.data)?.map((el,index )=> {\r\n                return {...el, code: Object.keys(response.data)[index]}\r\n            })\r\n            dispatcher(addOutstandingAcct(data));\r\n            return Promise.resolve(data);\r\n        },\r\n        error => {\r\n            if(error.response){\r\n                return Promise.reject(error.response.data); \r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const getWorkshopAccounts = (payload) => dispatcher => {\r\n    return Services.fetchWorkshopAccounts(payload).then(\r\n        response => {\r\n            dispatcher(addWorkshopOutstanding([response.data.workshopOutstandings]));\r\n            dispatcher(addWorkshopAccountList(response.data.accounts));\r\n            return Promise.resolve(response.data);\r\n\r\n        }\r\n    )\r\n}\r\n\r\nexport const selectOutsandingAcct = state => state.outstandingAcct;\r\n\r\nexport default outstandingAcctSlice.reducer;"]},"metadata":{},"sourceType":"module"}